{
  "name": "mbpp_560_union_elements",
  "language": "go_test.go",
  "prompt": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, value := range test_tup1 {\n        result = append(result, value)\n    }\n    for _, value := range test_tup2 {\n        result = append(result, value)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        union_tup = append(union_tup, v)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, elem := range test_tup1 {\n        tup1_map[elem] = true\n    }\n    for _, elem := range test_tup2 {\n        tup2_map[elem] = true\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpxeywkwdx_test.go:45: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpxeywkwdx_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpxeywkwdx_test.go:45: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_set []interface{}\n    for _, elem := range test_tup1 {\n        union_set = append(union_set, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_set = append(union_set, elem)\n    }\n    return union_set\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpivep747k_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpivep747k_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpivep747k_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i, j = 0, 0; i < len(test_tup1) && j < len(test_tup2); {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for ; i < len(test_tup1); i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for ; j < len(test_tup2); j++ {\n        union_tup = append(union_tup, test_tup2[j])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo55l46oe_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpo55l46oe_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n\n    for _, value := range test_tup1 {\n        tup1_map[value] = 1\n    }\n\n    for _, value := range test_tup2 {\n        tup2_map[value] = 1\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpyzryffjm_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=10) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpyzryffjm_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpyzryffjm_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsa3nra1y_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpsa3nra1y_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, value := range test_tup1 {\n        result = append(result, value)\n    }\n    for _, value := range test_tup2 {\n        result = append(result, value)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpufqdwy50_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        union_tup_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_tup_map[v] = 1\n    }\n    for k, _ := range union_tup_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, item1 := range test_tup1 {\n        union_tup = append(union_tup, item1)\n    }\n    for _, item2 := range test_tup2 {\n        union_tup = append(union_tup, item2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpksf2i43__test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpksf2i43__test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpksf2i43__test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, val1 := range test_tup1 {\n        test_tup3 = append(test_tup3, val1)\n    }\n    for _, val2 := range test_tup2 {\n        test_tup3 = append(test_tup3, val2)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpycb8nk_7_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpycb8nk_7_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpycb8nk_7_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup_map[val] = 1\n    }\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp31_a5ukq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp31_a5ukq_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map map[interface{}]int\n    union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpvv_rlffq_test.go:40: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpvv_rlffq_test.go:40: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpvv_rlffq_test.go:40: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122647,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7i6otdfa_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp7i6otdfa_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup_map map[interface{}]bool = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup_map[val] = true\n    }\n    for key, _ := range tup_map {\n        result = append(result, key)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpux80hemb_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpux80hemb_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, elem := range test_tup1 {\n        tup1_map[elem] = true\n    }\n    for _, elem := range test_tup2 {\n        tup2_map[elem] = true\n    }\n\n    for elem, _ := range tup1_map {\n        union_tup = append(union_tup, elem)\n    }\n    for elem, _ := range tup2_map {\n        union_tup = append(union_tup, elem)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp76pu6tuh_test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp76pu6tuh_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp76pu6tuh_test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map map[interface{}]int = make(map[interface{}]int)\n    var tup2_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n    for key, _ := range tup1_map {\n        result = append(result, key)\n    }\n    for key, _ := range tup2_map {\n        result = append(result, key)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmptdqohoqc_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmptdqohoqc_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmptdqohoqc_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, val := range test_tup1 {\n        test_tup3 = append(test_tup3, val)\n    }\n    for _, val := range test_tup2 {\n        test_tup3 = append(test_tup3, val)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp1pz09xup_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp1pz09xup_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp1pz09xup_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, value := range test_tup1 {\n        test_tup3 = append(test_tup3, value)\n    }\n    for _, value := range test_tup2 {\n        test_tup3 = append(test_tup3, value)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpf6x3awa3_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpf6x3awa3_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpf6x3awa3_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    var test_tup4 []interface{}\n    var test_tup5 []interface{}\n    var test_tup6 []interface{}\n    var test_tup7 []interface{}\n    var test_tup8 []interface{}\n    var test_tup9 []interface{}\n    var test_tup10 []interface{}\n    var test_tup11 []interface{}\n    var test_tup12 []interface{}\n    var test_tup13 []interface{}\n    var test_tup14 []interface{}\n    var test_tup15 []interface{}\n    var test_tup16 []interface{}\n    var test_tup17 []interface{}\n    var test_tup18 []interface{}\n    var test_tup19 []interface{}\n    var test_tup20 []interface{}\n    var test_tup21 []interface{}\n    var test_tup22 []interface{}\n    var test_tup23 []interface{}\n    var test_tup24 []interface{}\n    var test_tup25 []interface{}\n    var test_tup26 []interface{}\n    var test_tup27 []interface{}\n    var test_tup28 []interface{}\n    var test_tup29 []interface{}\n    var test_tup30 []interface{}\n    var test_tup31 []interface{}\n    var test_tup32 []interface{}\n    var test_tup33 []interface{}\n    var test_tup34 []interface{}\n    var test_tup35 []interface{}\n    var test_tup36 []interface{}\n    var test_tup37 []interface{}\n    var test_tup38 []interface{}\n    var test_tup39 []interface{}\n    var test_tup40 []interface{}\n    var test_tup41 []interface{}\n    var test_tup42 []interface{}\n    var test_tup43 []interface{}\n    var test_tup44 []interface{}\n    var test_tup45\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122647,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5kuli7qf_test.go:52:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    for i := 0; i < len(union_tup); i++ {\n        for j := i + 1; j < len(union_tup); j++ {\n            if union_tup[i] == union_tup[j] {\n                union_tup = append(union_tup[:j], union_tup[j+1:]...)\n            }\n        }\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        tup_map[val] = 1\n    }\n\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpireudefn_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpireudefn_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v1 := range test_tup1 {\n        for _, v2 := range test_tup2 {\n            if v1 == v2 {\n                result = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp62mt0djs_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp62mt0djs_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp62mt0djs_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < tup1_len {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < tup2_len {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122647,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqivup_bv_test.go:16:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpqivup_bv_test.go:19:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, elem := range test_tup1 {\n        union_tup = append(union_tup, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_tup = append(union_tup, elem)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < tup1_len {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n    if j < tup2_len {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122647,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhs9jpvz_test.go:16:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmprhs9jpvz_test.go:19:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, element := range test_tup1 {\n        union_tup_map[element] = 1\n    }\n    for _, element := range test_tup2 {\n        union_tup_map[element] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp75841kvm_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp75841kvm_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map map[interface{}]int = make(map[interface{}]int)\n    var tup2_map map[interface{}]int = make(map[interface{}]int)\n    for _, elem := range test_tup1 {\n        tup1_map[elem] = 1\n    }\n    for _, elem := range test_tup2 {\n        tup2_map[elem] = 1\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpo2fq4n8d_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpo2fq4n8d_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpo2fq4n8d_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_elements []interface{}\n    var union_elements_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_elements_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_elements_map[val] = true\n    }\n    for key, _ := range union_elements_map {\n        union_elements = append(union_elements, key)\n    }\n    return union_elements\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpv1v0qyl4_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    test_tup1_len := len(test_tup1)\n    test_tup2_len := len(test_tup2)\n    union_tup := make([]interface{}, 0)\n    for i := 0; i < test_tup1_len; i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for i := 0; i < test_tup2_len; i++ {\n        union_tup = append(union_tup, test_tup2[i])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6jkih9th_test.go:37: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6jkih9th_test.go:37: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6jkih9th_test.go:37: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        union_tup = append(union_tup, test_tup2[i])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpnvlwsv28_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpnvlwsv28_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpnvlwsv28_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    test_tup1_map := make(map[interface{}]int)\n    test_tup2_map := make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        test_tup1_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        test_tup2_map[v] = 1\n    }\n    for k, _ := range test_tup2_map {\n        test_tup1_map[k] = 1\n    }\n    var result []interface{}\n    for k, _ := range test_tup1_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpensy2r61_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, elem := range test_tup1 {\n        union_tup = append(union_tup, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_tup = append(union_tup, elem)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        union_tup = append(union_tup, k)\n    }\n    for k, _ := range tup2_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpfbgimwt__test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpfbgimwt__test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpfbgimwt__test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n\n    if i < tup1_len {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n\n    if j < tup2_len {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd53hefeo_test.go:17:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpd53hefeo_test.go:20:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        union_tup = append(union_tup, v)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        union_list = append(union_list, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        union_list = append(union_list, test_tup2[i])\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmplherck3q_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmplherck3q_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmplherck3q_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        union_tup = append(union_tup, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        union_tup = append(union_tup, test_tup2[j])\n        j++\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122649,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph6utrii3_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmph6utrii3_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    var union_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_map[val] = true\n    }\n    for key, _ := range union_map {\n        union_list = append(union_list, key)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpe07pf8w6_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpe07pf8w6_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpe07pf8w6_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len = len(test_tup1)\n    var tup2_len = len(test_tup2)\n    var i, j int\n    for i = 0; i < tup1_len; i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for j = 0; j < tup2_len; j++ {\n        union_tup = append(union_tup, test_tup2[j])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpqz4c14ag_test.go:38: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpqz4c14ag_test.go:38: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpqz4c14ag_test.go:38: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        if _, ok := union_tup_map[val]; !ok {\n            union_tup_map[val] = 1\n        }\n    }\n\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpete3syv__test.go:45: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpete3syv__test.go:45: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int = 0, 0\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        union_tup = append(union_tup, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        union_tup = append(union_tup, test_tup2[j])\n        j++\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122649,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph6utrii3_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmph6utrii3_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n\n    for _, v := range test_tup1 {\n        union_tup_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_tup_map[v] = 1\n    }\n\n    for k, _ := range union_tup_map {\n        union_tup = append(union_tup, k)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpus4tl6fa_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsa3nra1y_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpsa3nra1y_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = true\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union []interface{}\n    for _, element := range test_tup1 {\n        union = append(union, element)\n    }\n    for _, element := range test_tup2 {\n        union = append(union, element)\n    }\n    return union\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpu3r5h55v_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpu3r5h55v_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpu3r5h55v_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp1adu38e__test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp1adu38e__test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp1adu38e__test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i, j = 0, 0; i < len(test_tup1) && j < len(test_tup2); {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9z74sokf_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmp9z74sokf_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < tup1_len {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n    if j < tup2_len {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122647,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhs9jpvz_test.go:16:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmprhs9jpvz_test.go:19:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var m = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        m[v] = true\n    }\n    for _, v := range test_tup2 {\n        m[v] = true\n    }\n    for k, _ := range m {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp967tbldg_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp967tbldg_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map map[interface{}]int\n    tup_map = make(map[interface{}]int)\n\n    for _, elem := range test_tup1 {\n        tup_map[elem] = 1\n    }\n    for _, elem := range test_tup2 {\n        tup_map[elem] = 1\n    }\n\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpnyytaid6_test.go:42: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpnyytaid6_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpnyytaid6_test.go:42: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, elem := range test_tup1 {\n        union_tup = append(union_tup, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_tup = append(union_tup, elem)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    // Create a map to store the elements of the union.\n    union_map := make(map[interface{}]bool)\n\n    // Add the elements of the first tuple to the map.\n    for _, elem := range test_tup1 {\n        union_map[elem] = true\n    }\n\n    // Add the elements of the second tuple to the map.\n    for _, elem := range test_tup2 {\n        union_map[elem] = true\n    }\n\n    // Create a slice to store the union elements.\n    union_slice := make([]interface{}, 0, len(union_map))\n\n    // Add the elements of the map to the slice.\n    for elem, _ := range union_map {\n        union_slice = append(union_slice, elem)\n    }\n\n    // Sort the slice.\n    for i := 0; i < len(union_slice); i++ {\n        for j := i + 1; j < len(union_slice); j++ {\n            if union_slice[i].(int) > union_slice[j].(int) {\n                union_slice[i], union_slice[j] = union_slice[j], union_slice[i]\n            }\n        }\n    }\n\n    return union_slice\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=16) %!s(int=17) %!s(int=13) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n    var i int = 0\n    var j int = 0\n    for i < tup1_len && j < tup2_len {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i += 1\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j += 1\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i += 1\n            j += 1\n        }\n    }\n    if i < tup1_len {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n    if j < tup2_len {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpys1utt32_test.go:16:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpys1utt32_test.go:19:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        union_tup = append(union_tup, v)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_index int = 0\n    var tup2_index int = 0\n    var tup1_len int = len(test_tup1)\n    var tup2_len int = len(test_tup2)\n\n    for tup1_index < tup1_len && tup2_index < tup2_len {\n        if test_tup1[tup1_index] < test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n        } else if test_tup1[tup1_index] > test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup2[tup2_index])\n            tup2_index++\n        } else {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n            tup2_index++\n        }\n    }\n\n    if tup1_index < tup1_len {\n        union_tup = append(union_tup, test_tup1[tup1_index:]...)\n    } else if tup2_index < tup2_len {\n        union_tup = append(union_tup, test_tup2[tup2_index:]...)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsyzuot8_test.go:17:34: invalid operation: test_tup1[tup1_index] < test_tup2[tup2_index] (operator < not defined on interface)\n/tmp/tmprsyzuot8_test.go:20:41: invalid operation: test_tup1[tup1_index] > test_tup2[tup2_index] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        union_tup_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_tup_map[v] = 1\n    }\n    for k, _ := range union_tup_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpp1jlyjve_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var set_tup1 = make(map[interface{}]bool)\n    var set_tup2 = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        set_tup1[val] = true\n    }\n    for _, val := range test_tup2 {\n        set_tup2[val] = true\n    }\n\n    for key, _ := range set_tup1 {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range set_tup2 {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmprdk49tki_test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmprdk49tki_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmprdk49tki_test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i = 0; i < len(test_tup1); i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for j = 0; j < len(test_tup2); j++ {\n        union_tup = append(union_tup, test_tup2[j])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var test_map map[interface{}]int = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        test_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        test_map[v] = 1\n    }\n    for k, _ := range test_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122651,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp32j9v_6r_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp32j9v_6r_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_elements []interface{}\n    for _, element := range test_tup1 {\n        union_elements = append(union_elements, element)\n    }\n    for _, element := range test_tup2 {\n        union_elements = append(union_elements, element)\n    }\n    return union_elements\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122651,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp9hq341ob_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp9hq341ob_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp9hq341ob_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        union_tup_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        union_tup_map[v] = 1\n    }\n    for k, _ := range union_tup_map {\n        union_tup = append(union_tup, k)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpxinp429p_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = true\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmphjz58kvp_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        union_tup = append(union_tup, v)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            union_tup = append(union_tup, test_tup2[j])\n            j++\n        } else {\n            union_tup = append(union_tup, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        union_tup = append(union_tup, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        union_tup = append(union_tup, test_tup2[j:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122651,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf96iji7g_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpf96iji7g_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        test_tup3 = append(test_tup3, test_tup2[i])\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup_map[val] = 1\n    }\n\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp0vmex27c_test.go:42: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp0vmex27c_test.go:42: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        tup_map[val] = 1\n    }\n\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpireudefn_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpireudefn_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp3igalz3n_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup1 {\n        result = append(result, val)\n    }\n    for _, val := range test_tup2 {\n        result = append(result, val)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoct_1p35_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=16) %!s(int=17) %!s(int=13) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup1 {\n        new_tup = append(new_tup, val)\n    }\n    for _, val := range test_tup2 {\n        new_tup = append(new_tup, val)\n    }\n    return new_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpok6jwiyw_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpok6jwiyw_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpok6jwiyw_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n    for _, v := range test_tup1 {\n        tup1_map[v] = 1\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = 1\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpq8f6d1_m_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpq8f6d1_m_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpq8f6d1_m_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n    for _, v := range test_tup1 {\n        tup1_map[v] = true\n    }\n    for _, v := range test_tup2 {\n        tup2_map[v] = true\n    }\n    for k, _ := range tup1_map {\n        result = append(result, k)\n    }\n    for k, _ := range tup2_map {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp21h0uoru_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=17) %!s(int=13) %!s(int=15) %!s(int=16)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_elements []interface{}\n    var union_elements_map = make(map[interface{}]int)\n\n    for _, element := range test_tup1 {\n        union_elements_map[element] = 1\n    }\n\n    for _, element := range test_tup2 {\n        if _, ok := union_elements_map[element]; !ok {\n            union_elements_map[element] = 1\n        }\n    }\n\n    for key, _ := range union_elements_map {\n        union_elements = append(union_elements, key)\n    }\n\n    return union_elements\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpfnrnbk1y_test.go:45: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpfnrnbk1y_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpfnrnbk1y_test.go:45: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_list []interface{}\n    for _, val := range test_tup1 {\n        union_list = append(union_list, val)\n    }\n    for _, val := range test_tup2 {\n        union_list = append(union_list, val)\n    }\n    return union_list\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp1frtitim_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp32dyky5d_test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_index int = 0\n    var tup2_index int = 0\n    for tup1_index < len(test_tup1) && tup2_index < len(test_tup2) {\n        if test_tup1[tup1_index] < test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n        } else if test_tup1[tup1_index] > test_tup2[tup2_index] {\n            union_tup = append(union_tup, test_tup2[tup2_index])\n            tup2_index++\n        } else {\n            union_tup = append(union_tup, test_tup1[tup1_index])\n            tup1_index++\n            tup2_index++\n        }\n    }\n    if tup1_index < len(test_tup1) {\n        union_tup = append(union_tup, test_tup1[tup1_index:]...)\n    } else if tup2_index < len(test_tup2) {\n        union_tup = append(union_tup, test_tup2[tup2_index:]...)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc3arzrk8_test.go:14:34: invalid operation: test_tup1[tup1_index] < test_tup2[tup2_index] (operator < not defined on interface)\n/tmp/tmpc3arzrk8_test.go:17:41: invalid operation: test_tup1[tup1_index] > test_tup2[tup2_index] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map map[interface{}]int = make(map[interface{}]int)\n    var tup2_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpoj4eqbol_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpoj4eqbol_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpoj4eqbol_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=11) %!s(int=12) %!s(int=13) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, elem := range test_tup1 {\n        union_tup = append(union_tup, elem)\n    }\n    for _, elem := range test_tup2 {\n        union_tup = append(union_tup, elem)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp63c5somx_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup_map = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup_map[val] = true\n    }\n    for key, _ := range tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp47wlzch2_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsa3nra1y_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpsa3nra1y_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map map[interface{}]bool = make(map[interface{}]bool)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = true\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmphyf1hh14_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmphyf1hh14_test.go:39: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=11) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for _, v := range test_tup1 {\n        test_tup3 = append(test_tup3, v)\n    }\n    for _, v := range test_tup2 {\n        test_tup3 = append(test_tup3, v)\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6jmwmql5_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsa3nra1y_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpsa3nra1y_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp32do671b_test.go:43: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp32do671b_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp32do671b_test.go:43: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=7) %!s(int=10) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpuy4wm2kq_test.go:39: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, element := range test_tup1 {\n        union_tup = append(union_tup, element)\n    }\n    for _, element := range test_tup2 {\n        union_tup = append(union_tup, element)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpsoy88olt_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpsoy88olt_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpsoy88olt_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var union_tup_map map[interface{}]int = make(map[interface{}]int)\n    for _, val := range test_tup1 {\n        union_tup_map[val] = 1\n    }\n    for _, val := range test_tup2 {\n        union_tup_map[val] = 1\n    }\n    for key, _ := range union_tup_map {\n        union_tup = append(union_tup, key)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpp1jlyjve_test.go:39: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var i, j int\n    for i = 0; i < len(test_tup1); i++ {\n        union_tup = append(union_tup, test_tup1[i])\n    }\n    for j = 0; j < len(test_tup2); j++ {\n        union_tup = append(union_tup, test_tup2[j])\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmps4uwacsz_test.go:36: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    var tup1_map = make(map[interface{}]int)\n    var tup2_map = make(map[interface{}]int)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = 1\n    }\n\n    for _, val := range test_tup2 {\n        tup2_map[val] = 1\n    }\n\n    for key, _ := range tup1_map {\n        union_tup = append(union_tup, key)\n    }\n\n    for key, _ := range tup2_map {\n        union_tup = append(union_tup, key)\n    }\n\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=7) %!s(int=4) %!s(int=10) %!s(int=5)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp83n1yzl1_test.go:48: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=16) %!s(int=17) %!s(int=13) %!s(int=15)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var tup1_map = make(map[interface{}]bool)\n    var tup2_map = make(map[interface{}]bool)\n\n    for _, val := range test_tup1 {\n        tup1_map[val] = true\n    }\n    for _, val := range test_tup2 {\n        tup2_map[val] = true\n    }\n\n    for key, _ := range tup1_map {\n        result = append(result, key)\n    }\n    for key, _ := range tup2_map {\n        result = append(result, key)\n    }\n\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi6c1y8ci_test.go:46: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=4) %!s(int=10) %!s(int=5) %!s(int=7)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi6c1y8ci_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi6c1y8ci_test.go:46: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=12) %!s(int=13) %!s(int=14) %!s(int=11) %!s(int=15) %!s(int=16) %!s(int=17) %!s(int=13)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    if i < len(test_tup1) {\n        result = append(result, test_tup1[i:]...)\n    }\n    if j < len(test_tup2) {\n        result = append(result, test_tup2[j:]...)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphhq05dmh_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmphhq05dmh_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i])\n    }\n    for i := 0; i < len(test_tup2); i++ {\n        test_tup3 = append(test_tup3, test_tup2[i])\n    }\n    return test_tup3\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmppcoppnbk_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v := range test_tup1 {\n        union_tup = append(union_tup, v)\n    }\n    for _, v := range test_tup2 {\n        union_tup = append(union_tup, v)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpi60g19vz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val1 := range test_tup1 {\n        union_tup = append(union_tup, val1)\n    }\n    for _, val2 := range test_tup2 {\n        union_tup = append(union_tup, val2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp8qvqxvgz_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    for i := 0; i < len(union_tup); i++ {\n        for j := i + 1; j < len(union_tup); j++ {\n            if union_tup[i] == union_tup[j] {\n                union_tup = append(union_tup[:j], union_tup[j+1:]...)\n                j--\n            }\n        }\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup1 {\n        result = append(result, v)\n    }\n    for _, v := range test_tup2 {\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpkf6buyoy_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, val := range test_tup1 {\n        union_tup = append(union_tup, val)\n    }\n    for _, val := range test_tup2 {\n        union_tup = append(union_tup, val)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmpg1kc5uz6_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var result []interface{}\n    var i, j int\n    for i < len(test_tup1) && j < len(test_tup2) {\n        if test_tup1[i] < test_tup2[j] {\n            result = append(result, test_tup1[i])\n            i++\n        } else if test_tup1[i] > test_tup2[j] {\n            result = append(result, test_tup2[j])\n            j++\n        } else {\n            result = append(result, test_tup1[i])\n            i++\n            j++\n        }\n    }\n    for i < len(test_tup1) {\n        result = append(result, test_tup1[i])\n        i++\n    }\n    for j < len(test_tup2) {\n        result = append(result, test_tup2[j])\n        j++\n    }\n    return result\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510180,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsa3nra1y_test.go:13:25: invalid operation: test_tup1[i] < test_tup2[j] (operator < not defined on interface)\n/tmp/tmpsa3nra1y_test.go:16:32: invalid operation: test_tup1[i] > test_tup2[j] (operator > not defined on interface)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    union_tup = append(test_tup1, test_tup2...)\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp6tw69pyx_test.go:30: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package union_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the union of the elements of two given tuples and output them in sorted order.\nfunc union_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n    var union_tup []interface{}\n    for _, v1 := range test_tup1 {\n        union_tup = append(union_tup, v1)\n    }\n    for _, v2 := range test_tup2 {\n        union_tup = append(union_tup, v2)\n    }\n    return union_tup\n}\n\nfunc TestUnion_Elements(t *testing.T) {\n  candidate := union_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4, 5, 6}, []interface{}{5, 7, 4, 10}), expected: []interface{}{3, 4, 5, 6, 7, 10} },\n     { actual: candidate([]interface{}{1, 2, 3, 4}, []interface{}{3, 4, 5, 6}), expected: []interface{}{1, 2, 3, 4, 5, 6} },\n     { actual: candidate([]interface{}{11, 12, 13, 14}, []interface{}{13, 15, 16, 17}), expected: []interface{}{11, 12, 13, 14, 15, 16, 17} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "--- FAIL: TestUnion_Elements (0.00s)\n    --- FAIL: TestUnion_Elements/test_num__0 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=10)]', got '[%!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=10)]'\n    --- FAIL: TestUnion_Elements/test_num__1 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestUnion_Elements/test_num__2 (0.00s)\n        tmp40yrx9yf_test.go:35: expected '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=15) %!s(int=16) %!s(int=17)]', got '[%!s(int=11) %!s(int=12) %!s(int=13) %!s(int=14) %!s(int=13) %!s(int=15) %!s(int=16) %!s(int=17)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}