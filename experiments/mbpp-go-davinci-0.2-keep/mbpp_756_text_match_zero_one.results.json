{
  "name": "mbpp_756_text_match_zero_one",
  "language": "go_test.go",
  "prompt": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy09mgu2i_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+?`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sjb82ux_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy09mgu2i_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpsh5bo_t2_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_4w_g108_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a-zA-Z0-9]{3,}$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4at92gxc_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]{1}[b]{1,}$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeghaseau_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_4w_g108_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpvyr13bu3_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy09mgu2i_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44a_sq88_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__2 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__3 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestText_Match_Zero_One/test_num__5 (0.00s)\n        tmpw2xwsu7d_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b*$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1qx9vzhw_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w+b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeva230gv_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a{1}b{1,}$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvy8jrr9s_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp_m1a2qa2_test.go:31: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0bswqjmy_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "--- FAIL: TestText_Match_Zero_One (0.00s)\n    --- FAIL: TestText_Match_Zero_One/test_num__0 (0.00s)\n        tmp9e9m4hrd_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__1 (0.00s)\n        tmp9e9m4hrd_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_Zero_One/test_num__4 (0.00s)\n        tmp9e9m4hrd_test.go:32: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a+b+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123740,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpupq99lr7_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvajj_q9_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n\nfunc TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510610,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpawd0_cpl_test.go:10:19: undefined: regexp\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}