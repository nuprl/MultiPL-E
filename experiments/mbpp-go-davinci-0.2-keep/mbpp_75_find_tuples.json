{
  "name": "mbpp_75_find_tuples",
  "language": "go_test.go",
  "prompt": "package find_tuples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nfunc find_tuples(test_list [][]interface{}, K int) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Tuples(t *testing.T) {\n  candidate := find_tuples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{6, 24, 12}, []interface{}{7, 9, 6}, []interface{}{12, 18, 21}}, 6), expected: [][]int{[]interface{}{6, 24, 12}} },\n     { actual: candidate([][]int{[]interface{}{5, 25, 30}, []interface{}{4, 2, 3}, []interface{}{7, 8, 9}}, 5), expected: [][]int{[]interface{}{5, 25, 30}} },\n     { actual: candidate([][]int{[]interface{}{7, 9, 16}, []interface{}{8, 16, 4}, []interface{}{19, 17, 18}}, 4), expected: [][]int{[]interface{}{8, 16, 4}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var found bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                found = false\n                break\n            }\n        }\n        if found {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible = true\n        for _, value := range tuple {\n            if value.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var tuple_result []interface{}\n        for _, element := range tuple {\n            if element.(int) % K == 0 {\n                tuple_result = append(tuple_result, element)\n            }\n        }\n        if len(tuple_result) == len(tuple) {\n            result = append(result, tuple_result)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, value := range tuple {\n            if value.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var tuple_result []interface{}\n        for _, element := range tuple {\n            if element.(int) % K == 0 {\n                tuple_result = append(tuple_result, element)\n            }\n        }\n        if len(tuple_result) == len(tuple) {\n            result = append(result, tuple_result)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible = true\n        for _, elem := range tuple {\n            if elem.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var temp []interface{}\n        for _, element := range tuple {\n            if element.(int) % K == 0 {\n                temp = append(temp, element)\n            }\n        }\n        if len(temp) == len(tuple) {\n            result = append(result, temp)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                divisible = false\n                break\n            }\n        }\n        if divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var is_divisible bool = true\n        for _, element := range tuple {\n            if element.(int) % K != 0 {\n                is_divisible = false\n                break\n            }\n        }\n        if is_divisible {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n"
  ]
}