{
  "name": "mbpp_468_max_product",
  "language": "go_test.go",
  "prompt": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    if max < 0 {\n        return max\n    }\n\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            product = 0\n            break\n        }\n\n        if arr[i] > 0 {\n            product *= arr[i]\n        }\n    }\n\n    return product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpyo3ojgy1_test.go:59: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpyo3ojgy1_test.go:59: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7tnsj2pu_test.go:23:15: undefined: max_int\n/tmp/tmp7tnsj2pu_test.go:24:15: undefined: min_int\n/tmp/tmp7tnsj2pu_test.go:25:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[1] * arr[2] * arr[3])\n    }\n    return max(max_product(arr[1:]), max_product(arr[:len(arr)-1]))\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk23tg6ev_test.go:23:16: undefined: max\n/tmp/tmpk23tg6ev_test.go:25:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var max_product int = arr[0]\n    var max_product_so_far int = arr[0]\n    var min_product_so_far int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] == 0 {\n            max_product_so_far = 0\n            min_product_so_far = 0\n        } else if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min_product_so_far * arr[i]\n        } else {\n            temp := max_product_so_far\n            max_product_so_far = min_product_so_far * arr[i]\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n        if max_product_so_far < min_product_so_far {\n            max_product_so_far = min_product_so_far\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpm3b4vm9k_test.go:56: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpm3b4vm9k_test.go:56: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if arr[j] * arr[i] > max {\n                    max = arr[j] * arr[i]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpd8yrll0w_test.go:44: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpd8yrll0w_test.go:44: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7y1z_x46_test.go:25:15: undefined: max_int\n/tmp/tmp7y1z_x46_test.go:26:15: undefined: min_int\n/tmp/tmp7y1z_x46_test.go:27:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return arr[0] * arr[1] * arr[2] * arr[3]\n    }\n    if len(arr) == 5 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n    }\n    if len(arr) == 6 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5]\n    }\n    if len(arr) == 7 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6]\n    }\n    if len(arr) == 8 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7]\n    }\n    if len(arr) == 9 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8]\n    }\n    if len(arr) == 10 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9]\n    }\n    if len(arr) == 11 {\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4] * arr[5] * arr[6] * arr[7] * arr[8] * arr[9] * arr[10]\n    }\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpht_ssszy_test.go:46:6: expected '(', found TestMax_Product\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max_product := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max_product = max_product * arr[i]\n        } else {\n            max_product = max_product / arr[i-1] * arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp9wqrk1bt_test.go:45: expected '%!s(int=3000)', got '%!s(int=360)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp9wqrk1bt_test.go:45: expected '%!s(int=2460)', got '%!s(int=4649400)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    // dp[i] means the max product of the increasing subsequence which ends with arr[i]\n    dp := make([]int, len(arr))\n    dp[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        dp[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                dp[i] = max(dp[i], dp[j] * arr[i])\n            }\n        }\n    }\n    max_product := dp[0]\n    for i := 1; i < len(arr); i++ {\n        max_product = max(max_product, dp[i])\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp991tqc25_test.go:23:25: undefined: max\n/tmp/tmp991tqc25_test.go:29:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    if max == 0 {\n        return 0\n    }\n\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            continue\n        }\n\n        product *= arr[i]\n    }\n\n    if product > 0 {\n        return product\n    }\n\n    product = 1\n    for i := len(arr) - 1; i >= 0; i-- {\n        if arr[i] == 0 {\n            continue\n        }\n\n        product *= arr[i]\n    }\n\n    return product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgfb__80o_test.go:65: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgfb__80o_test.go:65: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    var max_product int = arr[0] * arr[1]\n    var max_product_so_far int = max_product\n    var max_product_ending_here int = max_product\n    var min_product_ending_here int = max_product\n    for i := 2; i < len(arr); i++ {\n        max_product_ending_here = max(max_product_ending_here * arr[i], min_product_ending_here * arr[i], arr[i])\n        min_product_ending_here = min(max_product_ending_here * arr[i], min_product_ending_here * arr[i], arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    }\n    return max_product_so_far\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp73bss950_test.go:24:35: undefined: max\n/tmp/tmp73bss950_test.go:25:35: undefined: min\n/tmp/tmp73bss950_test.go:26:30: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max = max * arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=3000)', got '%!s(int=225000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=2460)', got '%!s(int=21780000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])\n    }\n    if len(arr) == 5 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[1] * arr[4], arr[0] * arr[2] * arr[3], arr[0] * arr[2] * arr[4], arr[0] * arr[3] * arr[4], arr[1] * arr[2] * arr[3], arr[1] * arr[2] * arr[4], arr[1] * arr[3] * arr[4], arr[2] * arr[3] * arr[4])\n    }\n    if len(arr) == 6 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[1] * arr[4], arr[0] * arr[1] * arr[5], arr[0] * arr[2] * arr[3], arr[0] * arr[2] * arr[4], arr[0] * arr[2] * arr[5], arr[0] * arr[3] * arr[4], arr[0] * arr[3] * arr[5], arr[0] * arr[4] * arr[5], arr[1] * arr[2] * arr[3], arr[1] * arr[2] * arr[4], arr[1] *\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2ci0iyi2_test.go:30:6: expected '(', found TestMax_Product\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    min := arr[0]\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else {\n            tmp := max\n            max = min * arr[i]\n            min = tmp * arr[i]\n        }\n        if max > max_product {\n            max_product = max\n        }\n        if min > max_product {\n            max_product = min\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsekg2gjf_test.go:53: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsekg2gjf_test.go:53: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    if max == 0 {\n        return 0\n    }\n\n    if max < 0 {\n        return max\n    }\n\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            continue\n        }\n        product *= arr[i]\n    }\n\n    return product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpvev7q0tn_test.go:61: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpvev7q0tn_test.go:61: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    if max < 0 {\n        return max\n    }\n    max = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            continue\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] == 0 {\n                continue\n            }\n            product := arr[i] * arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpon82607u_test.go:61: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpon82607u_test.go:61: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpon82607u_test.go:61: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp0j589em6_test.go:43: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp0j589em6_test.go:43: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp0j589em6_test.go:43: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    var max_product int = 0\n    var max_product_start int = 0\n    var max_product_end int = 0\n    var max_product_len int = 0\n    var product int = 1\n    var start int = 0\n    var end int = 0\n    var len int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            product *= arr[i]\n            end = i\n            len++\n        } else {\n            if len > max_product_len {\n                max_product = product\n                max_product_start = start\n                max_product_end = end\n                max_product_len = len\n            }\n            product = 1\n            start = i + 1\n            end = i + 1\n            len = 0\n        }\n    }\n    if len > max_product_len {\n        max_product = product\n        max_product_start = start\n        max_product_end = end\n        max_product_len = len\n    }\n    fmt.Println(max_product_start, max_product_end, max_product_len)\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6t9q36z_test.go:18:24: cannot call non-function len (type int), declared at /tmp/tmpi6t9q36z_test.go:17:9\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    if max == 0 {\n        return 0\n    }\n    if max < 0 {\n        return max\n    }\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            continue\n        }\n        product *= arr[i]\n    }\n    return product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpb0kmathq_test.go:53: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpb0kmathq_test.go:53: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var max_product int = arr[0]\n    var max_product_ending_here int = arr[0]\n    var min_product_ending_here int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max_product_ending_here, min_product_ending_here = min_product_ending_here, max_product_ending_here\n        }\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        min_product_ending_here = min(arr[i], min_product_ending_here * arr[i])\n        max_product = max(max_product, max_product_ending_here)\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpprm88vgw_test.go:23:35: undefined: max\n/tmp/tmpprm88vgw_test.go:24:35: undefined: min\n/tmp/tmpprm88vgw_test.go:25:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] * arr[i-1] > max {\n            max = arr[i] * arr[i-1]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpkjghh070_test.go:43: expected '%!s(int=3000)', got '%!s(int=900)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpkjghh070_test.go:43: expected '%!s(int=50265600)', got '%!s(int=5440)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprmlx9l1b_test.go:44: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n\n    max := arr[0] * arr[1] * arr[2]\n    for i := 0; i < len(arr) - 2; i++ {\n        for j := i + 1; j < len(arr) - 1; j++ {\n            for k := j + 1; k < len(arr); k++ {\n                if arr[i] * arr[j] * arr[k] > max {\n                    max = arr[i] * arr[j] * arr[k]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=3000)', got '%!s(int=90000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=50265600)', got '%!s(int=299200)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=2460)', got '%!s(int=123000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if arr[j] * arr[i] > max {\n                    max = arr[j] * arr[i]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzn7475gk_test.go:41: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpzn7475gk_test.go:41: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzn7475gk_test.go:41: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    var max, max_product int\n    for _, v := range arr {\n        if v > max {\n            max = v\n        }\n        max_product *= v\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7x4muof0_test.go:35: expected '%!s(int=3000)', got '%!s(int=0)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp7x4muof0_test.go:35: expected '%!s(int=50265600)', got '%!s(int=0)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7x4muof0_test.go:35: expected '%!s(int=2460)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n\n    max := arr[0] * arr[1] * arr[2]\n    for i := 0; i < len(arr) - 2; i++ {\n        for j := i + 1; j < len(arr) - 1; j++ {\n            for k := j + 1; k < len(arr); k++ {\n                if arr[i] * arr[j] * arr[k] > max {\n                    max = arr[i] * arr[j] * arr[k]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=3000)', got '%!s(int=90000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=50265600)', got '%!s(int=299200)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp9aq2fzlf_test.go:51: expected '%!s(int=2460)', got '%!s(int=123000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] > arr[i-1] {\n            if arr[i] * arr[i-1] > max {\n                max = arr[i] * arr[i-1]\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp3e9rupwm_test.go:48: expected '%!s(int=3000)', got '%!s(int=750)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp3e9rupwm_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := 1\n                for k := i; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7ndpcnom_test.go:46: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7ndpcnom_test.go:46: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := arr[i]\n        if product > max_product {\n            max_product = product\n        }\n        for j := i + 1; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpulg3d0gs_test.go:47: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpulg3d0gs_test.go:47: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphv0wlui2_test.go:27:15: undefined: max_int\n/tmp/tmphv0wlui2_test.go:28:15: undefined: min_int\n/tmp/tmphv0wlui2_test.go:30:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max_product := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n        if arr[i] > arr[i-1] {\n            max_product = max_product * arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6feuv2rm_test.go:46: expected '%!s(int=3000)', got '%!s(int=225000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6feuv2rm_test.go:46: expected '%!s(int=2460)', got '%!s(int=21780000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpdkhcsx07_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := 1\n                for k := i; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmps2535yh6_test.go:48: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmps2535yh6_test.go:48: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(max * arr[i], arr[i])\n        min = min_int(min * arr[i], arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt41ipny5_test.go:26:15: undefined: max_int\n/tmp/tmpt41ipny5_test.go:27:15: undefined: min_int\n/tmp/tmpt41ipny5_test.go:29:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        for j := 0; j < i; j++ {\n            if arr[i] > arr[j] {\n                if arr[i] * arr[j] > max {\n                    max = arr[i] * arr[j]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpj7do49f9_test.go:50: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpj7do49f9_test.go:50: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpj7do49f9_test.go:50: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            product := arr[i]\n            for j := i+1; j < len(arr); j++ {\n                if arr[j] > arr[j-1] {\n                    product *= arr[j]\n                    if product > max_product {\n                        max_product = product\n                    }\n                } else {\n                    break\n                }\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp1o51cv47_test.go:58: expected '%!s(int=3000)', got '%!s(int=750)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp1o51cv47_test.go:58: expected '%!s(int=50265600)', got '%!s(int=12566400)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp1o51cv47_test.go:58: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] * arr[i-1] > max {\n            max = arr[i] * arr[i-1]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpi1wosxev_test.go:44: expected '%!s(int=3000)', got '%!s(int=900)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpi1wosxev_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    ret := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(max * arr[i], arr[i])\n        min = min_int(min * arr[i], arr[i])\n\n        ret = max_int(ret, max)\n    }\n\n    return ret\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoybllt2c_test.go:27:15: undefined: max_int\n/tmp/tmpoybllt2c_test.go:28:15: undefined: min_int\n/tmp/tmpoybllt2c_test.go:30:15: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_product := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max_product {\n                    max_product = product\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpuihrlsz2_test.go:46: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpuihrlsz2_test.go:46: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpuihrlsz2_test.go:46: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7tnsj2pu_test.go:23:15: undefined: max_int\n/tmp/tmp7tnsj2pu_test.go:24:15: undefined: min_int\n/tmp/tmp7tnsj2pu_test.go:25:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    var max_product int = 0\n    var max_product_so_far int = 0\n    var max_product_so_far_neg int = 0\n    var max_product_so_far_pos int = 0\n    for _, v := range arr {\n        if v > 0 {\n            max_product_so_far_pos = max(max_product_so_far_pos * v, v)\n            max_product_so_far_neg = max_product_so_far_neg * v\n        } else if v < 0 {\n            max_product_so_far_neg = min(max_product_so_far_neg * v, v)\n            max_product_so_far_pos = max_product_so_far_pos * v\n        } else {\n            max_product_so_far_neg = 0\n            max_product_so_far_pos = 0\n        }\n        max_product_so_far = max(max_product_so_far_pos, max_product_so_far_neg)\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsji8j_8a_test.go:16:38: undefined: max\n/tmp/tmpsji8j_8a_test.go:19:38: undefined: min\n/tmp/tmpsji8j_8a_test.go:25:30: undefined: max\n/tmp/tmpsji8j_8a_test.go:26:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else {\n            tmp := max\n            max = min * arr[i]\n            min = tmp * arr[i]\n        }\n\n        if max > result {\n            result = max\n        }\n        if min > result {\n            result = min\n        }\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7055vp51_test.go:57: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7055vp51_test.go:57: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] * arr[i-1] > max {\n            max = arr[i] * arr[i-1]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpkjghh070_test.go:43: expected '%!s(int=3000)', got '%!s(int=900)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpkjghh070_test.go:43: expected '%!s(int=50265600)', got '%!s(int=5440)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := 1\n                for k := i; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7ndpcnom_test.go:46: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7ndpcnom_test.go:46: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i]\n                for k := i + 1; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_of(arr[i], max * arr[i])\n        min = min_of(arr[i], min * arr[i])\n\n        result = max_of(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppuuvcy0u_test.go:27:15: undefined: max_of\n/tmp/tmppuuvcy0u_test.go:28:15: undefined: min_of\n/tmp/tmppuuvcy0u_test.go:30:18: undefined: max_of\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    dp := make([]int, len(arr))\n    dp[0] = arr[0]\n    for i := 1; i < len(arr); i++ {\n        dp[i] = arr[i]\n        for j := 0; j < i; j++ {\n            if arr[j] < arr[i] {\n                dp[i] = max(dp[i], dp[j] * arr[i])\n            }\n        }\n    }\n    return max_slice(dp)\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3iigrwxh_test.go:19:25: undefined: max\n/tmp/tmp3iigrwxh_test.go:23:12: undefined: max_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphv0wlui2_test.go:27:15: undefined: max_int\n/tmp/tmphv0wlui2_test.go:28:15: undefined: min_int\n/tmp/tmphv0wlui2_test.go:30:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            product := 1\n            for k := i; k <= j; k++ {\n                product *= arr[k]\n            }\n\n            if product > max {\n                max = product\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmplw50y6_x_test.go:46: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmplw50y6_x_test.go:46: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i]\n                for k := i + 1; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if arr[j] * arr[i] > max {\n                    max = arr[j] * arr[i]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsksnicu8_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    max_product_ending_here := arr[0]\n    min_product_ending_here := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max_product_ending_here = max(max_product_ending_here * arr[i], arr[i])\n            min_product_ending_here = min(min_product_ending_here * arr[i], arr[i])\n        } else {\n            temp := max_product_ending_here\n            max_product_ending_here = max(min_product_ending_here * arr[i], arr[i])\n            min_product_ending_here = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, max_product_ending_here)\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh_8vr1_test.go:21:39: undefined: max\n/tmp/tmpbzh_8vr1_test.go:22:39: undefined: min\n/tmp/tmpbzh_8vr1_test.go:25:39: undefined: max\n/tmp/tmpbzh_8vr1_test.go:26:39: undefined: min\n/tmp/tmpbzh_8vr1_test.go:28:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max_product := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max_product {\n                    max_product = product\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpereqb6ls_test.go:48: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpereqb6ls_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpereqb6ls_test.go:48: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max_product := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                product := arr[i] * arr[j]\n                if product > max_product {\n                    max_product = product\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7vi__gf4_test.go:48: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp7vi__gf4_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7vi__gf4_test.go:48: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := max\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4r4vt907_test.go:27:15: undefined: max_int\n/tmp/tmp4r4vt907_test.go:28:15: undefined: min_int\n/tmp/tmp4r4vt907_test.go:30:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else {\n            max, min = min * arr[i], max * arr[i]\n        }\n\n        if max > result {\n            result = max\n        }\n\n        if min > result {\n            result = min\n        }\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122568,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjr38kegu_test.go:53: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjr38kegu_test.go:53: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max = max * arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=3000)', got '%!s(int=225000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=2460)', got '%!s(int=21780000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122568,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpp529wp39_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpp529wp39_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpp529wp39_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n\n    max := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122568,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpy_mdpqx2_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpy_mdpqx2_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpy_mdpqx2_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := arr[i]\n        if product > max_product {\n            max_product = product\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[j - 1] {\n                product *= arr[j]\n                if product > max_product {\n                    max_product = product\n                }\n            } else {\n                break\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) <= 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp985itg58_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp985itg58_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp985itg58_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    var max, max_product int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n            for j := i + 1; j < len(arr); j++ {\n                if arr[j] > max {\n                    max = arr[j]\n                }\n            }\n            for j := i + 1; j < len(arr); j++ {\n                if arr[j] == max {\n                    for k := j + 1; k < len(arr); k++ {\n                        if arr[k] > max {\n                            max = arr[k]\n                        }\n                    }\n                    for k := j + 1; k < len(arr); k++ {\n                        if arr[k] == max {\n                            if max_product < arr[i] * arr[j] * arr[k] {\n                                max_product = arr[i] * arr[j] * arr[k]\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpt4e_twkw_test.go:71: expected '%!s(int=3000)', got '%!s(int=0)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpt4e_twkw_test.go:71: expected '%!s(int=50265600)', got '%!s(int=0)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpt4e_twkw_test.go:71: expected '%!s(int=2460)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(max, result)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuesa6a5l_test.go:27:15: undefined: max_int\n/tmp/tmpuesa6a5l_test.go:28:15: undefined: min_int\n/tmp/tmpuesa6a5l_test.go:30:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgj_zduwo_test.go:42: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n\n    max_product := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if max_product < arr[i] * arr[j] {\n                    max_product = arr[i] * arr[j]\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5etf3jmu_test.go:48: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5etf3jmu_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5etf3jmu_test.go:48: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    if max == 0 {\n        return 0\n    }\n\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            product = 1\n        } else {\n            product *= arr[i]\n        }\n\n        if product > max {\n            max = product\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp_24rohd6_test.go:56: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp_24rohd6_test.go:56: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            product := 1\n            for k := i; k <= j; k++ {\n                product *= arr[k]\n            }\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmprgy9nsjs_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmprgy9nsjs_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])\n    }\n    if len(arr) == 5 {\n        return max(arr[0] * arr[1] * arr[2] * arr[3], arr[0] * arr[1] * arr[2] * arr[4], arr[0] * arr[1] * arr[3] * arr[4], arr[0] * arr[2] * arr[3] * arr[4], arr[1] * arr[2] * arr[3] * arr[4])\n    }\n    return 0\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp585ojzel_test.go:23:16: undefined: max\n/tmp/tmp585ojzel_test.go:26:16: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == max {\n            continue\n        }\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] == max {\n                continue\n            }\n            if arr[j] > arr[i] {\n                arr[i] *= arr[j]\n                if arr[i] > max {\n                    max = arr[i]\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpo2mcar27_test.go:59: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpo2mcar27_test.go:59: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpo2mcar27_test.go:59: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max = max * arr[i]\n        } else {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphbdva8e6_test.go:45: expected '%!s(int=3000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpbwkgaxu5_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpbwkgaxu5_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpbwkgaxu5_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    var max_product int = 0\n    var product int = 1\n    var i int = 0\n    var j int = 0\n    for i = 0; i < len(arr); i++ {\n        product = 1\n        for j = i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmptq7kzbep_test.go:41: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmptq7kzbep_test.go:41: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    var max_product int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            for k := j + 1; k < len(arr); k++ {\n                product := arr[i] * arr[j] * arr[k]\n                if product > max_product {\n                    max_product = product\n                }\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpto_ps14l_test.go:51: expected '%!s(int=3000)', got '%!s(int=90000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpto_ps14l_test.go:51: expected '%!s(int=50265600)', got '%!s(int=299200)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpto_ps14l_test.go:51: expected '%!s(int=2460)', got '%!s(int=123000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max = max * arr[i]\n        } else {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmphbdva8e6_test.go:45: expected '%!s(int=3000)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])\n    }\n    if len(arr) == 5 {\n        return max(arr[0] * arr[1] * arr[2] * arr[3], arr[0] * arr[1] * arr[2] * arr[4], arr[0] * arr[1] * arr[3] * arr[4], arr[0] * arr[2] * arr[3] * arr[4], arr[1] * arr[2] * arr[3] * arr[4])\n    }\n    return max(arr[0] * arr[1] * arr[2] * arr[3] * arr[4], arr[0] * arr[1] * arr[2] * arr[3] * arr[5], arr[0] * arr[1] * arr[2] * arr[4] * arr[5], arr[0] * arr[1] * arr[3] * arr[4] * arr[5], arr[0] * arr[2] * arr[3] * arr[4] * arr[5], arr[1] * arr[2] * arr[3] * arr[4] * arr[5])\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbyu08q0c_test.go:23:16: undefined: max\n/tmp/tmpbyu08q0c_test.go:26:16: undefined: max\n/tmp/tmpbyu08q0c_test.go:28:12: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if arr[j] * arr[i] > max {\n                    max = arr[j] * arr[i]\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpsdrhacjf_test.go:43: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpsdrhacjf_test.go:43: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpsdrhacjf_test.go:43: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphv0wlui2_test.go:27:15: undefined: max_int\n/tmp/tmphv0wlui2_test.go:28:15: undefined: min_int\n/tmp/tmphv0wlui2_test.go:30:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpwhd_ka44_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_prod := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_prod {\n            max_prod = arr[i]\n        }\n    }\n    return max_prod\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpmwtkrpd6_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpmwtkrpd6_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpmwtkrpd6_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122566,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp0r_qpa_1_test.go:48: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqouxwdvg_test.go:42: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var max_product int = 0\n    var max_product_so_far int = 0\n    var min_product_so_far int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max_product_so_far = max(max_product_so_far * arr[i], arr[i])\n            min_product_so_far = min(min_product_so_far * arr[i], arr[i])\n        } else {\n            temp := max_product_so_far\n            max_product_so_far = max(min_product_so_far * arr[i], arr[i])\n            min_product_so_far = min(temp * arr[i], arr[i])\n        }\n        max_product = max(max_product, max_product_so_far)\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdwcz731j_test.go:21:34: undefined: max\n/tmp/tmpdwcz731j_test.go:22:34: undefined: min\n/tmp/tmpdwcz731j_test.go:25:34: undefined: max\n/tmp/tmpdwcz731j_test.go:26:34: undefined: min\n/tmp/tmpdwcz731j_test.go:28:23: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    var max int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                var product int = arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpgdzjbaxr_test.go:51: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpgdzjbaxr_test.go:51: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpgdzjbaxr_test.go:51: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpjpnj6_xc_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[2] * arr[3], arr[1] * arr[2] * arr[3])\n    }\n    if len(arr) == 5 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[1] * arr[4], arr[0] * arr[2] * arr[3], arr[0] * arr[2] * arr[4], arr[0] * arr[3] * arr[4], arr[1] * arr[2] * arr[3], arr[1] * arr[2] * arr[4], arr[1] * arr[3] * arr[4], arr[2] * arr[3] * arr[4])\n    }\n    if len(arr) == 6 {\n        return max(arr[0] * arr[1] * arr[2], arr[0] * arr[1] * arr[3], arr[0] * arr[1] * arr[4], arr[0] * arr[1] * arr[5], arr[0] * arr[2] * arr[3], arr[0] * arr[2] * arr[4], arr[0] * arr[2] * arr[5], arr[0] * arr[3] * arr[4], arr[0] * arr[3] * arr[5], arr[0] * arr[4] * arr[5], arr[1] * arr[2] * arr[3], arr[1] * arr[2] * arr[4], arr[1] *\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122563,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2ci0iyi2_test.go:30:6: expected '(', found TestMax_Product\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > arr[i-1] {\n            max = max * arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=3000)', got '%!s(int=225000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpk0vfuzc7_test.go:43: expected '%!s(int=2460)', got '%!s(int=21780000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpxya00xlw_test.go:37: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpp853t6t5_test.go:43: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpp853t6t5_test.go:43: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n            min = min * arr[i]\n        } else {\n            max, min = min * arr[i], max * arr[i]\n        }\n\n        if max > result {\n            result = max\n        }\n\n        if min > result {\n            result = min\n        }\n\n        if max < min {\n            max = min\n        }\n\n        if min > max {\n            min = max\n        }\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122569,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpzhtssmes_test.go:61: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpzhtssmes_test.go:61: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            product := 1\n            for k := i; k <= j; k++ {\n                product *= arr[k]\n            }\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp29pzy22w_test.go:44: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp29pzy22w_test.go:44: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) < 2 {\n        return 0\n    }\n    max := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                if arr[i] * arr[j] > max {\n                    max = arr[i] * arr[j]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp2dud1ocq_test.go:41: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp2dud1ocq_test.go:41: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp2dud1ocq_test.go:41: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i]\n                for k := i + 1; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(max*arr[i], arr[i])\n        min = min_int(min*arr[i], arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpok_f6bnw_test.go:23:15: undefined: max_int\n/tmp/tmpok_f6bnw_test.go:24:15: undefined: min_int\n/tmp/tmpok_f6bnw_test.go:25:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n        if arr[i] * arr[i-1] > max {\n            max = arr[i] * arr[i-1]\n        }\n        if arr[i] * arr[i-1] * arr[i-2] > max {\n            max = arr[i] * arr[i-1] * arr[i-2]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp7nxivk9p_test.go:49: expected '%!s(int=3000)', got '%!s(int=4500)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp7nxivk9p_test.go:49: expected '%!s(int=50265600)', got '%!s(int=299200)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp7nxivk9p_test.go:49: expected '%!s(int=2460)', got '%!s(int=123000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if max < arr[i] * arr[j] {\n                    max = arr[i] * arr[j]\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpz4g6an01_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpz4g6an01_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpz4g6an01_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpivh1eu7u_test.go:45: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i]\n                for k := i + 1; k <= j; k++ {\n                    product *= arr[k]\n                }\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122567,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp73c4o2ti_test.go:45: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpene7fc7s_test.go:41: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpene7fc7s_test.go:41: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0] * arr[1]\n    for i := 2; i < len(arr); i++ {\n        if arr[i] > 0 {\n            max = max * arr[i]\n        } else {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp4zv759p1_test.go:45: expected '%!s(int=3000)', got '%!s(int=5400000)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp4zv759p1_test.go:45: expected '%!s(int=2460)', got '%!s(int=168773220000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=3000)', got '%!s(int=15000)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=50265600)', got '%!s(int=5440)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpup0g65rx_test.go:44: expected '%!s(int=2460)', got '%!s(int=3000)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max_product := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max_product {\n            max_product = arr[i]\n        }\n    }\n    return max_product\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp5gdu9s5b_test.go:41: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp5gdu9s5b_test.go:41: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp5gdu9s5b_test.go:41: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122564,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpg9gp718y_test.go:43: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n\n        result = max_int(result, max)\n    }\n\n    return result\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122570,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdxdmaqqh_test.go:26:15: undefined: max_int\n/tmp/tmpdxdmaqqh_test.go:27:15: undefined: min_int\n/tmp/tmpdxdmaqqh_test.go:29:18: undefined: max_int\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmp6soembvg_test.go:40: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n\nfunc TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517167,
      "stdout": "--- FAIL: TestMax_Product (0.00s)\n    --- FAIL: TestMax_Product/test_num__0 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=3000)', got '%!s(int=150)'\n    --- FAIL: TestMax_Product/test_num__1 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=50265600)', got '%!s(int=80)'\n    --- FAIL: TestMax_Product/test_num__2 (0.00s)\n        tmpqftn7fsn_test.go:39: expected '%!s(int=2460)', got '%!s(int=60)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}