{
  "name": "mbpp_724_power_base_sum",
  "language": "go_test.go",
  "prompt": "package power_base_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base int, power int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPower_Base_Sum(t *testing.T) {\n  candidate := power_base_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 100), expected: 115 },\n     { actual: candidate(8, 10), expected: 37 },\n     { actual: candidate(8, 15), expected: 62 },\n     { actual: candidate(3, 3), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var i int = 0\n    for i < base_str_len {\n        base_str_arr[i] = int(base_str[i] - '0')\n        i++\n    }\n    var j int = 0\n    for j < power {\n        var k int = 0\n        var carry int = 0\n        for k < base_str_len {\n            var temp int = base_str_arr[k] * base + carry\n            base_str_arr[k] = temp % 10\n            carry = temp / 10\n            k++\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry = carry / 10\n        }\n        j++\n    }\n    var l int = 0\n    for l < len(base_str_arr) {\n        sum += base_str_arr[l]\n        l++\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_pow []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_pow[i] = base_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_arr_len; j++ {\n            var tmp int = base_arr_pow[j] * base + carry\n            base_arr_pow[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr_pow = append(base_arr_pow, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_arr_pow); i++ {\n        sum += base_arr_pow[i]\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power_len; i++ {\n        power_arr[i] = int(power_str[i] - '0')\n    }\n    for i := 0; i < power_len; i++ {\n        for j := 0; j < base_len; j++ {\n            sum += base_arr[j] * power_arr[i]\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    if power == 1 {\n        return sum\n    }\n    return power_base_sum(sum, power - 1)\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_arr []string = make([]string, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_arr[i] = string(base_str[i])\n    }\n    var base_int_arr []int = make([]int, len(base_arr))\n    for i := 0; i < len(base_arr); i++ {\n        base_int_arr[i], _ = fmt.Sscanf(base_arr[i], \"%d\")\n    }\n    for i := 0; i < len(base_int_arr); i++ {\n        sum += base_int_arr[i]\n    }\n    var result int = sum\n    for i := 1; i < power; i++ {\n        result *= sum\n    }\n    return result\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var power_str_len int = len(power_str)\n    var power_str_len_1 int = power_str_len - 1\n    var power_str_len_2 int = power_str_len - 2\n    var power_str_len_3 int = power_str_len - 3\n    var power_str_len_4 int = power_str_len - 4\n    var power_str_len_5 int = power_str_len - 5\n    var power_str_len_6 int = power_str_len - 6\n    var power_str_len_7 int = power_str_len - 7\n    var power_str_len_8 int = power_str_len - 8\n    var power_str_len_9 int = power_str_len - 9\n    var power_str_len_10 int = power_str_len - 10\n    var power_str_len_11 int = power_str_len - 11\n    var power_str_len_12 int = power_str_len - 12\n    var power_str_len_13 int = power_str_len - 13\n    var power_str_len_14 int = power_str_len - 14\n    var power_str_len_15 int = power_str_len - 15\n    var power_str_len_16 int = power_str_len - 16\n    var power_str_len_17 int = power_str_len - 17\n    var power_str_len_18 int = power_str_len - 18\n    var power_str_len_19 int = power_str_len - 19\n    var power_str_len_20 int = power_str_len - 20\n    var power_str_len_21 int = power_str_len - 21\n    var power_str_len_22 int = power_str_len - 22\n    var power_str_len_23 int = power_str_len - 23",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_str_arr[i]\n    }\n    var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n    var base_arr_sum_str_len int = len(base_arr_sum_str)\n    var base_arr_sum_str_arr []int = make([]int, base_arr_sum_str_len)\n    for i := 0; i < base_arr_sum_str_len; i++ {\n        base_arr_sum_str_arr[i] = int(base_arr_sum_str[i] - '0')\n    }\n    var base_arr_sum_str_arr_len int = len(base_arr_sum_str_arr)\n    var base_arr_sum_str_arr_sum int = 0\n    for i := 0; i < base_arr_sum_str_arr_len; i++ {\n        base_arr_sum_str_arr_sum += base_arr_sum_str_arr[i]\n    }\n    sum = base_arr_sum_str_arr_sum\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_index int = 0\n    var power_arr_index int = 0\n    var base_arr_value int = 0\n    var power_arr_value int = 0\n    var base_arr_value_str string = \"\"\n    var power_arr_value_str string = \"\"\n    var base_arr_value_len int = 0\n    var power_arr_value_len int = 0\n    var base_arr_value_index int = 0\n    var power_arr_value_index int = 0\n    var base_arr_value_value int = 0\n    var power_arr_value_value int = 0\n    var base_arr_value_value_str string = \"\"\n    var power_arr_value_value_str string = \"\"\n    var base_arr_value_value_len int = 0\n    var power_arr_value_value_len int = 0\n    var base_arr_value_value_index int = 0\n    var power_arr_value_value_index int = 0\n    var base_arr_value_value_value int = 0\n    var power_arr_value_value_value int = 0\n    var base_arr_value_value_value_str string = \"\"\n    var power_arr_value_value_value_str string = \"\"\n    var base_arr_value_value_value_len int = 0\n    var power_arr_value_value_value_len int = 0\n    var base_arr_value_value_value_index int = 0\n    var power_arr_value_value_value_index int = 0\n    var",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    var base_arr_index int = 0\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    var base_arr_sum_str string = \"\"\n    var base_arr_sum_len int = 0\n    var base_arr_sum_arr []int = make([]int, base_arr_sum_len)\n    var base_arr_sum_arr_index int = 0\n    var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n    var base_arr_sum_arr_sum int = 0\n    var base_arr_sum_arr_sum_str string = \"\"\n    var base_arr_sum_arr_sum_len int = 0\n    var base_arr_sum_arr_sum_arr []int = make([]int, base_arr_sum_arr_sum_len)\n    var base_arr_sum_arr_sum_arr_index int = 0\n    var base_arr_sum_arr_sum_arr_len int = len(base_arr_sum_arr_sum_arr)\n    var base_arr_sum_arr_sum_arr_sum int = 0\n    var base_arr_sum_arr_sum_arr_sum_str string = \"\"\n    var base_arr_sum_arr_sum_arr_sum_len int = 0\n    var base_arr_sum_arr_sum_arr_sum_arr []int = make([]int, base_arr_sum_arr_sum_arr_sum_len)\n    var base_arr_sum_arr_sum_arr_sum_arr_index int = 0\n    var base_arr_sum_arr_sum_arr_sum_arr_len int = len(base_arr_sum_arr_sum_arr_sum_arr)\n    var base_arr_sum_arr_sum_arr_sum_arr_sum int = 0\n    var",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    if base < 0 || power < 0 {\n        return -1\n    }\n    if base == 0 {\n        return 0\n    }\n    if power == 0 {\n        return 1\n    }\n    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    var i int = 0\n    for i < base_str_len {\n        base_arr[i] = int(base_str[i] - '0')\n        i++\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    var j int = 0\n    for j < base_arr_len {\n        base_arr_sum += base_arr[j]\n        j++\n    }\n    var k int = 0\n    for k < power {\n        sum += base_arr_sum\n        k++\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 0; i < power; i++ {\n        for power_base > 0 {\n            sum += power_base % 10\n            power_base /= 10\n        }\n        power_base = sum\n        sum = 0\n    }\n    return power_base\n}\n",
    "    if power == 0 {\n        return 1\n    }\n    if power == 1 {\n        return base\n    }\n    return base * power_base_sum(base, power - 1)\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = base\n    var base_int_str string = fmt.Sprintf(\"%d\", base_int)\n    var base_int_str_len int = len(base_int_str)\n    var base_int_str_len_int int = base_int_str_len\n    var base_int_str_len_int_str string = fmt.Sprintf(\"%d\", base_int_str_len_int)\n    var base_int_str_len_int_str_len int = len(base_int_str_len_int_str)\n    var base_int_str_len_int_str_len_int int = base_int_str_len_int_str_len\n    var base_int_str_len_int_str_len_int_str string = fmt.Sprintf(\"%d\", base_int_str_len_int_str_len_int)\n    var base_int_str_len_int_str_len_int_str_len int = len(base_int_str_len_int_str_len_int_str)\n    var base_int_str_len_int_str_len_int_str_len_int int = base_int_str_len_int_str_len_int_str_len\n    var base_int_str_len_int_str_len_int_str_len_int_str string = fmt.Sprintf(\"%d\", base_int_str_len_int_str_len_int_str_len_int)\n    var base_int_str_len_int_str_len_int_str_len_int_str_len int = len(base_int_str_len_int_str_len_int_str_len_int_str)\n    var base_int_str_len_int_str_len_int_str_len_int_str_len_int int = base_int_str_len_int_str_len_int_str_len_int_str_len\n    var base_int_str_len",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var temp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = temp % 10\n            carry = temp / 10\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry = carry / 10\n        }\n    }\n    for i := 0; i < len(base_str_arr); i++ {\n        sum += base_str_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_arr []int = make([]int, base_str_len)\n    var power_arr []int = make([]int, power_str_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_index int = 0\n    var power_arr_index int = 0\n    var base_arr_value int = 0\n    var power_arr_value int = 0\n    var base_arr_value_str string = \"\"\n    var power_arr_value_str string = \"\"\n    var base_arr_value_str_len int = 0\n    var power_arr_value_str_len int = 0\n    var base_arr_value_str_index int = 0\n    var power_arr_value_str_index int = 0\n    var base_arr_value_str_value int = 0\n    var power_arr_value_str_value int = 0\n    var base_arr_value_str_value_str string = \"\"\n    var power_arr_value_str_value_str string = \"\"\n    var base_arr_value_str_value_str_len int = 0\n    var power_arr_value_str_value_str_len int = 0\n    var base_arr_value_str_value_str_index int = 0\n    var power_arr_value_str_value_str_index int = 0\n    var base_arr_value_str_value_str_value int = 0\n    var power_arr_value_str_value_str_value int = 0\n    var base_arr_value_str_value_str_value_str string = \"\"\n    var power_arr_value_str_value_str_value_str string = \"\"\n    var base_arr_value_str_value_str_",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_power_str string = fmt.Sprintf(\"%d\", base)\n    for i := 1; i < power; i++ {\n        base_power_str = multiply(base_power_str, base_str)\n    }\n    for _, c := range base_power_str {\n        sum += int(c - '0')\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    if power == 1 {\n        return sum\n    }\n    return power_base_sum(sum, power - 1)\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 1; i <= power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    var power_str_arr []string = make([]string, power_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var power_str_arr_len int = len(power_str_arr)\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0\n    var ggg int = 0\n    var hhh int = 0\n    var iii int = 0\n    var jjj int = 0\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = fmt.Sscanf(string(base_str[j]), \"%d\", &base_int)\n            sum += base_int\n        }\n    }\n\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_power_str string = fmt.Sprintf(\"%d\", base)\n    for i := 1; i < power; i++ {\n        base_power_str = fmt.Sprintf(\"%d\", base_power_str)\n        base_power_str = fmt.Sprintf(\"%d\", base_power_str)\n    }\n    for i := 0; i < len(base_power_str); i++ {\n        sum += int(base_power_str[i])\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr[i] = base_str_arr[i]\n    }\n    var base_arr_len_tmp int = base_arr_len\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_arr_len_tmp; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n        base_arr_len_tmp = len(base_arr)\n    }\n    for i := 0; i < base_arr_len_tmp; i++ {\n        sum += base_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var temp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = temp % 10\n            carry = temp / 10\n        }\n\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry /= 10\n        }\n    }\n\n    for i := 0; i < len(base_str_arr); i++ {\n        sum += base_str_arr[i]\n    }\n\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    for i := 0; i < base_str_len; i++ {\n        for j := 0; j < power_str_len; j++ {\n            sum += int(base_str[i] - '0')\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    total := 1\n    for i := 0; i < power; i++ {\n        total *= base\n    }\n    sum := 0\n    for total > 0 {\n        sum += total % 10\n        total /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 1; i <= power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result = result * base\n    }\n    for result > 0 {\n        sum += result % 10\n        result = result / 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var base_str_arr_idx int = 0\n    for base_str_arr_idx < base_str_arr_len {\n        base_str_arr[base_str_arr_idx] = int(base_str[base_str_arr_idx] - '0')\n        base_str_arr_idx++\n    }\n    var base_str_arr_idx_2 int = 0\n    var base_str_arr_len_2 int = len(base_str_arr)\n    var base_str_arr_idx_3 int = 0\n    var base_str_arr_len_3 int = len(base_str_arr)\n    var base_str_arr_idx_4 int = 0\n    var base_str_arr_len_4 int = len(base_str_arr)\n    var base_str_arr_idx_5 int = 0\n    var base_str_arr_len_5 int = len(base_str_arr)\n    for base_str_arr_idx_2 < base_str_arr_len_2 {\n        for base_str_arr_idx_3 = 0; base_str_arr_idx_3 < base_str_arr_len_3; base_str_arr_idx_3++ {\n            for base_str_arr_idx_4 = 0; base_str_arr_idx_4 < base_str_arr_len_4; base_str_arr_idx_4++ {\n                for base_str_arr_idx_5 = 0; base_str_arr_idx_5 < base_str_arr_len_5; base_str_arr_idx_5++ {\n                    sum += base_str_arr[base_str_arr_idx_2]",
    "    if base < 0 || power < 0 {\n        return -1\n    }\n    if base == 0 {\n        return 0\n    }\n    if power == 0 {\n        return 1\n    }\n    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result = result * base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result = result * base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n        var base_arr_sum_len int = len(base_arr_sum_str)\n        var base_arr_sum_arr []int = make([]int, base_arr_sum_len)\n        for j := 0; j < base_arr_sum_len; j++ {\n            base_arr_sum_arr[j] = int(base_arr_sum_str[j] - '0')\n        }\n        var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n        var base_arr_sum_arr_sum int = 0\n        for j := 0; j < base_arr_sum_arr_len; j++ {\n            base_arr_sum_arr_sum += base_arr_sum_arr[j]\n        }\n        base_arr_sum = base_arr_sum_arr_sum\n        sum += base_arr_sum\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power = base_power * base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power = base_power / 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < len(base_str); i++ {\n        fmt.Sscanf(string(base_str[i]), \"%d\", &base_int)\n        sum += base_int\n    }\n    var result int = sum\n    for i := 1; i < power; i++ {\n        result *= sum\n        var result_str string = fmt.Sprintf(\"%d\", result)\n        sum = 0\n        for i := 0; i < len(result_str); i++ {\n            fmt.Sscanf(string(result_str[i]), \"%d\", &base_int)\n            sum += base_int\n        }\n        result = sum\n    }\n    return result\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 1; i <= power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var num int = base\n    for i := 0; i < power; i++ {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n        num = sum\n        sum = 0\n    }\n    return num\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var base_arr_len int = len(base_arr)\n    var power_arr_len int = len(power_arr)\n    var base_arr_index int = 0\n    var power_arr_index int = 0\n    var base_arr_value int = 0\n    var power_arr_value int = 0\n    var base_arr_value_str string = \"\"\n    var power_arr_value_str string = \"\"\n    var base_arr_value_len int = 0\n    var power_arr_value_len int = 0\n    var base_arr_value_index int = 0\n    var power_arr_value_index int = 0\n    var base_arr_value_value int = 0\n    var power_arr_value_value int = 0\n    var base_arr_value_value_str string = \"\"\n    var power_arr_value_value_str string = \"\"\n    var base_arr_value_value_len int = 0\n    var power_arr_value_value_len int = 0\n    var base_arr_value_value_index int = 0\n    var power_arr_value_value_index int = 0\n    var base_arr_value_value_value int = 0\n    var power_arr_value_value_value int = 0\n    var base_arr_value_value_value_str string = \"\"\n    var power_arr_value_value_value_str string = \"\"\n    var base_arr_value_value_value_len int = 0\n    var power_arr_value_value_value_len int = 0\n    var base_arr_value_value_value_index int = 0\n    var power_arr_value_value_value_index int = 0\n    var",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    var base_arr_len int = len(base_arr)\n    var base_arr_i int = 0\n    var base_arr_j int = 0\n    var base_arr_k int = 0\n    var base_arr_l int = 0\n    var base_arr_m int = 0\n    var base_arr_n int = 0\n    var base_arr_o int = 0\n    var base_arr_p int = 0\n    var base_arr_q int = 0\n    var base_arr_r int = 0\n    var base_arr_s int = 0\n    var base_arr_t int = 0\n    var base_arr_u int = 0\n    var base_arr_v int = 0\n    var base_arr_w int = 0\n    var base_arr_x int = 0\n    var base_arr_y int = 0\n    var base_arr_z int = 0\n    var base_arr_aa int = 0\n    var base_arr_ab int = 0\n    var base_arr_ac int = 0\n    var base_arr_ad int = 0\n    var base_arr_ae int = 0\n    var base_arr_af int = 0\n    var base_arr_ag int = 0\n    var base_arr_ah int = 0\n    var base_arr_ai int = 0\n    var base_arr_aj int = 0\n    var base_arr_ak int = 0\n    var base_arr_al int = 0\n    var base_arr_am int = 0\n    var base_arr_an int = 0\n    var base_arr_ao int = 0\n    var base_arr_ap int = 0\n    var base_arr_aq int = 0\n    var base_arr_ar int = 0\n    var base_arr_as int = 0\n    var base_arr_at int = 0\n    var base_arr_au int = 0\n    var base_arr",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = string(base_str[i])\n    }\n    for i := 0; i < power; i++ {\n        var temp_sum int = 0\n        for j := 0; j < base_str_len; j++ {\n            temp_sum += int(base_str_arr[j])\n        }\n        sum += temp_sum\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var num int = base\n    for i := 0; i < power; i++ {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n        num = sum\n        sum = 0\n    }\n    return num\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_str_arr []string = make([]string, base_str_len)\n    var power_str_arr []string = make([]string, power_str_len)\n    var base_str_arr_len int = len(base_str_arr)\n    var power_str_arr_len int = len(power_str_arr)\n    var base_str_arr_index int = 0\n    var power_str_arr_index int = 0\n    var base_str_arr_index_int int = 0\n    var power_str_arr_index_int int = 0\n    var base_str_arr_index_int_str string = \"\"\n    var power_str_arr_index_int_str string = \"\"\n    var base_str_arr_index_int_str_len int = 0\n    var power_str_arr_index_int_str_len int = 0\n    var base_str_arr_index_int_str_arr []string = make([]string, base_str_arr_index_int_str_len)\n    var power_str_arr_index_int_str_arr []string = make([]string, power_str_arr_index_int_str_len)\n    var base_str_arr_index_int_str_arr_len int = len(base_str_arr_index_int_str_arr)\n    var power_str_arr_index_int_str_arr_len int = len(power_str_arr_index_int_str_arr)\n    var base_str_arr_index_int_str_arr_index int = 0\n    var power_str_arr_index_int_str_arr_index int = 0\n    var base_str_arr_index_int_str_arr_index_int int = 0\n    var power_str_arr_index_int",
    "    var result int\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        result += power_base % 10\n        power_base /= 10\n    }\n    return result\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    var i int = 0\n    var j int = 0\n    var k int = 0\n    var l int = 0\n    var m int = 0\n    var n int = 0\n    var o int = 0\n    var p int = 0\n    var q int = 0\n    var r int = 0\n    var s int = 0\n    var t int = 0\n    var u int = 0\n    var v int = 0\n    var w int = 0\n    var x int = 0\n    var y int = 0\n    var z int = 0\n    var aa int = 0\n    var bb int = 0\n    var cc int = 0\n    var dd int = 0\n    var ee int = 0\n    var ff int = 0\n    var gg int = 0\n    var hh int = 0\n    var ii int = 0\n    var jj int = 0\n    var kk int = 0\n    var ll int = 0\n    var mm int = 0\n    var nn int = 0\n    var oo int = 0\n    var pp int = 0\n    var qq int = 0\n    var rr int = 0\n    var ss int = 0\n    var tt int = 0\n    var uu int = 0\n    var vv int = 0\n    var ww int = 0\n    var xx int = 0\n    var yy int = 0\n    var zz int = 0\n    var aaa int = 0\n    var bbb int = 0\n    var ccc int = 0\n    var ddd int = 0\n    var eee int = 0\n    var fff int = 0\n    var ggg int = 0\n    var hhh int = 0\n    var iii int = 0\n    var jjj int = 0\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_arr[i]\n    }\n    sum = base_arr_sum\n    for i := 1; i < power; i++ {\n        var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n        var base_arr_sum_len int = len(base_arr_sum_str)\n        var base_arr_sum_arr []int = make([]int, base_arr_sum_len)\n        for i := 0; i < base_arr_sum_len; i++ {\n            base_arr_sum_arr[i] = int(base_arr_sum_str[i] - '0')\n        }\n        var base_arr_sum_arr_len int = len(base_arr_sum_arr)\n        var base_arr_sum_arr_sum int = 0\n        for i := 0; i < base_arr_sum_arr_len; i++ {\n            base_arr_sum_arr_sum += base_arr_sum_arr[i]\n        }\n        sum += base_arr_sum_arr_sum\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_arr {\n        sum += v\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int_arr []int = make([]int, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_int_arr[i], _ = fmt.Sscanf(string(base_str[i]), \"%d\", &base_int_arr[i])\n    }\n    var base_int_arr_len int = len(base_int_arr)\n    var base_int_arr_pow_len int = base_int_arr_len * power\n    var base_int_arr_pow []int = make([]int, base_int_arr_pow_len)\n    for i := 0; i < power; i++ {\n        for j := 0; j < base_int_arr_len; j++ {\n            base_int_arr_pow[i * base_int_arr_len + j] = base_int_arr[j]\n        }\n    }\n    for i := 0; i < base_int_arr_pow_len; i++ {\n        sum += base_int_arr_pow[i]\n    }\n    return sum\n}\n",
    "    if power == 0 {\n        return 1\n    }\n    result := base\n    for i := 1; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var temp int = base_str_arr[j] * base + carry\n            base_str_arr[j] = temp % 10\n            carry = temp / 10\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry = carry / 10\n        }\n    }\n    for i := 0; i < len(base_str_arr); i++ {\n        sum += base_str_arr[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var tmp int = base_arr[j] * base + carry\n            base_arr[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry = carry / 10\n        }\n    }\n    for i := 0; i < len(base_arr); i++ {\n        sum += base_arr[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    return sum_digits(result)\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 1; i <= power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = 1\n    for i := 0; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_pow []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_pow[i] = base_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_arr_len; j++ {\n            var tmp int = base_arr_pow[j] * base + carry\n            base_arr_pow[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr_pow = append(base_arr_pow, carry % 10)\n            carry /= 10\n        }\n    }\n    for _, v := range base_arr_pow {\n        sum += v\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_str_len; j++ {\n            var product int = base_arr[j] * base + carry\n            base_arr[j] = product % 10\n            carry = product / 10\n        }\n        for carry > 0 {\n            base_arr = append(base_arr, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_arr); i++ {\n        sum += base_arr[i]\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int_slice []int = make([]int, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_int_slice[i] = int(base_str[i] - '0')\n    }\n    var base_int int = 0\n    for i := 0; i < len(base_int_slice); i++ {\n        base_int += base_int_slice[i] * int(math.Pow(10, float64(len(base_int_slice) - i - 1)))\n    }\n    var power_int int = int(math.Pow(float64(base_int), float64(power)))\n    var power_str string = fmt.Sprintf(\"%d\", power_int)\n    var power_int_slice []int = make([]int, len(power_str))\n    for i := 0; i < len(power_str); i++ {\n        power_int_slice[i] = int(power_str[i] - '0')\n    }\n    for i := 0; i < len(power_int_slice); i++ {\n        sum += power_int_slice[i]\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var i int = 0\n    var result int = 1\n    for i < power {\n        result *= base\n        i++\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int\n    for base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    if power == 1 {\n        return sum\n    }\n    return power_base_sum(sum, power - 1)\n}\n",
    "    var sum int = 0\n    var power_base int = base\n    for i := 1; i < power; i++ {\n        power_base *= base\n    }\n    for power_base > 0 {\n        sum += power_base % 10\n        power_base /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int int = 0\n    for i := 0; i < power; i++ {\n        for j := 0; j < len(base_str); j++ {\n            base_int, _ = strconv.Atoi(string(base_str[j]))\n            sum += base_int\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_int_array []int = make([]int, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_int_array[i], _ = fmt.Sscanf(string(base_str[i]), \"%d\")\n    }\n    for i := 0; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < len(base_int_array); j++ {\n            var temp int = base_int_array[j] * base + carry\n            base_int_array[j] = temp % 10\n            carry = temp / 10\n        }\n        for carry > 0 {\n            base_int_array = append(base_int_array, carry % 10)\n            carry = carry / 10\n        }\n    }\n    for i := 0; i < len(base_int_array); i++ {\n        sum += base_int_array[i]\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_str_len int = len(base_str)\n    var power_str_len int = len(power_str)\n    var base_arr []int = make([]int, base_str_len)\n    var power_arr []int = make([]int, power_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power_str_len; i++ {\n        power_arr[i] = int(power_str[i] - '0')\n    }\n    for i := 0; i < power_str_len; i++ {\n        for j := 0; j < base_str_len; j++ {\n            sum += base_arr[j] * power_arr[i]\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < base_len; i++ {\n        var tmp int = base_arr[i]\n        for j := 1; j < power; j++ {\n            tmp = tmp * base_arr[i]\n        }\n        sum += tmp\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    for i := 0; i < base_str_len; i++ {\n        base_str_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_str_arr)\n    var base_arr_sum int = 0\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_sum += base_str_arr[i]\n    }\n    var base_arr_sum_str string = fmt.Sprintf(\"%d\", base_arr_sum)\n    var base_arr_sum_str_len int = len(base_arr_sum_str)\n    var base_arr_sum_str_arr []int = make([]int, base_arr_sum_str_len)\n    for i := 0; i < base_arr_sum_str_len; i++ {\n        base_arr_sum_str_arr[i] = int(base_arr_sum_str[i] - '0')\n    }\n    var base_arr_sum_str_arr_len int = len(base_arr_sum_str_arr)\n    var base_arr_sum_str_arr_sum int = 0\n    for i := 0; i < base_arr_sum_str_arr_len; i++ {\n        base_arr_sum_str_arr_sum += base_arr_sum_str_arr[i]\n    }\n    sum = base_arr_sum_str_arr_sum\n    return sum\n}\n",
    "    if power == 0 {\n        return 1\n    }\n    if power == 1 {\n        return base\n    }\n    return base * power_base_sum(base, power-1)\n}\n"
  ]
}