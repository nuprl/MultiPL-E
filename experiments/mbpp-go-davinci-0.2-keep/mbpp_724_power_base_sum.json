{
  "name": "mbpp_724_power_base_sum",
  "language": "go_test.go",
  "prompt": "package power_base_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nfunc power_base_sum(base int, power int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPower_Base_Sum(t *testing.T) {\n  candidate := power_base_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 100), expected: 115 },\n     { actual: candidate(8, 10), expected: 37 },\n     { actual: candidate(8, 15), expected: 62 },\n     { actual: candidate(3, 3), expected: 9 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var base_str_arr []int = make([]int, base_str_len)\n    var i int = 0\n    for i < base_str_len {\n        base_str_arr[i] = int(base_str[i] - '0')\n        i++\n    }\n    var j int = 0\n    for j < power {\n        var k int = 0\n        var carry int = 0\n        for k < base_str_len {\n            var temp int = base_str_arr[k] * base + carry\n            base_str_arr[k] = temp % 10\n            carry = temp / 10\n            k++\n        }\n        for carry > 0 {\n            base_str_arr = append(base_str_arr, carry % 10)\n            carry = carry / 10\n        }\n        j++\n    }\n    var l int = 0\n    for l < len(base_str_arr) {\n        sum += base_str_arr[l]\n        l++\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_len int = len(base_str)\n    var base_arr []int = make([]int, base_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    var base_arr_len int = len(base_arr)\n    var base_arr_pow []int = make([]int, base_arr_len)\n    for i := 0; i < base_arr_len; i++ {\n        base_arr_pow[i] = base_arr[i]\n    }\n    for i := 1; i < power; i++ {\n        var carry int = 0\n        for j := 0; j < base_arr_len; j++ {\n            var tmp int = base_arr_pow[j] * base + carry\n            base_arr_pow[j] = tmp % 10\n            carry = tmp / 10\n        }\n        for carry > 0 {\n            base_arr_pow = append(base_arr_pow, carry % 10)\n            carry /= 10\n        }\n    }\n    for i := 0; i < len(base_arr_pow); i++ {\n        sum += base_arr_pow[i]\n    }\n    return sum\n}\n",
    "    result := 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    sum := 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var base_len int = len(base_str)\n    var power_len int = len(power_str)\n    var base_arr []int = make([]int, base_len)\n    var power_arr []int = make([]int, power_len)\n    for i := 0; i < base_len; i++ {\n        base_arr[i] = int(base_str[i] - '0')\n    }\n    for i := 0; i < power_len; i++ {\n        power_arr[i] = int(power_str[i] - '0')\n    }\n    for i := 0; i < power_len; i++ {\n        for j := 0; j < base_len; j++ {\n            sum += base_arr[j] * power_arr[i]\n        }\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_power int = base\n    for i := 1; i < power; i++ {\n        base_power *= base\n    }\n    for base_power > 0 {\n        sum += base_power % 10\n        base_power /= 10\n    }\n    return sum\n}\n",
    "    var sum int\n    for base > 0 {\n        sum += base % 10\n        base /= 10\n    }\n    if power == 1 {\n        return sum\n    }\n    return power_base_sum(sum, power - 1)\n}\n",
    "    var result int = 1\n    var sum int = 0\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_arr []string = make([]string, len(base_str))\n    for i := 0; i < len(base_str); i++ {\n        base_arr[i] = string(base_str[i])\n    }\n    var base_int_arr []int = make([]int, len(base_arr))\n    for i := 0; i < len(base_arr); i++ {\n        base_int_arr[i], _ = fmt.Sscanf(base_arr[i], \"%d\")\n    }\n    for i := 0; i < len(base_int_arr); i++ {\n        sum += base_int_arr[i]\n    }\n    var result int = sum\n    for i := 1; i < power; i++ {\n        result *= sum\n    }\n    return result\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n",
    "    var sum int = 0\n    var base_str string = fmt.Sprintf(\"%d\", base)\n    var base_str_len int = len(base_str)\n    var power_str string = fmt.Sprintf(\"%d\", power)\n    var power_str_len int = len(power_str)\n    var power_str_len_1 int = power_str_len - 1\n    var power_str_len_2 int = power_str_len - 2\n    var power_str_len_3 int = power_str_len - 3\n    var power_str_len_4 int = power_str_len - 4\n    var power_str_len_5 int = power_str_len - 5\n    var power_str_len_6 int = power_str_len - 6\n    var power_str_len_7 int = power_str_len - 7\n    var power_str_len_8 int = power_str_len - 8\n    var power_str_len_9 int = power_str_len - 9\n    var power_str_len_10 int = power_str_len - 10\n    var power_str_len_11 int = power_str_len - 11\n    var power_str_len_12 int = power_str_len - 12\n    var power_str_len_13 int = power_str_len - 13\n    var power_str_len_14 int = power_str_len - 14\n    var power_str_len_15 int = power_str_len - 15\n    var power_str_len_16 int = power_str_len - 16\n    var power_str_len_17 int = power_str_len - 17\n    var power_str_len_18 int = power_str_len - 18\n    var power_str_len_19 int = power_str_len - 19\n    var power_str_len_20 int = power_str_len - 20\n    var power_str_len_21 int = power_str_len - 21\n    var power_str_len_22 int = power_str_len - 22\n    var power_str_len_23 int = power_str_len - 23",
    "    sum := 0\n    for i := 0; i < power; i++ {\n        sum += base\n    }\n    return sum\n}\n",
    "    var result int = 1\n    for i := 0; i < power; i++ {\n        result *= base\n    }\n    var sum int = 0\n    for result > 0 {\n        sum += result % 10\n        result /= 10\n    }\n    return sum\n}\n"
  ]
}