{
  "name": "mbpp_290_max_length",
  "language": "go_test.go",
  "prompt": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmppyvjh1f7_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmppyvjh1f7_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmppyvjh1f7_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = []interface{}{}\n            for _, value := range list2 {\n                max_list = append(max_list, value)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpnk55ncbk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpnk55ncbk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpnk55ncbk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp4v4lsyal_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp4v4lsyal_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp4v4lsyal_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_index int\n    for i, v := range list1 {\n        if len(v) > max_len {\n            max_len = len(v)\n            max_index = i\n        }\n    }\n    return list1[max_index]\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb1xe3vx8_test.go:18:17: cannot use list1[max_index] (type []int) as type []interface {} in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjpdavhoo_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6ezm_diw_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6ezm_diw_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6ezm_diw_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list2)\n        } else if len(list2) == max_len {\n            max_list = append(max_list, list2)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, val := range list {\n                max_list = append(max_list, val)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp7li2c3fq_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp7li2c3fq_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp7li2c3fq_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = list2\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoq0rgjh__test.go:15:22: cannot use list2 (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp71k2qgpc_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp71k2qgpc_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp71k2qgpc_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpqhqcf2uv_test.go:41: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = list2\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9_x0seku_test.go:15:22: cannot use list2 (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_list []interface{}\n    max_len := 0\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = list2\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc3k7c2_x_test.go:15:22: cannot use list2 (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_length_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp_4rf062t_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp_4rf062t_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp_4rf062t_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, v := range list2 {\n                max_list = append(max_list, v)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpfiqkz_q0_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpfiqkz_q0_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpfiqkz_q0_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for i := 0; i < len(list1); i++ {\n        if len(list1[i]) > max_len {\n            max_len = len(list1[i])\n            max_list = list1[i]\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3w67qxaq_test.go:15:22: cannot use list1[i] (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = []interface{}{list2}\n        } else if len(list2) == max {\n            max_list = append(max_list, list2)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr1tm3xqu_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr1tm3xqu_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr1tm3xqu_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, val := range list {\n                max_list[i] = val\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdj6p7mar_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdj6p7mar_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdj6p7mar_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2yf_4d_e_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2yf_4d_e_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2yf_4d_e_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_length {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmperz6p7hy_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, elem := range list {\n                max_list = append(max_list, elem)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpkb4uktka_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpkb4uktka_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpkb4uktka_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6s7owsq9_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_length_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_length_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_length_list[i] = v\n            }\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpzfajgavw_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpzfajgavw_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpzfajgavw_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = list\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbakcyy7j_test.go:15:22: cannot use list (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, max_len)\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpd9gj5qm0_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpd9gj5qm0_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpd9gj5qm0_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, max_len)\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpao01yps8_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpao01yps8_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpao01yps8_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_length {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3ytkznyj_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3ytkznyj_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3ytkznyj_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpy5swptyz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int = 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp0q4ftgrd_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp0q4ftgrd_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp0q4ftgrd_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpl6o6i0kr_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpl6o6i0kr_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpl6o6i0kr_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp55z6ayap_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{}\n            for _, item := range list {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2nfgrfz4_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list)\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpdd5hfwwk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = nil\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpevzv0i_u_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpevzv0i_u_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpevzv0i_u_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpu4_ada0t_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max {\n            max = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpjy10w3pl_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3de8en0o_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max_len {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpxngki37q_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp6lxogrxk_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := make([]interface{}, 0)\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, 0)\n            max_list = append(max_list, list2)\n        } else if len(list2) == max_len {\n            max_list = append(max_list, list2)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp37ke9o5u_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max := 0\n    max_list := []interface{}{}\n    for _, list := range list1 {\n        if len(list) > max {\n            max = len(list)\n            max_list = []interface{}{list}\n        } else if len(list) == max {\n            max_list = append(max_list, list)\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123148,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp2ze6hknz_test.go:38: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_length := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_length {\n            max_length = len(list2)\n            max_list = list2\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123147,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzb9_mom6_test.go:15:22: cannot use list2 (type []int) as type []interface {} in assignment\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpiqgtb_1r_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_length int = 0\n    var max_length_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_length {\n            max_length = len(list)\n            max_length_list = nil\n            max_length_list = append(max_length_list, list)\n        } else if len(list) == max_length {\n            max_length_list = append(max_length_list, list)\n        }\n    }\n    return max_length_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123150,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp8oe41mwu_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[[%!s(int=13) %!s(int=15) %!s(int=17)]]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp8oe41mwu_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp8oe41mwu_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[[%!s(int=15) %!s(int=20) %!s(int=25)]]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int\n    var max_list []interface{}\n    for _, list := range list1 {\n        if len(list) > max_len {\n            max_len = len(list)\n            max_list = make([]interface{}, len(list))\n            for i, v := range list {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp3pgi2sfz_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    max_len := 0\n    max_list := []interface{}{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = []interface{}{}\n            for _, item := range list2 {\n                max_list = append(max_list, item)\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510129,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmpr43xn_de_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package max_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the list of maximum length in a list of lists.\nfunc max_length(list1 [][]int) []interface{} {\n    var max_len int = 0\n    var max_list []interface{}\n    for _, list2 := range list1 {\n        if len(list2) > max_len {\n            max_len = len(list2)\n            max_list = make([]interface{}, len(list2))\n            for i, v := range list2 {\n                max_list[i] = v\n            }\n        }\n    }\n    return max_list\n}\n\nfunc TestMax_Length(t *testing.T) {\n  candidate := max_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{0}, []int{1, 3}, []int{5, 7}, []int{9, 11}, []int{13, 15, 17}}), expected: []interface{}{3, []int{13, 15, 17}} },\n     { actual: candidate([][]int{[]int{1}, []int{5, 7}, []int{10, 12, 14, 15}}), expected: []interface{}{4, []int{10, 12, 14, 15}} },\n     { actual: candidate([][]int{[]int{5}, []int{15, 20, 25}}), expected: []interface{}{3, []int{15, 20, 25}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510128,
      "stdout": "--- FAIL: TestMax_Length (0.00s)\n    --- FAIL: TestMax_Length/test_num__0 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=13) %!s(int=15) %!s(int=17)]]', got '[%!s(int=13) %!s(int=15) %!s(int=17)]'\n    --- FAIL: TestMax_Length/test_num__1 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=4) [%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]]', got '[%!s(int=10) %!s(int=12) %!s(int=14) %!s(int=15)]'\n    --- FAIL: TestMax_Length/test_num__2 (0.00s)\n        tmp5vhy62_f_test.go:39: expected '[%!s(int=3) [%!s(int=15) %!s(int=20) %!s(int=25)]]', got '[%!s(int=15) %!s(int=20) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}