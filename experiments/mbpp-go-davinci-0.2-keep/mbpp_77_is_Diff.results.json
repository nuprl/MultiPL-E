{
  "name": "mbpp_77_is_Diff",
  "language": "go_test.go",
  "prompt": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var even, odd int\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return even == odd\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        if n > 0 {\n            even += n % 10\n            n = n / 10\n        }\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp9v_l7b2w_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp9v_l7b2w_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    return is_Diff((n%10)-((n/10)%10))\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpemls17e4_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := false\n    sum := 0\n    for n > 0 {\n        digit := n % 10\n        if odd {\n            sum -= digit\n        } else {\n            sum += digit\n        }\n        odd = !odd\n        n /= 10\n    }\n    return sum % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var even, odd int\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return even == odd\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpd8j73a28_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmppn3ho9ek_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    for n > 0 {\n        if odd - even == 0 {\n            return false\n        }\n        odd = even\n        even = n / 10 % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpjym2rh13_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return false\n    }\n    if n == 11 {\n        return true\n    }\n    var odd, even int\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp0x9z5r09_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    even := n % 10\n    odd := 0\n    for n > 0 {\n        n = n / 10\n        odd = odd + n % 10\n        n = n / 10\n        even = even + n % 10\n    }\n    return (even - odd) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum1, sum2 int\n    for n > 0 {\n        sum1 += n % 10\n        n /= 10\n        sum2 += n % 10\n        n /= 10\n    }\n    return sum1 == sum2\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            odd_sum += n % 10\n        } else {\n            even_sum += n % 10\n        }\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd += n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmjk0b3no_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpl0o3_sgl_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp5p1he41h_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    if odd == even {\n        return false\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmphkbsx7ap_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        return false\n    }\n\n    if n < 10 {\n        return false\n    }\n\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n = n / 10\n    }\n\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpujgxsoiq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var sum int\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return sum % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpu7b0xbx7_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    even_sum := 0\n    odd_sum := 0\n    for n > 0 {\n        even_sum += n % 10\n        n /= 10\n        odd_sum += n % 10\n        n /= 10\n    }\n    return (even_sum - odd_sum) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return (n % 11 == 0)\n    }\n    if n < 1000 {\n        return ((n / 100) - (n % 10)) % 11 == 0\n    }\n    if n < 10000 {\n        return ((n / 1000) - (n % 100 / 10) + (n % 10)) % 11 == 0\n    }\n    if n < 100000 {\n        return ((n / 10000) - (n % 1000 / 100) + (n % 100 / 10) - (n % 10)) % 11 == 0\n    }\n    if n < 1000000 {\n        return ((n / 100000) - (n % 10000 / 1000) + (n % 1000 / 100) - (n % 100 / 10) + (n % 10)) % 11 == 0\n    }\n    if n < 10000000 {\n        return ((n / 1000000) - (n % 100000 / 10000) + (n % 10000 / 1000) - (n % 1000 / 100) + (n % 100 / 10) - (n % 10)) % 11 == 0\n    }\n    if n < 100000000 {\n        return ((n / 10000000) - (n % 1000000 / 100000) + (n % 100000 / 10000) - (n % 10000 / 1000) + (n % 1000 / 100) - (n % 100 / 10) + (n % 10)) % 11 == 0\n    }\n    if n < 1000000000 {\n        return ((n / 100000000) - (n % 10000000 / 1000000) + (n % 1000000 / 100000) - (n % 100000 / 10000) + (n % 10000 / 1000) - (n % 1000 / 100) + (n % 100 / 10) - (n % 10)) % 11 == 0\n    }\n    return false\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    n /= 10\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmputgkeaj9_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmputgkeaj9_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := false\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n        if odd {\n            sum -= n % 10\n        } else {\n            sum += n % 10\n        }\n        n /= 10\n        odd = !odd\n    }\n    return sum % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__0 (0.00s)\n        tmp0fsp8pb2_test.go:47: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp0fsp8pb2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd = odd - n % 10\n        n = n / 10\n        even = even + n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp516qq57n_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp8xr6rate_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd += n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmjk0b3no_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(even - odd)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpllomv0hu_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    n /= 10\n    even := n % 10\n    n /= 10\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    n /= 10\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        odd += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    if odd - even == 0 {\n        return false\n    }\n    return is_Diff(n / 10)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122616,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpknsndf8e_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmppn3ho9ek_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    for n > 0 {\n        if odd - even != 0 {\n            return false\n        }\n        n /= 10\n        odd = n % 10\n        even = n / 10 % 10\n    }\n    return true\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpd22wj2h1_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpd8j73a28_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    even, odd := 0, 0\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return even - odd == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n % 100 - n % 10) % 11 == 0\n    }\n    if n < 10000 {\n        return (n % 1000 - n % 100) % 11 == 0\n    }\n    if n < 100000 {\n        return (n % 10000 - n % 1000) % 11 == 0\n    }\n    if n < 1000000 {\n        return (n % 100000 - n % 10000) % 11 == 0\n    }\n    if n < 10000000 {\n        return (n % 1000000 - n % 100000) % 11 == 0\n    }\n    if n < 100000000 {\n        return (n % 10000000 - n % 1000000) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (n % 100000000 - n % 10000000) % 11 == 0\n    }\n    if n < 10000000000 {\n        return (n % 1000000000 - n % 100000000) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (n % 10000000000 - n % 1000000000) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return (n % 100000000000 - n % 10000000000) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (n % 1000000000000 - n % 100000000000) % 11 == 0\n    }\n    if n < 100000000000000 {\n        return (n % 10000000000000 - n % 1000000000000) % 11 == 0\n    }\n    if n < 1000000000000000 {\n        return (n % 100000000000000 - n % 10000000000000) % 11 == 0\n    }\n    if n < 10000000000000000 {\n        return (n % 1000000000000000 - n % 100000000000000) % 11 == 0\n    }\n    if n < 100000000000000000 {\n        return (n % 10000000000000000 - n % 1000000000000000) % 11 == 0\n    }\n    if n < 1000000000000000000 {\n        return (n % 100000000000000000 - n % 10000000000000000) % 11 == 0\n    }\n    if n <\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122616,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpelh0aoqh_test.go:65:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    even := 0\n    odd := 0\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        odd += n % 10\n        n /= 10\n    }\n    return (even - odd) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpb4jc_96p_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; n > 0; i++ {\n        if i % 2 == 0 {\n            odd_sum += n % 10\n        } else {\n            even_sum += n % 10\n        }\n        n /= 10\n    }\n    return odd_sum - even_sum == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff((odd - even) * 10 + n / 100)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpk62xcjav_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; n > 0; i++ {\n        if i % 2 == 0 {\n            odd_sum += n % 10\n        } else {\n            even_sum += n % 10\n        }\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    for n > 0 {\n        if odd - even != 0 {\n            return false\n        }\n        odd = n % 10\n        even = n / 10 % 10\n        n /= 100\n    }\n    return true\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpm66_knh7_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    even := 0\n    odd := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return even - odd == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpka7zz7i3_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpl0o3_sgl_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    n /= 10\n    for n > 0 {\n        even += n % 10\n        n /= 10\n        if n == 0 {\n            break\n        }\n        odd += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    sum := 0\n    for n > 0 {\n        sum += n % 10\n        n /= 10\n    }\n    return is_Diff(sum)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp7rzy01wr_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpadkqt5ow_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        odd -= n % 10\n        n /= 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmputgkeaj9_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmputgkeaj9_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum_odd, sum_even int\n    for i := 0; n > 0; i++ {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n    }\n    return sum_odd - sum_even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpvh2vl276_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0)\n    }\n    if n < 10000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0)\n    }\n    if n < 100000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11 == 0)\n    }\n    if n < 1000000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11 == 0) && (n % 100000 % 11 == 0)\n    }\n    if n < 10000000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11 == 0) && (n % 100000 % 11 == 0) && (n % 1000000 % 11 == 0)\n    }\n    if n < 100000000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11 == 0) && (n % 100000 % 11 == 0) && (n % 1000000 % 11 == 0) && (n % 10000000 % 11 == 0)\n    }\n    if n < 1000000000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11 == 0) && (n % 100000 % 11 == 0) && (n % 1000000 % 11 == 0) && (n % 10000000 % 11 == 0) && (n % 100000000 % 11 == 0)\n    }\n    if n < 10000000000 {\n        return (n % 11 == 0) && (n % 100 % 11 == 0) && (n % 1000 % 11 == 0) && (n % 10000 % 11\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3b7ubo1c_test.go:38:95: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var sum_even, sum_odd int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            sum_even += n % 10\n        } else {\n            sum_odd += n % 10\n        }\n        n /= 10\n    }\n    return sum_even - sum_odd == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", n)); i++ {\n        if i % 2 == 0 {\n            odd_sum += n % 10\n        } else {\n            even_sum += n % 10\n        }\n        n /= 10\n    }\n    return odd_sum - even_sum == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n % 100) % 11 == 0\n    }\n    if n < 10000 {\n        return ((n % 1000) % 100) % 11 == 0\n    }\n    if n < 100000 {\n        return (((n % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000 {\n        return ((((n % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000 {\n        return (((((n % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 100000000 {\n        return ((((((n % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (((((((n % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000000 {\n        return ((((((((n % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (((((((((n % 10000000000) % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return ((((((((((n % 100000000000) % 10000000000) % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (((((((((((n % 1000000000000) % 100000000000) % 10000000000) % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq_jhyj5a_test.go:48:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := (n / 10) % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpp9il_2p3_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd -= n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == 0 || even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmpyjlf1603_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        odd += n % 10\n        n = n / 10\n        even += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpmjk0b3no_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        if n % 2 == 0 {\n            even += n % 10\n        } else {\n            odd += n % 10\n        }\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmppn3ho9ek_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmpt96vfpl9_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd_sum := 0\n    even_sum := 0\n    for n > 0 {\n        odd_sum += n % 10\n        n /= 10\n        even_sum += n % 10\n        n /= 10\n    }\n    return odd_sum - even_sum == 0 || odd_sum - even_sum == 11 || odd_sum - even_sum == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n % 100) % 11 == 0\n    }\n    if n < 10000 {\n        return (n % 1000) % 11 == 0\n    }\n    if n < 100000 {\n        return (n % 10000) % 11 == 0\n    }\n    if n < 1000000 {\n        return (n % 100000) % 11 == 0\n    }\n    if n < 10000000 {\n        return (n % 1000000) % 11 == 0\n    }\n    if n < 100000000 {\n        return (n % 10000000) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (n % 100000000) % 11 == 0\n    }\n    if n < 10000000000 {\n        return (n % 1000000000) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (n % 10000000000) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return (n % 100000000000) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (n % 1000000000000) % 11 == 0\n    }\n    if n < 100000000000000 {\n        return (n % 10000000000000) % 11 == 0\n    }\n    if n < 1000000000000000 {\n        return (n % 100000000000000) % 11 == 0\n    }\n    if n < 10000000000000000 {\n        return (n % 1000000000000000) % 11 == 0\n    }\n    if n < 100000000000000000 {\n        return (n % 10000000000000000) % 11 == 0\n    }\n    if n < 1000000000000000000 {\n        return (n % 100000000000000000) % 11 == 0\n    }\n    if n < 10000000000000000000 {\n        return (n % 1000000000000000000) % 11 == 0\n    }\n    if n < 100000000000000000000 {\n        return (n % 10000000000000000000) % 11 == 0\n    }\n    if n < 1000000000000000000000 {\n        return (n % 100000000000000000000) % 11 == 0\n    }\n    if n < 10000000000000000000000\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp59bcvu1k_test.go:74:6: expected '(', found TestIs_Diff\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0 || odd - even == 11 || odd - even == -11\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := n / 10 % 10\n    for n > 0 {\n        if odd - even != 0 {\n            return false\n        }\n        odd = n % 10\n        even = n / 10 % 10\n        n /= 10\n    }\n    return true\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp5yf6mj0m_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even = even + n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp08yrv9pa_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp08yrv9pa_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n < 10 {\n        return false\n    }\n    if n < 100 {\n        return n % 11 == 0\n    }\n    if n < 1000 {\n        return (n % 100) % 11 == 0\n    }\n    if n < 10000 {\n        return ((n % 1000) % 100) % 11 == 0\n    }\n    if n < 100000 {\n        return (((n % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000 {\n        return ((((n % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000 {\n        return (((((n % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 100000000 {\n        return ((((((n % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000000 {\n        return (((((((n % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000000 {\n        return ((((((((n % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 100000000000 {\n        return (((((((((n % 10000000000) % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 1000000000000 {\n        return ((((((((((n % 100000000000) % 10000000000) % 1000000000) % 100000000) % 10000000) % 1000000) % 100000) % 10000) % 1000) % 100) % 11 == 0\n    }\n    if n < 10000000000000 {\n        return (((((((((((n % 10000000000\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122617,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj2x996q2_test.go:56:42: expected ')', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n        odd += n % 10\n    }\n    return odd == even\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return is_Diff(odd - even)\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517232,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp_p73mcsv_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    odd := n % 10\n    even := 0\n    for n > 0 {\n        n = n / 10\n        even += n % 10\n        n = n / 10\n    }\n    return (odd - even) % 11 == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "--- FAIL: TestIs_Diff (0.00s)\n    --- FAIL: TestIs_Diff/test_num__1 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Diff/test_num__2 (0.00s)\n        tmp4msmdu4m_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    var odd, even int\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122618,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package is_Diff_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find whether a number is divisible by 11.\nfunc is_Diff(n int) bool {\n    if n < 10 {\n        return false\n    }\n    odd := 0\n    even := 0\n    for n > 0 {\n        odd += n % 10\n        n /= 10\n        even += n % 10\n        n /= 10\n    }\n    return odd - even == 0\n}\n\nfunc TestIs_Diff(t *testing.T) {\n  candidate := is_Diff\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12345), expected: false },\n     { actual: candidate(1212112), expected: true },\n     { actual: candidate(1212), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122614,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}