{
  "name": "mbpp_252_convert",
  "language": "go_test.go",
  "prompt": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 1; i <= numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    result = append(result, numbers)\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpy_f793ds_test.go:30: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpy_f793ds_test.go:30: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpy_f793ds_test.go:30: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 1; i <= numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var results []interface{}\n    for i := 0; i < numbers; i++ {\n        var real, imaginary float64\n        fmt.Scanf(\"%f %f\", &real, &imaginary)\n        results = append(results, real, imaginary)\n    }\n    return results\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpvq3ywmau_test.go:34: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpvq3ywmau_test.go:34: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpvq3ywmau_test.go:34: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 1; i <= numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 1; i <= numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        var x, y int\n        fmt.Scan(&x, &y)\n        result = append(result, x, y)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpan1zu8f4_test.go:34: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0) %!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpan1zu8f4_test.go:34: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpan1zu8f4_test.go:34: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, complex(float64(i), float64(i)))\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(complex128=(0+0i))]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(complex128=(0+0i)) %!s(complex128=(1+1i)) %!s(complex128=(2+2i)) %!s(complex128=(3+3i))]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(complex128=(0+0i)) %!s(complex128=(1+1i)) %!s(complex128=(2+2i)) %!s(complex128=(3+3i)) %!s(complex128=(4+4i))]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var polar []interface{}\n    for i := 0; i < numbers; i++ {\n        polar = append(polar, i)\n    }\n    return polar\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp3ci72_jx_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp3ci72_jx_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp3ci72_jx_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{numbers, numbers}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp5zm7n9xj_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp5zm7n9xj_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=4) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp5zm7n9xj_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 1; i <= numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=1)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp8w1mkhy4_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var results []interface{}\n    for i := 0; i < numbers; i++ {\n        results = append(results, i)\n    }\n    return results\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var results []interface{}\n    for i := 0; i < numbers; i++ {\n        results = append(results, i)\n    }\n    return results\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpz1w1j398_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, complex(float64(i), float64(i)))\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(complex128=(0+0i))]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(complex128=(0+0i)) %!s(complex128=(1+1i)) %!s(complex128=(2+2i)) %!s(complex128=(3+3i))]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpf3z5aqqc_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(complex128=(0+0i)) %!s(complex128=(1+1i)) %!s(complex128=(2+2i)) %!s(complex128=(3+3i)) %!s(complex128=(4+4i))]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        var number float64\n        fmt.Scan(&number)\n        result = append(result, number)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123841,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpfw9pc3zo_test.go:34: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(float64=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpfw9pc3zo_test.go:34: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpfw9pc3zo_test.go:34: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0) %!s(float64=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    return []interface{}{}\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=1) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=4) %!s(float64=0)]', got '[]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmpw1bplq_p_test.go:28: expected '[%!s(float64=5) %!s(float64=0)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package convert_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to convert complex numbers to polar coordinates.\nfunc convert(numbers int) []interface{} {\n    var result []interface{}\n    for i := 0; i < numbers; i++ {\n        result = append(result, i)\n    }\n    return result\n}\n\nfunc TestConvert(t *testing.T) {\n  candidate := convert\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected: []interface{}{1.0, 0.0} },\n     { actual: candidate(4), expected: []interface{}{4.0, 0.0} },\n     { actual: candidate(5), expected: []interface{}{5.0, 0.0} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510553,
      "stdout": "--- FAIL: TestConvert (0.00s)\n    --- FAIL: TestConvert/test_num__0 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=1) %!s(float64=0)]', got '[%!s(int=0)]'\n    --- FAIL: TestConvert/test_num__1 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=4) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestConvert/test_num__2 (0.00s)\n        tmp999429xo_test.go:32: expected '[%!s(float64=5) %!s(float64=0)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}