{
  "name": "mbpp_141_pancake_sort",
  "language": "go_test.go",
  "prompt": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := find_max_index(nums[:i])\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9bowi18t_test.go:11:22: undefined: find_max_index\n/tmp/tmp9bowi18t_test.go:13:13: undefined: flip\n/tmp/tmp9bowi18t_test.go:14:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsj8eu80a_test.go:18:13: undefined: flip\n/tmp/tmpsj8eu80a_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqqt0169_test.go:17:16: undefined: flip\n/tmp/tmpiqqt0169_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj42cr1yf_test.go:17:16: undefined: flip\n/tmp/tmpj42cr1yf_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index + 1)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk4vb1n21_test.go:17:16: undefined: flip\n/tmp/tmpk4vb1n21_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpebcn32g7_test.go:17:9: undefined: flip\n/tmp/tmpebcn32g7_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1k0s2e06_test.go:17:16: undefined: flip\n/tmp/tmp1k0s2e06_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdb2saow6_test.go:18:13: undefined: flip\n/tmp/tmpdb2saow6_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpukh2ncua_test.go:17:9: undefined: flip\n/tmp/tmpukh2ncua_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums)-1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfz3pnb9e_test.go:18:13: undefined: flip\n/tmp/tmpfz3pnb9e_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwgocw8t3_test.go:18:13: undefined: flip\n/tmp/tmpwgocw8t3_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07clbod8_test.go:17:9: undefined: flip\n/tmp/tmp07clbod8_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwa9zxt7h_test.go:17:9: undefined: flip\n/tmp/tmpwa9zxt7h_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptguparyt_test.go:17:9: undefined: flip\n/tmp/tmptguparyt_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 1; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wzibnyw_test.go:18:13: undefined: flip\n/tmp/tmp6wzibnyw_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := 0; i < len(nums); i++ {\n        max_index := 0\n        for j := 0; j < len(nums) - i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != len(nums) - i - 1 {\n            flip(nums, max_index)\n            flip(nums, len(nums) - i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpadvdglrp_test.go:18:13: undefined: flip\n/tmp/tmpadvdglrp_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyey3t04e_test.go:17:9: undefined: flip\n/tmp/tmpyey3t04e_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj42cr1yf_test.go:17:16: undefined: flip\n/tmp/tmpj42cr1yf_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ckyhnz0_test.go:17:9: undefined: flip\n/tmp/tmp7ckyhnz0_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj42cr1yf_test.go:17:16: undefined: flip\n/tmp/tmpj42cr1yf_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_twf78ta_test.go:18:13: undefined: flip\n/tmp/tmp_twf78ta_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07clbod8_test.go:17:9: undefined: flip\n/tmp/tmp07clbod8_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3uy4n2d2_test.go:17:16: undefined: flip\n/tmp/tmp3uy4n2d2_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbto4a_7c_test.go:17:9: undefined: flip\n/tmp/tmpbto4a_7c_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsj8eu80a_test.go:18:13: undefined: flip\n/tmp/tmpsj8eu80a_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqb5byxwk_test.go:17:16: undefined: flip\n/tmp/tmpqb5byxwk_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpckzkdxl6_test.go:20:20: undefined: flip\n/tmp/tmpckzkdxl6_test.go:21:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpukh2ncua_test.go:17:9: undefined: flip\n/tmp/tmpukh2ncua_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := find_max_index(nums, i)\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw80ma1c7_test.go:11:22: undefined: find_max_index\n/tmp/tmpw80ma1c7_test.go:13:13: undefined: flip\n/tmp/tmpw80ma1c7_test.go:14:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbto4a_7c_test.go:17:9: undefined: flip\n/tmp/tmpbto4a_7c_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhs2hbic_test.go:17:9: undefined: flip\n/tmp/tmpmhs2hbic_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqqt0169_test.go:17:16: undefined: flip\n/tmp/tmpiqqt0169_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index == i - 1 {\n            continue\n        }\n        if max_index != 0 {\n            nums = flip(nums, max_index + 1)\n        }\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl6ouvzca_test.go:21:20: undefined: flip\n/tmp/tmpl6ouvzca_test.go:23:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := find_max_index(nums, i)\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpty09jx_l_test.go:11:22: undefined: find_max_index\n/tmp/tmpty09jx_l_test.go:12:9: undefined: flip\n/tmp/tmpty09jx_l_test.go:13:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ckyhnz0_test.go:17:9: undefined: flip\n/tmp/tmp7ckyhnz0_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhs2hbic_test.go:17:9: undefined: flip\n/tmp/tmpmhs2hbic_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := 0; i < len(nums); i++ {\n        max_index := 0\n        for j := 0; j < len(nums) - i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index == len(nums) - i - 1 {\n            continue\n        }\n        if max_index != 0 {\n            nums = flip(nums, max_index)\n        }\n        nums = flip(nums, len(nums) - i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnsanlse3_test.go:21:20: undefined: flip\n/tmp/tmpnsanlse3_test.go:23:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmf1f3f3u_test.go:17:9: undefined: flip\n/tmp/tmpmf1f3f3u_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaowthsoj_test.go:17:9: undefined: flip\n/tmp/tmpaowthsoj_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0rihm88g_test.go:17:16: undefined: flip\n/tmp/tmp0rihm88g_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := i\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8nnukuho_test.go:18:20: undefined: flip\n/tmp/tmp8nnukuho_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums)-1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5hvoe_7d_test.go:17:9: undefined: flip\n/tmp/tmp5hvoe_7d_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := i\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnk7szly5_test.go:17:16: undefined: flip\n/tmp/tmpnk7szly5_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqqt0169_test.go:17:16: undefined: flip\n/tmp/tmpiqqt0169_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwgocw8t3_test.go:18:13: undefined: flip\n/tmp/tmpwgocw8t3_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwgocw8t3_test.go:18:13: undefined: flip\n/tmp/tmpwgocw8t3_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyey3t04e_test.go:17:9: undefined: flip\n/tmp/tmpyey3t04e_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpckzkdxl6_test.go:20:20: undefined: flip\n/tmp/tmpckzkdxl6_test.go:21:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppf4ajl3f_test.go:17:16: undefined: flip\n/tmp/tmppf4ajl3f_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhs2hbic_test.go:17:9: undefined: flip\n/tmp/tmpmhs2hbic_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsj8eu80a_test.go:18:13: undefined: flip\n/tmp/tmpsj8eu80a_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmf1f3f3u_test.go:17:9: undefined: flip\n/tmp/tmpmf1f3f3u_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmf1f3f3u_test.go:17:9: undefined: flip\n/tmp/tmpmf1f3f3u_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := nums[0]\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > max {\n                max = nums[j]\n                max_index = j\n            }\n        }\n        if max_index != i {\n            if max_index != 0 {\n                nums = flip(nums, max_index)\n            }\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8tkk2evk_test.go:21:24: undefined: flip\n/tmp/tmp8tkk2evk_test.go:23:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa_nostu9_test.go:17:16: undefined: flip\n/tmp/tmpa_nostu9_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmf1f3f3u_test.go:17:9: undefined: flip\n/tmp/tmpmf1f3f3u_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := i\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8nnukuho_test.go:18:20: undefined: flip\n/tmp/tmp8nnukuho_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyey3t04e_test.go:17:9: undefined: flip\n/tmp/tmpyey3t04e_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0u83p61_test.go:17:9: undefined: flip\n/tmp/tmpr0u83p61_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaowthsoj_test.go:17:9: undefined: flip\n/tmp/tmpaowthsoj_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsj8eu80a_test.go:18:13: undefined: flip\n/tmp/tmpsj8eu80a_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpebcn32g7_test.go:17:9: undefined: flip\n/tmp/tmpebcn32g7_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppnei_tue_test.go:17:9: undefined: flip\n/tmp/tmppnei_tue_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1k0s2e06_test.go:17:16: undefined: flip\n/tmp/tmp1k0s2e06_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            flip(nums, max_index)\n            flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_twf78ta_test.go:18:13: undefined: flip\n/tmp/tmp_twf78ta_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbto4a_7c_test.go:17:9: undefined: flip\n/tmp/tmpbto4a_7c_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbto4a_7c_test.go:17:9: undefined: flip\n/tmp/tmpbto4a_7c_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxxf6g9cc_test.go:17:16: undefined: flip\n/tmp/tmpxxf6g9cc_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            nums = flip(nums, max_index + 1)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4c1w3gn4_test.go:18:20: undefined: flip\n/tmp/tmp4c1w3gn4_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        reverse(nums, max)\n        reverse(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprdzoig65_test.go:17:9: undefined: reverse\n/tmp/tmprdzoig65_test.go:18:9: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i - 1 {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i - 1)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn0mfm94s_test.go:18:20: undefined: flip\n/tmp/tmpn0mfm94s_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_idx := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_idx] {\n                max_idx = j\n            }\n        }\n        if max_idx != i {\n            flip(nums, max_idx)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv1yrtepu_test.go:18:13: undefined: flip\n/tmp/tmpv1yrtepu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqb5byxwk_test.go:17:16: undefined: flip\n/tmp/tmpqb5byxwk_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhs2hbic_test.go:17:9: undefined: flip\n/tmp/tmpmhs2hbic_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwg_6u0ii_test.go:17:9: undefined: flip\n/tmp/tmpwg_6u0ii_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0u83p61_test.go:17:9: undefined: flip\n/tmp/tmpr0u83p61_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i - 1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9f5vpv2_test.go:17:9: undefined: flip\n/tmp/tmpp9f5vpv2_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max_index := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmhs2hbic_test.go:17:9: undefined: flip\n/tmp/tmpmhs2hbic_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps4s2i31h_test.go:18:20: undefined: flip\n/tmp/tmps4s2i31h_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        nums = flip(nums, max)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqhc0ou__test.go:17:16: undefined: flip\n/tmp/tmpbqhc0ou__test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 0; i-- {\n        max := 0\n        for j := 0; j < i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr9wn829g_test.go:17:9: undefined: flip\n/tmp/tmpr9wn829g_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprbc1hjp0_test.go:17:9: undefined: flip\n/tmp/tmprbc1hjp0_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums); i > 1; i-- {\n        max_index := 0\n        for j := 1; j < i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i-1)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124232,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp74uero1w_test.go:17:16: undefined: flip\n/tmp/tmp74uero1w_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5spo2my2_test.go:18:13: undefined: flip\n/tmp/tmp5spo2my2_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        nums = flip(nums, max_index)\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiqqt0169_test.go:17:16: undefined: flip\n/tmp/tmpiqqt0169_test.go:18:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max != i {\n            flip(nums, max)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwexk4cpu_test.go:18:13: undefined: flip\n/tmp/tmpwexk4cpu_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i >= 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            nums = flip(nums, max_index)\n            nums = flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124233,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx3k5dqrx_test.go:18:20: undefined: flip\n/tmp/tmpx3k5dqrx_test.go:19:20: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 0; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        if max_index != i {\n            flip(nums, max_index)\n            flip(nums, i)\n        }\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509868,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsj8eu80a_test.go:18:13: undefined: flip\n/tmp/tmpsj8eu80a_test.go:19:13: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        if max == i {\n            continue\n        }\n        if max != 0 {\n            nums = flip(nums, max)\n        }\n        nums = flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124233,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2y2ftyau_test.go:21:20: undefined: flip\n/tmp/tmp2y2ftyau_test.go:23:16: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max_index := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max_index] {\n                max_index = j\n            }\n        }\n        flip(nums, max_index)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoky6bsf1_test.go:17:9: undefined: flip\n/tmp/tmpoky6bsf1_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package pancake_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort a list of elements.\nfunc pancake_sort(nums []int) []int {\n    for i := len(nums) - 1; i > 0; i-- {\n        max := 0\n        for j := 1; j <= i; j++ {\n            if nums[j] > nums[max] {\n                max = j\n            }\n        }\n        flip(nums, max)\n        flip(nums, i)\n    }\n    return nums\n}\n\nfunc TestPancake_Sort(t *testing.T) {\n  candidate := pancake_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 79, 25, 38, 69}), expected: []int{15, 25, 38, 69, 79} },\n     { actual: candidate([]int{98, 12, 54, 36, 85}), expected: []int{12, 36, 54, 85, 98} },\n     { actual: candidate([]int{41, 42, 32, 12, 23}), expected: []int{12, 23, 32, 41, 42} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509866,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnu4a7bwp_test.go:17:9: undefined: flip\n/tmp/tmpnu4a7bwp_test.go:18:9: undefined: flip\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}