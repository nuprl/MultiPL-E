{
  "name": "mbpp_744_check_none",
  "language": "go_test.go",
  "prompt": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpcaqyen_y_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpcaqyen_y_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpwozdvbm__test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpwozdvbm__test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, value := range test_tup.([]interface{}) {\n            if check_none(value) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, value := range test_tup.(map[string]interface{}) {\n            if check_none(value) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpc78ior5s_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpc78ior5s_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcfn8tmvd_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        return test_tup == nil\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpd62q2bn7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpd62q2bn7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[interface{}]interface{}):\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"none\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp61pkjoda_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp61pkjoda_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmph05tunco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmph05tunco_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpwq7yi7an_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpwq7yi7an_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp_bcjmlum_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp_bcjmlum_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return false\n    case (int):\n        return false\n    case (float64):\n        return false\n    case (bool):\n        return false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"none\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp9ytu9lkm_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp9ytu9lkm_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (nil):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpf52pvcnu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpf52pvcnu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprmmlhjbo_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp41xwn2af_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp41xwn2af_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp8_ktsfu6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp8_ktsfu6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (bool):\n        return test_tup == false\n    case (float64):\n        return test_tup == 0.0\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpig9s7ciy_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpig9s7ciy_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmc07lnzo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmc07lnzo_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    case (int):\n        if test_tup.(int) == -1 {\n            return true\n        }\n    case (float64):\n        if test_tup.(float64) == -1.0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpx7irzkmj_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpx7irzkmj_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"none\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmphuird10r_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmphuird10r_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n        return false\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n        return false\n    default:\n        fmt.Println(\"Unknown type\")\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "Unknown type\nUnknown type\n--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp7rs7oyp4_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp7rs7oyp4_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp3xlyzw4u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp3xlyzw4u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprmmlhjbo_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case nil:\n        return true\n    case string:\n        if test_tup.(string) == \"\" {\n            return true\n        }\n    case int:\n        if test_tup.(int) == 0 {\n            return true\n        }\n    case float64:\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n    case bool:\n        if test_tup.(bool) == false {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpx4h7x95u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpx4h7x95u_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpiqvn5lxo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpiqvn5lxo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n        return false\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp5arnlsoi_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp5arnlsoi_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string, string, string):\n        return false\n    case (string, string, string, string):\n        return false\n    case (string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwiyb7iq7_test.go:11:17: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    case (nil):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n        return false\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp0itl11gq_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp0itl11gq_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpxin4_6t5_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpxin4_6t5_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"none\"\n    case (int):\n        return test_tup == -1\n    case (float64):\n        return test_tup == -1.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp36hqj5no_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp36hqj5no_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case []interface{}:\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpf52pvcnu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpf52pvcnu_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcfn8tmvd_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string, string, string):\n        return false\n    case (string, string, string, string):\n        return false\n    case (string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwiyb7iq7_test.go:11:17: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        return test_tup == nil\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpwfslo23t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpwfslo23t_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case []interface{}:\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case map[string]interface{}:\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case nil:\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpi__8cdcp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpi__8cdcp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, string):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int):\n        return false\n    case (string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp59c4q3uw_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    case (interface{}):\n        return test_tup == nil\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpjju1pmim_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpjju1pmim_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"none\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n        return false\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpl6dpiefz_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpl6dpiefz_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    case (bool):\n        return test_tup.(bool) == false\n    case (nil):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprmmlhjbo_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"none\"\n    case (int):\n        return test_tup == -1\n    case (float64):\n        return test_tup == -1.0\n    case (bool):\n        return test_tup == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpkziunzj3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpkziunzj3_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]string):\n        return len(test_tup.([]string)) == 0\n    case ([]int):\n        return len(test_tup.([]int)) == 0\n    case ([]float64):\n        return len(test_tup.([]float64)) == 0\n    case ([]bool):\n        return len(test_tup.([]bool)) == 0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpcwhg8v7j_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpcwhg8v7j_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprmmlhjbo_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpr6sok89b_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, string):\n        return false\n    case (string, int):\n        return false\n    case (string, string):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2trktvfa_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float32):\n        return test_tup == 0.0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        return len(test_tup.([]interface{})) == 0\n    case (map[string]interface{}):\n        return len(test_tup.(map[string]interface{})) == 0\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpnlu0nbqt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpnlu0nbqt_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        tup := test_tup.(int, int, int)\n        if tup == (0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int):\n        tup := test_tup.(int, int, int, int)\n        if tup == (0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int)\n        if tup == (0, 0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int, int)\n        if tup == (0, 0, 0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int, int, int)\n        if tup == (0, 0, 0, 0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int, int, int, int)\n        if tup == (0, 0, 0, 0, 0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int, int, int, int, int)\n        if tup == (0, 0, 0, 0, 0, 0, 0, 0, 0) {\n            return true\n        }\n    case (int, int, int, int, int, int, int, int, int, int):\n        tup := test_tup.(int, int, int, int, int, int,\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpu1dwf200_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprmmlhjbo_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcfn8tmvd_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpt03mum_r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpt03mum_r_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        return test_tup == nil\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmppnem7ijc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmppnem7ijc_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpwbout71u_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpwbout71u_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string, string, string):\n        return false\n    case (string, string, string, string):\n        return false\n    case (string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string):\n        return false\n    case (string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string, string\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwiyb7iq7_test.go:11:17: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"none\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpxjxe2wq__test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpxjxe2wq__test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return true\n    case (int, string, int):\n        return true\n    case (int, string, string):\n        return true\n    case (string, int, int):\n        return true\n    case (string, int, string):\n        return true\n    case (string, string, int):\n        return true\n    case (string, string, string):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1x_bzjfv_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, string):\n        return false\n    case (int, int, string, string):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, string):\n        return false\n    case (int, int, int, string, string):\n        return false\n    case (int, int, string, string, string):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, string, string):\n        return false\n    case (int, int, int, string, string, string):\n        return false\n    case (int, int, string, string, string, string):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, string, string):\n        return false\n    case (int, int, int, int, string, string, string):\n        return false\n    case (int, int, int, string, string, string, string):\n        return false\n    case (int, int, string, string, string, string, string):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, string):\n        return false\n    case (int, int, int, int, int, int, string, string):\n        return false\n    case (int, int, int, int, int, string, string, string):\n        return false\n    case (int, int, int, int, string, string, string, string):\n        return false\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpeygzfhwp_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (nil):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpr6sok89b_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case nil:\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwb_idanu_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    case ([]string):\n        if len(test_tup.([]string)) == 0 {\n            return true\n        }\n    case ([]int):\n        if len(test_tup.([]int)) == 0 {\n            return true\n        }\n    case ([]float64):\n        if len(test_tup.([]float64)) == 0 {\n            return true\n        }\n    case ([]bool):\n        if len(test_tup.([]bool)) == 0 {\n            return true\n        }\n    case (map[string]string):\n        if len(test_tup.(map[string]string)) == 0 {\n            return true\n        }\n    case (map[string]int):\n        if len(test_tup.(map[string]int)) == 0 {\n            return true\n        }\n    case (map[string]float64):\n        if len(test_tup.(map[string]float64)) == 0 {\n            return true\n        }\n    case (map[string]bool):\n        if len(test_tup.(map[string]bool)) == 0 {\n            return true\n        }\n    case (map[int]string):\n        if len(test_tup.(map[int]string)) == 0 {\n            return true\n        }\n    case (map[int]int):\n        if len(test_tup.(map[int]int)) == 0 {\n            return true\n        }\n    case (map[int]float64):\n        if len(test_tup.(map[int]float64)) == 0 {\n            return true\n        }\n    case (map[int]bool):\n        if len(test_tup.(map[int]bool)) == 0\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgn10qu_p_test.go:73:6: expected '(', found TestCheck_None\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvqzcfp4e_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    case ([]interface{}):\n        if len(test_tup.([]interface{})) == 0 {\n            return true\n        }\n    case (map[string]interface{}):\n        if len(test_tup.(map[string]interface{})) == 0 {\n            return true\n        }\n    case (nil):\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp7kf1sdjm_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp7kf1sdjm_test.go:56: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpncbc4aez_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpncbc4aez_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"none\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp35d087xc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp35d087xc_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if v == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, item := range test_tup.([]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, item := range test_tup.(map[string]interface{}) {\n            if check_none(item) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n        return false\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp91sdd7ab_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp91sdd7ab_test.go:65: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpzvn77kj7_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpzvn77kj7_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmphc0er0ms_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmphc0er0ms_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp11aq8795_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp11aq8795_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcfn8tmvd_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case string:\n        return test_tup.(string) == \"none\"\n    case int:\n        return test_tup.(int) == -1\n    case float64:\n        return test_tup.(float64) == -1.0\n    case bool:\n        return test_tup.(bool) == false\n    case []string:\n        for _, val := range test_tup.([]string) {\n            if val == \"none\" {\n                return true\n            }\n        }\n        return false\n    case []int:\n        for _, val := range test_tup.([]int) {\n            if val == -1 {\n                return true\n            }\n        }\n        return false\n    case []float64:\n        for _, val := range test_tup.([]float64) {\n            if val == -1.0 {\n                return true\n            }\n        }\n        return false\n    case []bool:\n        for _, val := range test_tup.([]bool) {\n            if val == false {\n                return true\n            }\n        }\n        return false\n    default:\n        fmt.Println(\"Invalid type\")\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "Invalid type\nInvalid type\nInvalid type\n--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpypq8cze__test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpypq8cze__test.go:68: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, string):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int):\n        return false\n    case (string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp59c4q3uw_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    case (nil):\n        return true\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, string):\n        return false\n    case (string, int):\n        return false\n    case (string, string):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2trktvfa_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string, string):\n        tup := test_tup.(string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" {\n            return true\n        }\n    case (string, string, string):\n        tup := test_tup.(string, string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" || tup[2] == \"none\" {\n            return true\n        }\n    case (string, string, string, string):\n        tup := test_tup.(string, string, string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" || tup[2] == \"none\" || tup[3] == \"none\" {\n            return true\n        }\n    case (string, string, string, string, string):\n        tup := test_tup.(string, string, string, string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" || tup[2] == \"none\" || tup[3] == \"none\" || tup[4] == \"none\" {\n            return true\n        }\n    case (string, string, string, string, string, string):\n        tup := test_tup.(string, string, string, string, string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" || tup[2] == \"none\" || tup[3] == \"none\" || tup[4] == \"none\" || tup[5] == \"none\" {\n            return true\n        }\n    case (string, string, string, string, string, string, string):\n        tup := test_tup.(string, string, string, string, string, string, string)\n        if tup[0] == \"none\" || tup[1] == \"none\" || tup[2] == \"none\" || tup[3] == \"none\" || tup[4] == \"none\" || tup[5] ==\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwykg9ihe_test.go:11:17: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return false\n    case (int):\n        return false\n    case (float64):\n        return false\n    case (bool):\n        return false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return true\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpqvanets__test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpqvanets__test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpvbdxwz8g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpsximf1uq_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        if test_tup == \"none\" {\n            return true\n        }\n    case (int):\n        if test_tup == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup == false {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp30bnn2ja_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp30bnn2ja_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp11aq8795_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp11aq8795_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp3xlyzw4u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp3xlyzw4u_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[interface{}]interface{}):\n        for _, val := range test_tup.(map[interface{}]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123958,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpiqvn5lxo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpiqvn5lxo_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"None\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpkcfuk_t0_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpdiv_5e5n_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpgwvfi047_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, string):\n        return false\n    case (int, int, bool):\n        return false\n    case (int, int, float64):\n        return false\n    case (int, string, int):\n        return false\n    case (int, string, string):\n        return false\n    case (int, string, bool):\n        return false\n    case (int, string, float64):\n        return false\n    case (int, bool, int):\n        return false\n    case (int, bool, string):\n        return false\n    case (int, bool, bool):\n        return false\n    case (int, bool, float64):\n        return false\n    case (int, float64, int):\n        return false\n    case (int, float64, string):\n        return false\n    case (int, float64, bool):\n        return false\n    case (int, float64, float64):\n        return false\n    case (string, int, int):\n        return false\n    case (string, int, string):\n        return false\n    case (string, int, bool):\n        return false\n    case (string, int, float64):\n        return false\n    case (string, string, int):\n        return false\n    case (string, string, string):\n        return false\n    case (string, string, bool):\n        return false\n    case (string, string, float64):\n        return false\n    case (string, bool, int):\n        return false\n    case (string, bool, string):\n        return false\n    case (string, bool, bool):\n        return false\n    case (string, bool, float64):\n        return false\n    case (string, float64, int):\n        return false\n    case (string, float64, string):\n        return false\n    case (string, float64, bool):\n        return false\n    case (string, float64, float64):\n        return false\n    case (bool, int, int):\n        return false\n    case (bool, int, string):\n        return false\n    case (bool, int, bool\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123960,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpur02dsdu_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (string):\n        return test_tup == \"\"\n    case (int):\n        return test_tup == 0\n    case (float64):\n        return test_tup == 0.0\n    case (bool):\n        return test_tup == false\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp1csgls9b_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        if test_tup.(string) == \"none\" {\n            return true\n        }\n        return false\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmp2_8i0y_0_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmp2_8i0y_0_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int):\n        return false\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123956,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnp3v5y6h_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[interface{}]interface{}):\n        for _, v := range test_tup.(map[interface{}]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    case (int):\n        if test_tup.(int) == 0 {\n            return true\n        }\n    case (float64):\n        if test_tup.(float64) == 0.0 {\n            return true\n        }\n    case (bool):\n        if test_tup.(bool) == false {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpzhgxy79m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpzhgxy79m_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n    case (string):\n        if test_tup.(string) == \"None\" {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpyzlpugyg_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if val == nil {\n                return true\n            }\n        }\n        return false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == -1\n    case (float64):\n        return test_tup.(float64) == -1.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123959,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpi__8cdcp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpi__8cdcp_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        tup := test_tup.([]interface{})\n        for _, val := range tup {\n            if val == nil {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        tup := test_tup.(map[string]interface{})\n        for _, val := range tup {\n            if val == nil {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, v := range test_tup.([]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (map[string]interface{}):\n        for _, v := range test_tup.(map[string]interface{}) {\n            if check_none(v) {\n                return true\n            }\n        }\n        return false\n    case (string):\n        return test_tup.(string) == \"none\"\n    case (int):\n        return test_tup.(int) == 0\n    case (float64):\n        return test_tup.(float64) == 0.0\n    case (bool):\n        return test_tup.(bool) == false\n    default:\n        return false\n    }\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123961,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpdkgc0wai_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpdkgc0wai_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case (int, int, int):\n        return false\n    case (int, int, int, int):\n        return false\n    case (int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int):\n        return false\n    case (int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int, int\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510578,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpvrhgoe7s_test.go:11:14: expected ')', found ','\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package check_none_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given tuple has any none value or not.\nfunc check_none(test_tup interface{}) bool {\n    switch test_tup.(type) {\n    case ([]interface{}):\n        for _, val := range test_tup.([]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (map[string]interface{}):\n        for _, val := range test_tup.(map[string]interface{}) {\n            if check_none(val) {\n                return true\n            }\n        }\n    case (interface{}):\n        if test_tup == nil {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_None(t *testing.T) {\n  candidate := check_none\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5, 6, nil}), expected: true },\n     { actual: candidate([]interface{}{7, 8, 9, 11, 14}), expected: false },\n     { actual: candidate([]interface{}{1, 2, 3, 4, nil}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123957,
      "stdout": "--- FAIL: TestCheck_None (0.00s)\n    --- FAIL: TestCheck_None/test_num__0 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_None/test_num__2 (0.00s)\n        tmpmm9ijj37_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}