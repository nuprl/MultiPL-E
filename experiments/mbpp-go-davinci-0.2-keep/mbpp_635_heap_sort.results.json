{
  "name": "mbpp_635_heap_sort",
  "language": "go_test.go",
  "prompt": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the given list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap = swap(heap, 0, len(heap)-1)\n\n    // Rebuild the heap from the first element to the last element.\n    for i := len(heap)-1; i > 0; i-- {\n        heap = max_heapify(heap, 0, i)\n        heap = swap(heap, 0, i-1)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjym35g__test.go:11:13: undefined: build_max_heap\n/tmp/tmpyjym35g__test.go:14:12: undefined: swap\n/tmp/tmpyjym35g__test.go:18:16: undefined: max_heapify\n/tmp/tmpyjym35g__test.go:19:16: undefined: swap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp2vxv2rj_test.go:11:5: undefined: build_heap\n/tmp/tmpp2vxv2rj_test.go:16:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxo5145qz_test.go:12:20: undefined: heapify\n/tmp/tmpxo5145qz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt19vvus3_test.go:11:13: undefined: build_max_heap\n/tmp/tmpt19vvus3_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Pop the last element of the heap and heapify the heap.\n    // Repeat the above two steps until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafoa8uvx_test.go:11:13: undefined: build_max_heap\n/tmp/tmpafoa8uvx_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwte99c1t_test.go:12:20: undefined: heapify\n/tmp/tmpwte99c1t_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7w6qt9bh_test.go:12:20: undefined: heapify\n/tmp/tmp7w6qt9bh_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements in the list.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the list.\n    heap = heap[:len(heap)-1]\n\n    // Restore the heap.\n    heap = max_heapify(heap, 0)\n\n    // Repeat the process until the list is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap), iterable[len(iterable)-1])\n    }\n\n    return []int{}\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4j455w8p_test.go:11:13: undefined: build_max_heap\n/tmp/tmp4j455w8p_test.go:20:12: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7vlq_miz_test.go:12:20: undefined: heapify\n/tmp/tmp7vlq_miz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements and heapify the reduced heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zzhlctn_test.go:12:20: undefined: heapify\n/tmp/tmp4zzhlctn_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the input data.\n    var heap_size = len(iterable) - 1\n    for i := (heap_size - 1) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, heap_size)\n    }\n\n    // Extract elements from the heap one by one.\n    for i := heap_size; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap_size--\n        iterable = max_heapify(iterable, 0, heap_size)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyr7l0gl4_test.go:13:20: undefined: max_heapify\n/tmp/tmpyr7l0gl4_test.go:20:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heapify(iterable)\n    end := len(iterable) - 1\n    for end > 0 {\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end -= 1\n        sift_down(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa1yqw8yf_test.go:10:5: undefined: heapify\n/tmp/tmpa1yqw8yf_test.go:15:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[:end] is sorted).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqbjczqzy_test.go:13:9: undefined: heapify\n/tmp/tmpqbjczqzy_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap.swap(0, len(heap.iterable) - 1)\n\n    // Pop the last element from the heap.\n    heap.pop()\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap.iterable) > 0 {\n        heap.swap(0, len(heap.iterable) - 1)\n        heap.pop()\n    }\n\n    return heap.iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt4plwj1u_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap in array a so that largest value is at the root\n    n := len(iterable)\n    a := iterable\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(a, n, i)\n    }\n\n    // One by one extract elements\n    for i := n - 1; i >= 0; i-- {\n        // Move current root to end\n        a[0], a[i] = a[i], a[0]\n\n        // call max heapify on the reduced heap\n        heapify(a, i, 0)\n    }\n\n    return a\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxvo7wn6i_test.go:14:9: undefined: heapify\n/tmp/tmpxvo7wn6i_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        iterable = heapify(iterable, idx, len(iterable))\n    }\n\n    // Perform the following operations n times.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        // Swap the root of the heap with the last item of the heap.\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n\n        // Re-heapify the root of the heap.\n        iterable = heapify(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoqwqb2_6_test.go:13:20: undefined: heapify\n/tmp/tmpoqwqb2_6_test.go:22:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Swap the root with the last element and heapify the root.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbgfv9jp2_test.go:12:20: undefined: heapify\n/tmp/tmpbgfv9jp2_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The following are equivalent:\n    // heapify(x)\n    // heapify(x[:len(x)])\n    // heapify(x[:len(x)])\n    heapify(iterable)\n\n    // Pop the largest item from the heap, and add it to the end of the sorted list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd07gbg40_test.go:15:5: undefined: heapify\n/tmp/tmpd07gbg40_test.go:20:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first and last elements of the list.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Repeat the above two steps until the list is sorted.\n    for i := len(iterable) - 1; i > 0; i-- {\n        max_heapify(iterable, i)\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpluwqi5s9_test.go:11:5: undefined: build_max_heap\n/tmp/tmpluwqi5s9_test.go:18:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the input data.\n    var heap = build_max_heap(iterable)\n\n    // Repeatedly extract the maximum element from the heap and put it at the\n    // end of the sorted list.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Move the current root to the end.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Put the heap back in max-heap order.\n        heap = max_heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpda3cvo7n_test.go:11:16: undefined: build_max_heap\n/tmp/tmpda3cvo7n_test.go:20:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Convert the iterable into a heap.\n    heap := make([]int, 0)\n    for _, item := range iterable {\n        heap = append(heap, item)\n        heap = heapify(heap)\n    }\n\n    // Pop the heap and append the popped item to the end of the list.\n    sorted := make([]int, 0)\n    for len(heap) > 0 {\n        heap, item := pop(heap)\n        sorted = append(sorted, item)\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk1ho8heb_test.go:14:16: undefined: heapify\n/tmp/tmpk1ho8heb_test.go:20:23: undefined: pop\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaekllixj_test.go:12:20: undefined: heapify\n/tmp/tmpaekllixj_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heapify(iterable)\n\n    // Swap the first and last elements.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        // Restore the heap property.\n        sift_down(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt6te6bkz_test.go:11:5: undefined: heapify\n/tmp/tmpt6te6bkz_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable)/2 - 1; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // Perform a series of extractions, each of which decreases the size of the heap by one.\n    // The extracted item is stored at the end of the heap, starting with the end of the array.\n    for idx := len(iterable) - 1; idx >= 0; idx-- {\n        // Move the current root to the end.\n        iterable[0], iterable[idx] = iterable[idx], iterable[0]\n\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, idx)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_9c1pz__test.go:13:9: undefined: heapify\n/tmp/tmps_9c1pz__test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3xz3c0th_test.go:12:20: undefined: heapify\n/tmp/tmp3xz3c0th_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Repeat until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root element to the correct position.\n        heap = sift_down(heap, 0)\n\n        // Swap the first and last elements.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap) - 1]\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm1r21zoq_test.go:11:13: undefined: build_max_heap\n/tmp/tmpm1r21zoq_test.go:22:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // call max heapify on the reduced heap\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuv7e7mpf_test.go:12:9: undefined: heapify\n/tmp/tmpuv7e7mpf_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n    // Sift down the new root.\n    heap = sift_down(heap, 0)\n    // Repeat until the heap is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap[:len(heap)-1]), heap[len(heap)-1])\n    }\n    return []int{}\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp19hg5nap_test.go:11:13: undefined: build_max_heap\n/tmp/tmp19hg5nap_test.go:17:12: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the root element to the proper place.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo8ab6srm_test.go:11:13: undefined: build_max_heap\n/tmp/tmpo8ab6srm_test.go:20:12: undefined: sift_down\n/tmp/tmpo8ab6srm_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa79f0rm__test.go:12:9: undefined: heapify\n/tmp/tmpa79f0rm__test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4slgr_pm_test.go:12:9: undefined: heapify\n/tmp/tmp4slgr_pm_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Rebuild the heap.\n        heap = max_heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg466uzf8_test.go:11:13: undefined: build_max_heap\n/tmp/tmpg466uzf8_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last element, then heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy7j67e2k_test.go:12:20: undefined: heapify\n/tmp/tmpy7j67e2k_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    sorted := make([]int, 0)\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvguny7ev_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // The heapify() function converts the list into a heap.\n    // The heap is a complete binary tree where each node is greater than its children.\n    // The heapify() function is called only once.\n    heapify(iterable)\n\n    // The sift_down() function moves the root of the heap to the end of the list.\n    // The sift_down() function is called n times.\n    for end := len(iterable) - 1; end > 0; end-- {\n        iterable[0], iterable[end] = iterable[end], iterable[0]\n        sift_down(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4ycr2qi6_test.go:13:5: undefined: heapify\n/tmp/tmp4ycr2qi6_test.go:19:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; {\n        // a[0] is the root and largest value. The swap moves it in front of the sorted elements.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // The heap size is reduced by one.\n        end--\n        // The swap ruined the heap property, so restore it.\n        heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8345wbsa_test.go:13:9: undefined: heapify\n/tmp/tmp8345wbsa_test.go:24:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphzo9cmhn_test.go:12:20: undefined: heapify\n/tmp/tmphzo9cmhn_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    length := len(iterable)\n    if length <= 1 {\n        return iterable\n    }\n\n    // Build the heap.\n    for i := length / 2 - 1; i >= 0; i-- {\n        heapify(iterable, length, i)\n    }\n\n    // Extract element from the heap.\n    for i := length - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgjwab6lf_test.go:17:9: undefined: heapify\n/tmp/tmpgjwab6lf_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Heapify the heap.\n    heap = heapify(heap)\n\n    // Repeat the above steps until the heap is empty.\n    if len(heap) > 1 {\n        heap = heap_sort(heap)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpovn1ubcc_test.go:11:13: undefined: build_max_heap\n/tmp/tmpovn1ubcc_test.go:20:12: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Swap the first and last element and heapify.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpju_gz0qq_test.go:12:20: undefined: heapify\n/tmp/tmpju_gz0qq_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements in the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqjyta6yj_test.go:11:13: undefined: build_max_heap\n/tmp/tmpqjyta6yj_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    heap.swap(0, len(heap.heap) - 1)\n\n    // Pop the last element of the heap.\n    heap.heap = heap.heap[:len(heap.heap) - 1]\n\n    // Heapify the heap.\n    heap.heapify(0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap.heap) > 0 {\n        heap.swap(0, len(heap.heap) - 1)\n        heap.heap = heap.heap[:len(heap.heap) - 1]\n        heap.heapify(0)\n    }\n\n    return heap.heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1vygslz1_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap and append it to the result.\n    // Repeat until the heap is empty.\n    result := make([]int, 0)\n    for heap.length > 0 {\n        result = append(result, heap.pop())\n    }\n\n    return result\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpygik8zm3_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Sort.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpradk8qxq_test.go:12:20: undefined: max_heapify\n/tmp/tmpradk8qxq_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz06thlfx_test.go:12:9: undefined: heapify\n/tmp/tmpz06thlfx_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8kpe9a2v_test.go:12:9: undefined: heapify\n/tmp/tmp8kpe9a2v_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Get the size of the heap.\n    heap_size := len(heap)\n\n    // Iterate over the heap.\n    for i := heap_size - 1; i >= 1; i-- {\n        // Swap the first element with the last element.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Decrement the heap size.\n        heap_size--\n\n        // Heapify the root element.\n        heap = max_heapify(heap, 0, heap_size)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpavdzdf3a_test.go:11:13: undefined: build_max_heap\n/tmp/tmpavdzdf3a_test.go:25:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.items) - 1)\n    // Pop the last element and put it at the end of the list.\n    heap.pop()\n    // Repeat the process until the heap is empty.\n    for len(heap.items) > 0 {\n        heap.swap(0, len(heap.items) - 1)\n        heap.pop()\n    }\n    return heap.items\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxnu_oej6_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuvih1dz2_test.go:12:20: undefined: heapify\n/tmp/tmpuvih1dz2_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the root with the last element.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6cg_cnab_test.go:12:20: undefined: heapify\n/tmp/tmp6cg_cnab_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpolul1ggw_test.go:12:9: undefined: heapify\n/tmp/tmpolul1ggw_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    build_max_heap(iterable)\n\n    // Swap the first and last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppqdb4fk0_test.go:11:5: undefined: build_max_heap\n/tmp/tmppqdb4fk0_test.go:16:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and insert it into the sorted list.\n    // Repeat until the heap is empty.\n    sorted := make([]int, 0)\n    for len(heap) > 0 {\n        sorted = append(sorted, heap[0])\n        heap[0] = heap[len(heap)-1]\n        heap = heap[:len(heap)-1]\n        heap = heapify(heap, 0)\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpecrr1gaa_test.go:11:13: undefined: build_heap\n/tmp/tmpecrr1gaa_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkwcqgz6r_test.go:12:20: undefined: heapify\n/tmp/tmpkwcqgz6r_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam8as720_test.go:12:9: undefined: heapify\n/tmp/tmpam8as720_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements and heapify the reduced list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfv8w6303_test.go:12:20: undefined: max_heapify\n/tmp/tmpfv8w6303_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Rebuild the heap.\n    heap = build_max_heap(heap)\n\n    // Repeat the process until the heap is empty.\n    if len(heap) > 0 {\n        return append([]int{heap[len(heap) - 1]}, heap_sort(heap[:len(heap) - 1])...)\n    }\n\n    return []int{}\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuwqyg931_test.go:11:13: undefined: build_max_heap\n/tmp/tmpuwqyg931_test.go:20:12: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        iterable = sift_down(iterable, idx, len(iterable) - 1)\n    }\n\n    // Repeatedly extract the largest item from the heap.\n    for idx := len(iterable) - 1; idx > 0; idx-- {\n        // The largest item in the heap is stored at the root.\n        // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n        // Finally, heapify the root of tree.\n        iterable[idx], iterable[0] = iterable[0], iterable[idx]\n        iterable = sift_down(iterable, 0, idx - 1)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfinhebn8_test.go:13:20: undefined: sift_down\n/tmp/tmpfinhebn8_test.go:22:20: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    sorted := make([]int, 0)\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvguny7ev_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n        // Re-heapify the list.\n        heap = heapify(heap[:i])\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvhfw2h5z_test.go:11:13: undefined: build_heap\n/tmp/tmpvhfw2h5z_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Remove the last element.\n    heap = heap[:len(heap) - 1]\n\n    // Sift down the root element to the correct position.\n    heap = sift_down(heap, 0)\n\n    // Repeat until the heap is empty.\n    if len(heap) > 0 {\n        return append(heap_sort(heap[:len(heap) - 1]), heap[len(heap) - 1])\n    } else {\n        return []int{}\n    }\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmwl5b5r0_test.go:11:13: undefined: build_max_heap\n/tmp/tmpmwl5b5r0_test.go:20:12: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh1w6ks9_test.go:12:9: undefined: heapify\n/tmp/tmphh1w6ks9_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        iterable = heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk1cmnls8_test.go:13:20: undefined: heapify\n/tmp/tmpk1cmnls8_test.go:23:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbd35ewm0_test.go:12:20: undefined: max_heapify\n/tmp/tmpbd35ewm0_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[i] = heap.pop()\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptk24gwlx_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    sorted := make([]int, 0)\n    for heap.size > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzos34t6z_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo6kj0_k0_test.go:11:5: undefined: build_max_heap\n/tmp/tmpo6kj0_k0_test.go:16:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element of the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnljgfp0h_test.go:11:13: undefined: build_max_heap\n/tmp/tmpnljgfp0h_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmproxa0l4g_test.go:11:16: undefined: build_heap\n/tmp/tmproxa0l4g_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = make([]int, len(iterable))\n    copy(heap, iterable)\n    for i := len(heap) / 2; i >= 0; i-- {\n        heap = heapify(heap, i)\n    }\n\n    // Perform the following operations\n    // - Swap the root (maximum value) of the heap with the last element of the\n    //   heap followed by reducing the size of heap by 1.\n    // - Finally, heapify the root of tree.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx3hsknm9_test.go:14:16: undefined: heapify\n/tmp/tmpx3hsknm9_test.go:23:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n    // Pop the last element.\n    heap = heap[:len(heap) - 1]\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the first element.\n        heap = sift_down(heap, 0)\n        // Swap the first and last element.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n        // Pop the last element.\n        heap = heap[:len(heap) - 1]\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbe5o91iy_test.go:11:13: undefined: build_max_heap\n/tmp/tmpbe5o91iy_test.go:19:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw57ed2do_test.go:12:9: undefined: heapify\n/tmp/tmpw57ed2do_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzdbnah9_test.go:12:20: undefined: heapify\n/tmp/tmpgzdbnah9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the root element to the correct position.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        // Swap the first and last elements of the heap.\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n        // Pop the last element from the heap.\n        heap = heap[:len(heap)-1]\n\n        // Sift down the root element to the correct position.\n        heap = sift_down(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp07pvx10l_test.go:11:13: undefined: build_max_heap\n/tmp/tmp07pvx10l_test.go:20:12: undefined: sift_down\n/tmp/tmp07pvx10l_test.go:31:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk25fgeqb_test.go:11:13: undefined: build_heap\n/tmp/tmpk25fgeqb_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4nto7hee_test.go:12:9: undefined: heapify\n/tmp/tmp4nto7hee_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjrjtt7ks_test.go:12:20: undefined: heapify\n/tmp/tmpjrjtt7ks_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxo5145qz_test.go:12:20: undefined: heapify\n/tmp/tmpxo5145qz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element of the heap.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n    // Pop the last element of the heap.\n    heap = heap[:len(heap) - 1]\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Sift down the root of the heap.\n        heap = sift_down(heap, 0)\n        // Swap the first and last element of the heap.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n        // Pop the last element of the heap.\n        heap = heap[:len(heap) - 1]\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppztzdd7q_test.go:11:13: undefined: build_max_heap\n/tmp/tmppztzdd7q_test.go:19:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Then heapify the heap excluding the last element.\n    // Repeat the process until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3qiq7518_test.go:11:13: undefined: build_max_heap\n/tmp/tmp3qiq7518_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the max element and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp068a0isk_test.go:12:20: undefined: heapify\n/tmp/tmp068a0isk_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Pop the max element and heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgsj0zb8z_test.go:12:20: undefined: heapify\n/tmp/tmpgsj0zb8z_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root element and swap it with the last element.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wlb1vus_test.go:11:13: undefined: build_heap\n/tmp/tmp6wlb1vus_test.go:16:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh1w6ks9_test.go:12:9: undefined: heapify\n/tmp/tmphh1w6ks9_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsoyu9wg_test.go:12:20: undefined: heapify\n/tmp/tmplsoyu9wg_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    var heap []int\n    for _, value := range iterable {\n        heap = append(heap, value)\n        heap = heapify(heap)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd9_fy7lv_test.go:13:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable)/2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable)-1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmitmjkwv_test.go:12:20: undefined: heapify\n/tmp/tmpmitmjkwv_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap and append it to the sorted list.\n    sorted := make([]int, 0)\n    for heap.length > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsweb_7x4_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the largest element and heapify the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpavkijtj__test.go:12:20: undefined: heapify\n/tmp/tmpavkijtj__test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Sort the list.\n    for i := len(heap) - 1; i > 0; i-- {\n        // Swap the first and last elements.\n        heap[0], heap[i] = heap[i], heap[0]\n\n        // Rebuild the heap.\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6nkntomv_test.go:11:13: undefined: build_heap\n/tmp/tmp6nkntomv_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heap := build_heap(iterable)\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124243,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphtg0q_g8_test.go:10:13: undefined: build_heap\n/tmp/tmphtg0q_g8_test.go:13:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap.\n    heapify(iterable)\n\n    // Swap the first and last elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        // Restore the heap property.\n        sift_down(iterable, 0, i - 1)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpru19b2e6_test.go:11:5: undefined: heapify\n/tmp/tmpru19b2e6_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    build_max_heap(iterable)\n    // Swap the first and last element, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = iterable[:i]\n        max_heapify(iterable, 0)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpau6x9krx_test.go:11:5: undefined: build_max_heap\n/tmp/tmpau6x9krx_test.go:16:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last element.\n    heap.swap(0, len(heap.data) - 1)\n    // Pop the last element.\n    heap.pop()\n    // Repeat until the heap is empty.\n    for len(heap.data) > 0 {\n        // Sift down the first element.\n        heap.sift_down(0)\n        // Swap the first and last element.\n        heap.swap(0, len(heap.data) - 1)\n        // Pop the last element.\n        heap.pop()\n    }\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp861dkg2n_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        iterable = heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        iterable = heapify(iterable, 0, end)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124244,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe2n331h9_test.go:13:20: undefined: heapify\n/tmp/tmpe2n331h9_test.go:23:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the root of the heap and heapify the remaining heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124245,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp295403fj_test.go:12:20: undefined: heapify\n/tmp/tmp295403fj_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Pop the max element from the heap.\n    for i := len(iterable) - 1; i >= 1; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124245,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8na6a_rv_test.go:12:20: undefined: heapify\n/tmp/tmp8na6a_rv_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heap := build_heap(iterable)\n    // Sort the heap.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124245,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi08zeyjk_test.go:11:13: undefined: build_heap\n/tmp/tmpi08zeyjk_test.go:16:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the given list.\n    build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Sort the remaining elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        max_heapify(iterable, i, 0)\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9_86euqb_test.go:11:5: undefined: build_max_heap\n/tmp/tmp9_86euqb_test.go:18:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract elements from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // Call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6alsnjl8_test.go:12:9: undefined: heapify\n/tmp/tmp6alsnjl8_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i)\n    }\n\n    // Swap the first and last elements, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8ouweukx_test.go:12:20: undefined: max_heapify\n/tmp/tmp8ouweukx_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element and heapify the remaining list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg7y6h1yi_test.go:12:20: undefined: heapify\n/tmp/tmpg7y6h1yi_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the root element to the correct position.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyvmm4779_test.go:11:13: undefined: build_max_heap\n/tmp/tmpyvmm4779_test.go:20:12: undefined: sift_down\n/tmp/tmpyvmm4779_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size\n    // of heap by 1. Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7606_sgd_test.go:11:16: undefined: build_heap\n/tmp/tmp7606_sgd_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element,\n    // and heapify the rest of the elements.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9rrglfbn_test.go:12:20: undefined: heapify\n/tmp/tmp9rrglfbn_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the last element out of the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd8qiq_mx_test.go:11:13: undefined: build_max_heap\n/tmp/tmpd8qiq_mx_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7vlq_miz_test.go:12:20: undefined: heapify\n/tmp/tmp7vlq_miz_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa0f3959h_test.go:12:20: undefined: heapify\n/tmp/tmpa0f3959h_test.go:17:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsoyu9wg_test.go:12:20: undefined: heapify\n/tmp/tmplsoyu9wg_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Pop the largest element from the heap and append it to the sorted list.\n    sorted := []int{}\n    for len(heap) > 0 {\n        sorted = append(sorted, heap.pop())\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7mawvkwu_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcj0nezxu_test.go:12:9: undefined: heapify\n/tmp/tmpcj0nezxu_test.go:17:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh1w6ks9_test.go:12:9: undefined: heapify\n/tmp/tmphh1w6ks9_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    var heap []int\n    for _, item := range iterable {\n        heap = append(heap, item)\n        heap = heapify(heap)\n    }\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa20x7mmu_test.go:13:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the rest.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxdaq25h7_test.go:12:20: undefined: heapify\n/tmp/tmpxdaq25h7_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the root element and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3mpwol9k_test.go:12:20: undefined: heapify\n/tmp/tmp3mpwol9k_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the max element from the heap and append it to the sorted list.\n    // Repeat until the heap is empty.\n    sorted := []int{}\n    for len(heap) > 0 {\n        sorted = append(sorted, heap[0])\n        heap = heap[1:]\n        heap = heapify(heap, 0)\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph85b88hh_test.go:11:13: undefined: build_heap\n/tmp/tmph85b88hh_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpstvrehjo_test.go:12:9: undefined: heapify\n/tmp/tmpstvrehjo_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i)\n    }\n\n    // Swap the root with the last element, and heapify the remaining.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvjlfq60t_test.go:12:20: undefined: max_heapify\n/tmp/tmpvjlfq60t_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, len(iterable), i)\n    }\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        // call max heapify on the reduced heap.\n        iterable = heapify(iterable, i, 0)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpciycpo83_test.go:12:20: undefined: heapify\n/tmp/tmpciycpo83_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The following are equivalent:\n    // heapify(x)\n    // heapify(x[:len(x)])\n    // heapify(x[:len(x)])\n    heapify(iterable)\n\n    // Pop elements, largest first, into a list.\n    end := len(iterable) - 1\n    for end > 0 {\n        // The following are equivalent:\n        // iterable[end], iterable[0] = iterable[0], iterable[end]\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        end -= 1\n        sift_down(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe1en8v4l_test.go:15:5: undefined: heapify\n/tmp/tmpe1en8v4l_test.go:24:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root element from the heap and put it at the end of the list.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppoes70sc_test.go:11:13: undefined: build_heap\n/tmp/tmppoes70sc_test.go:17:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Swap the first element with the last element.\n    // Then heapify the rest of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3i4dkm46_test.go:12:20: undefined: heapify\n/tmp/tmp3i4dkm46_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the root of the heap and append it to the result.\n    // Repeat until the heap is empty.\n    result := make([]int, 0)\n    for heap.length > 0 {\n        result = append(result, heap.pop())\n    }\n\n    return result\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124246,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_sa8wsy6_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5ihorax1_test.go:12:20: undefined: heapify\n/tmp/tmp5ihorax1_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n    // Remove the last element of the heap.\n    heap = heap[:len(heap) - 1]\n\n    // Repeat the process until the heap is empty.\n    for len(heap) > 0 {\n        // Rebuild the heap.\n        heap = build_max_heap(heap)\n\n        // Swap the first and last elements of the heap.\n        heap[0], heap[len(heap) - 1] = heap[len(heap) - 1], heap[0]\n\n        // Remove the last element of the heap.\n        heap = heap[:len(heap) - 1]\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6_34ajvt_test.go:11:13: undefined: build_max_heap\n/tmp/tmp6_34ajvt_test.go:22:16: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heapify(iterable)\n    // Swap the first and last element.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n    // Heap sort the rest of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        // Sift down the root of the heap.\n        sift_down(iterable, 0, i)\n        // Swap the first and last element.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpws9km67b_test.go:11:5: undefined: heapify\n/tmp/tmpws9km67b_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the given list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first and last elements, then heapify the list again.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124247,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpam1p57i5_test.go:12:20: undefined: heapify\n/tmp/tmpam1p57i5_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Call max_heapify on the reduced heap.\n    for i := len(iterable)-1; i > 0; i-- {\n        max_heapify(iterable, i, 0)\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvoplm_yz_test.go:11:5: undefined: build_max_heap\n/tmp/tmpvoplm_yz_test.go:18:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmproxa0l4g_test.go:11:16: undefined: build_heap\n/tmp/tmproxa0l4g_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgqcwsjno_test.go:12:20: undefined: max_heapify\n/tmp/tmpgqcwsjno_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root from the heap and insert it into the\n    // sorted list.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwfpijr06_test.go:11:13: undefined: build_heap\n/tmp/tmpwfpijr06_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // One by one extract an element from heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        // Move current root to end.\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n\n        // Call max heapify on the reduced heap.\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124227,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpehkxz6jf_test.go:12:9: undefined: heapify\n/tmp/tmpehkxz6jf_test.go:21:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element from the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplgazqwjy_test.go:11:13: undefined: build_heap\n/tmp/tmplgazqwjy_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the root element and heapify the remaining.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp036234my_test.go:12:20: undefined: heapify\n/tmp/tmp036234my_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.items) - 1)\n\n    // Sift down the new root element to the correct position.\n    heap.sift_down(0)\n\n    // Repeat the process until the heap is empty.\n    for len(heap.items) > 1 {\n        // Swap the first and last elements.\n        heap.swap(0, len(heap.items) - 1)\n\n        // Remove the last element from the heap.\n        heap.items = heap.items[:len(heap.items) - 1]\n\n        // Sift down the new root element to the correct position.\n        heap.sift_down(0)\n    }\n\n    return heap.items\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptyqdi5_o_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the root element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp845w9tak_test.go:12:20: undefined: heapify\n/tmp/tmp845w9tak_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heapify(iterable)\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa9l2iz37_test.go:11:5: undefined: heapify\n/tmp/tmpa9l2iz37_test.go:17:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124229,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa79f0rm__test.go:12:9: undefined: heapify\n/tmp/tmpa79f0rm__test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap_size = len(iterable)\n    for i := (heap_size / 2); i >= 0; i-- {\n        iterable = max_heapify(iterable, i, heap_size)\n    }\n\n    // Perform the sort by successively extracting the maximum element\n    // from the heap and inserting it into the sorted list.\n    for i := heap_size - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heap_size -= 1\n        iterable = max_heapify(iterable, 0, heap_size)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp05ghb6qh_test.go:13:20: undefined: max_heapify\n/tmp/tmp05ghb6qh_test.go:21:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd76d7sp__test.go:11:16: undefined: build_heap\n/tmp/tmpd76d7sp__test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Repeat until the heap is empty.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[i] = heap.pop()\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0gemfpfz_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Convert the list to a heap.\n    heap := make([]int, len(iterable))\n    for i, v := range iterable {\n        heap[i] = v\n    }\n    heapify(heap)\n\n    // Pop the root of the heap and append it to the sorted list.\n    sorted := make([]int, len(iterable))\n    for i := len(iterable) - 1; i >= 0; i-- {\n        sorted[i] = heap[0]\n        heap[0] = heap[len(heap) - 1]\n        heap = heap[:len(heap) - 1]\n        sift_down(heap, 0)\n    }\n\n    return sorted\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzzn2ccc6_test.go:15:5: undefined: heapify\n/tmp/tmpzzn2ccc6_test.go:23:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124224,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpolul1ggw_test.go:12:9: undefined: heapify\n/tmp/tmpolul1ggw_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first and last elements.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Call max_heapify on the list excluding the last element.\n    max_heapify(iterable[:len(iterable)-1], 0)\n\n    // Recurse.\n    if len(iterable) > 1 {\n        return heap_sort(iterable[:len(iterable)-1])\n    } else {\n        return iterable\n    }\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbuw6ts3h_test.go:11:5: undefined: build_max_heap\n/tmp/tmpbuw6ts3h_test.go:17:5: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu6jp6cgo_test.go:12:20: undefined: heapify\n/tmp/tmpu6jp6cgo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element from the heap and put it at the end of the list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2anst3ig_test.go:12:20: undefined: heapify\n/tmp/tmp2anst3ig_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    var heap = build_heap(iterable)\n\n    // At this point, the largest item is stored at the root of the heap.\n    // Replace it with the last item of the heap followed by reducing the size of heap by 1.\n    // Finally, heapify the root of tree.\n    for i := len(heap) - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124231,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmproxa0l4g_test.go:11:16: undefined: build_heap\n/tmp/tmproxa0l4g_test.go:19:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzsxicd4w_test.go:12:20: undefined: heapify\n/tmp/tmpzsxicd4w_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the iterable.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element from the heap.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the new root element.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmjn6l75n_test.go:11:13: undefined: build_max_heap\n/tmp/tmpmjn6l75n_test.go:20:12: undefined: sift_down\n/tmp/tmpmjn6l75n_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpquitywwa_test.go:12:20: undefined: heapify\n/tmp/tmpquitywwa_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last element and heapify the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy377sbn_test.go:12:20: undefined: heapify\n/tmp/tmpqy377sbn_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6u83ucf_test.go:12:20: undefined: heapify\n/tmp/tmpj6u83ucf_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Create a heap from the given list.\n    heap := make([]int, len(iterable))\n    copy(heap, iterable)\n    for i := len(heap) / 2; i >= 0; i-- {\n        heap = heapify(heap, i)\n    }\n\n    // Sort the heap.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124248,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp53hzf5yk_test.go:14:16: undefined: heapify\n/tmp/tmp53hzf5yk_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the max element from the heap.\n    // Repeat the process until the heap is empty.\n    for i := len(iterable) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:len(heap) - 1]\n        heap = max_heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpul_9b76q_test.go:11:13: undefined: build_max_heap\n/tmp/tmpul_9b76q_test.go:19:16: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the max element and heapify the remaining elements.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg7x0mryk_test.go:12:20: undefined: heapify\n/tmp/tmpg7x0mryk_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh1w6ks9_test.go:12:9: undefined: heapify\n/tmp/tmphh1w6ks9_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last element of the heap.\n    // Pop the last element out of the heap and heapify the heap.\n    // Repeat until the heap is empty.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4p5y_fuq_test.go:11:13: undefined: build_max_heap\n/tmp/tmp4p5y_fuq_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n    // Swap the first and last elements.\n    heap.swap(0, len(heap.data) - 1)\n    // Pop the last element.\n    heap.pop()\n    // Repeat the process until the heap is empty.\n    for heap.size > 0 {\n        // Swap the first and last elements.\n        heap.swap(0, heap.size - 1)\n        // Pop the last element.\n        heap.pop()\n    }\n    return heap.data\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_gxok1fd_test.go:11:13: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first element with the last element.\n    // Pop the last element out of the list.\n    // Sink down the first element to the correct position.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = iterable[:i]\n        sink_down(iterable, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppy9943hr_test.go:11:5: undefined: build_max_heap\n/tmp/tmppy9943hr_test.go:19:9: undefined: sink_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[:end] is sorted).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The largest item in a[:end] is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmvnae3hp_test.go:13:9: undefined: heapify\n/tmp/tmpmvnae3hp_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the list.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Pop the last element of the list.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the new root element.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the heap is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v9rsbpj_test.go:11:13: undefined: build_max_heap\n/tmp/tmp4v9rsbpj_test.go:20:12: undefined: sift_down\n/tmp/tmp4v9rsbpj_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the list.\n    heap := build_heap(iterable)\n\n    // Pop the heap and append the value to the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[i] = heap.pop()\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7jmzerp9_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; {\n        // a[0] is the root and largest value. The swap moves it in front of the sorted elements.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // The heap size is reduced by one.\n        end--\n        // The swap ruined the heap property, so restore it.\n        heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124239,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8345wbsa_test.go:13:9: undefined: heapify\n/tmp/tmp8345wbsa_test.go:24:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    heap := new(Heap)\n    heap.Init(iterable)\n    heap.Sort()\n    return heap.Iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsabm0_8v_test.go:10:17: undefined: Heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the list.\n    heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n\n    // Remove the last element from the list.\n    heap = heap[:len(heap)-1]\n\n    // Sift down the first element of the list.\n    heap = sift_down(heap, 0)\n\n    // Repeat the above steps until the list is empty.\n    for len(heap) > 0 {\n        heap[0], heap[len(heap)-1] = heap[len(heap)-1], heap[0]\n        heap = heap[:len(heap)-1]\n        heap = sift_down(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpog_o26a2_test.go:11:13: undefined: build_max_heap\n/tmp/tmpog_o26a2_test.go:20:12: undefined: sift_down\n/tmp/tmpog_o26a2_test.go:26:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Pop the largest element from the heap and put it at the end of the list.\n    // Then heapify the remaining list.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp86nzk7ru_test.go:12:20: undefined: heapify\n/tmp/tmp86nzk7ru_test.go:19:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Extract the max element and put it at the end of the list.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvumg4b3n_test.go:12:20: undefined: max_heapify\n/tmp/tmpvumg4b3n_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgn3de_n_test.go:12:20: undefined: heapify\n/tmp/tmpsgn3de_n_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Swap the first and last elements in the heap.\n    // Pop the last element out of the heap, sift down the new first element.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = sift_down(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp41xrliup_test.go:11:13: undefined: build_heap\n/tmp/tmp41xrliup_test.go:17:16: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjnd81rs6_test.go:12:20: undefined: heapify\n/tmp/tmpjnd81rs6_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_heap(iterable)\n\n    // Repeatedly extract the root from the heap and put it at the end of the\n    // list.\n    for i := len(heap) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heap[:i]\n        heap = heapify(heap, 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5umywaar_test.go:11:13: undefined: build_heap\n/tmp/tmp5umywaar_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    heapify(iterable)\n    // Swap the first and last elements.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n    // Remove the last element.\n    iterable = iterable[:len(iterable)-1]\n    // Sift down the new root.\n    sift_down(iterable, 0)\n    // Repeat.\n    if len(iterable) > 1 {\n        return append(heap_sort(iterable), iterable[0])\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5qgg_s0m_test.go:11:5: undefined: heapify\n/tmp/tmp5qgg_s0m_test.go:17:5: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i)\n    }\n\n    // Sort the heap\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2_ik40fw_test.go:12:20: undefined: heapify\n/tmp/tmp2_ik40fw_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable)/2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the root with the last element and heapify the root element.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhysg8eo_test.go:12:20: undefined: heapify\n/tmp/tmprhysg8eo_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124234,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyt2t9ev9_test.go:12:20: undefined: heapify\n/tmp/tmpyt2t9ev9_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Swap the first element with the last one, and heapify the rest.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptn01ll5i_test.go:12:20: undefined: heapify\n/tmp/tmptn01ll5i_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509927,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpab5xp5ho_test.go:12:20: undefined: heapify\n/tmp/tmpab5xp5ho_test.go:18:20: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max-heap from the input data.\n    // The largest item will be stored at the root of the heap.\n    for idx := len(iterable) / 2; idx >= 0; idx-- {\n        heapify(iterable, idx, len(iterable))\n    }\n\n    // The following loop maintains the invariants that a[0:end] is a heap and every element\n    // beyond end is greater than everything before it (so a[end:count] is in sorted order).\n    for end := len(iterable) - 1; end > 0; end-- {\n        // The smallest item in the heap is stored at the root. Replace it with the last item\n        // of the heap followed by reducing the size of the heap by 1.\n        iterable[end], iterable[0] = iterable[0], iterable[end]\n        // Put the heap back in max-heap order.\n        heapify(iterable, 0, end)\n    }\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcsyqtev6_test.go:13:9: undefined: heapify\n/tmp/tmpcsyqtev6_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap.\n    for i := len(iterable) / 2 - 1; i >= 0; i-- {\n        heapify(iterable, len(iterable), i)\n    }\n\n    // Extract the elements from the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable, i, 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124241,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh1w6ks9_test.go:12:9: undefined: heapify\n/tmp/tmphh1w6ks9_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    build_max_heap(iterable)\n\n    // Swap the first and last element of the list.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Recursively heapify the reduced list.\n    if len(iterable) > 1 {\n        heap_sort(iterable[:len(iterable)-1])\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm69u83ll_test.go:11:5: undefined: build_max_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heapify(iterable)\n\n    // Swap the first and last elements.\n    iterable[0], iterable[len(iterable)-1] = iterable[len(iterable)-1], iterable[0]\n\n    // Sift down the new root element to the proper position such that the heap is ordered.\n    sift_down(iterable, 0, len(iterable)-1)\n\n    // Repeat the above two steps until the heap is fully sorted.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, 0, i-1)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkosezmze_test.go:11:5: undefined: heapify\n/tmp/tmpkosezmze_test.go:17:5: undefined: sift_down\n/tmp/tmpkosezmze_test.go:22:9: undefined: sift_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a heap from the iterable.\n    heap := build_heap(iterable)\n\n    // Pop the root element from the heap until it is empty.\n    for heap.size > 0 {\n        iterable[heap.size - 1] = heap.pop()\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124250,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmasyyw5j_test.go:11:13: undefined: build_heap\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build the heap in-place.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        heapify(iterable, i)\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124251,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq3caf7m1_test.go:12:9: undefined: heapify\n/tmp/tmpq3caf7m1_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i)\n    }\n\n    // Swap the first and last element.\n    for i := len(iterable) - 1; i > 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable[:i], 0)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124251,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp24matoeg_test.go:12:20: undefined: max_heapify\n/tmp/tmp24matoeg_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap from the list.\n    heap := build_max_heap(iterable)\n\n    // Swap the first and last elements of the heap.\n    // Then heapify the heap again.\n    // Repeat this process until the heap is sorted.\n    for i := len(iterable) - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap = heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124251,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvkup70p1_test.go:11:13: undefined: build_max_heap\n/tmp/tmpvkup70p1_test.go:18:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_sort_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort the given list.\nfunc heap_sort(iterable []int) []int {\n    // Build a max heap.\n    for i := len(iterable) / 2; i >= 0; i-- {\n        iterable = max_heapify(iterable, i, len(iterable))\n    }\n\n    // Sort the heap.\n    for i := len(iterable) - 1; i >= 0; i-- {\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        iterable = max_heapify(iterable, 0, i)\n    }\n\n    return iterable\n}\n\nfunc TestHeap_Sort(t *testing.T) {\n  candidate := heap_sort\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}), expected: []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 25, 58}), expected: []int{14, 22, 25, 25, 35, 58, 65, 75, 85} },\n     { actual: candidate([]int{7, 1, 9, 5}), expected: []int{1, 5, 7, 9} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124251,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmyff7sjp_test.go:12:20: undefined: max_heapify\n/tmp/tmpmyff7sjp_test.go:18:20: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}