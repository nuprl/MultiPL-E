{
  "name": "mbpp_739_find_Index",
  "language": "go_test.go",
  "prompt": "package find_Index_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Index(t *testing.T) {\n  candidate := find_Index\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected: 14 },\n     { actual: candidate(4), expected: 45 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    return find_Index(n-1) + n\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for {\n        if len(fmt.Sprint(tri)) == n {\n            return i\n        }\n        i++\n        tri += i\n    }\n}\n",
    "    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            break\n        }\n    }\n    return i\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) >= n {\n            return i\n        }\n        i += 1\n    }\n}\n",
    "    // initialize the triangular number\n    var triNum int = 0\n    // initialize the index\n    var index int = 1\n    // loop until the number of digits in the triangular number is greater than or equal to n\n    for len(fmt.Sprint(triNum)) < n {\n        // add the index to the triangular number\n        triNum += index\n        // increment the index\n        index++\n    }\n    // return the index\n    return index - 1\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize length of triangular number\n    length := 1\n    // Loop until length of triangular number is greater than or equal to n\n    for length < n {\n        // Increment index\n        index += 1\n        // Add index to triangular number\n        tri_num += index\n        // Find length of triangular number\n        length = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i, j, k int\n    var sum int\n    for i = 1; i < n; i++ {\n        sum = 0\n        for j = 1; j <= i; j++ {\n            sum += j\n        }\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n    }\n    return -1\n}\n",
    "    // triangular number is a number that can be represented as n(n+1)/2\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // we can find the smallest number with n digits by 10^(n-1)\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest number that can be represented as n(n+1)/2 with n digits\n    // and the largest number with n digits by 10^n - 1\n    // so we need to find the smallest",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var j int\n    var t int\n    i = 1\n    j = 1\n    t = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        j++\n        t += j\n    }\n}\n",
    "    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n\n    // Initialize triangular number\n    tri_num := 1\n\n    // Find the triangular number with n digits\n    for {\n        // Calculate next triangular number\n        tri_num = tri_num + index\n\n        // Increment index\n        index++\n\n        // Check if number of digits in tri_num is equal to n\n        if len(fmt.Sprint(tri_num)) == n {\n            break\n        }\n    }\n\n    // Return index\n    return index\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var j int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return j\n        }\n        i++\n        j++\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            return i\n        }\n        i++\n        tri += i\n    }\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = t + i\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) >= n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    triangular_number := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop to find index of triangular number\n    for count < n {\n        index++\n        triangular_number = triangular_number + index\n        count = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    return index\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = (i * (i + 1)) / 2\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if t > 999 && t < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if t > 99999 && t < 1000000 {\n            if n == 6 {\n                return i\n            }\n        }\n    }\n    return i\n}\n",
    "    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n    }\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            return i\n        }\n        i++\n        tri += i\n    }\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n-digit triangular number is found\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Update count\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) >= n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n",
    "    // Initialize index of required triangular number\n    index := 1\n    // Initialize value of triangular number\n    tri_num := 1\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n    return index\n}\n",
    "    var i int\n    var triangular_number int\n    for i = 1; len(fmt.Sprintf(\"%d\", triangular_number)) < n; i++ {\n        triangular_number += i\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Run loop till n-1\n    for count < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Increment count of digits in tri_num\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    if n == 5 {\n        return 28\n    }\n    if n == 6 {\n        return 28\n    }\n    if n == 7 {\n        return 36\n    }\n    if n == 8 {\n        return 36\n    }\n    if n == 9 {\n        return 45\n    }\n    if n == 10 {\n        return 45\n    }\n    if n == 11 {\n        return 55\n    }\n    if n == 12 {\n        return 55\n    }\n    if n == 13 {\n        return 66\n    }\n    if n == 14 {\n        return 66\n    }\n    if n == 15 {\n        return 78\n    }\n    if n == 16 {\n        return 78\n    }\n    if n == 17 {\n        return 91\n    }\n    if n == 18 {\n        return 91\n    }\n    if n == 19 {\n        return 105\n    }\n    if n == 20 {\n        return 105\n    }\n    if n == 21 {\n        return 120\n    }\n    if n == 22 {\n        return 120\n    }\n    if n == 23 {\n        return 136\n    }\n    if n == 24 {\n        return 136\n    }\n    if n == 25 {\n        return 153\n    }\n    if n == 26 {\n        return 153\n    }\n    if n == 27 {\n        return 171\n    }\n    if n == 28 {\n        return 171\n    }\n    if n == 29 {\n        return 190\n    }\n    if n == 30 {\n        return 190\n    }\n    if n == 31 {\n        return 210\n    }\n    if n == 32 {\n        return 210\n    }\n    if n == 33 {\n        return 231\n    }\n    if n == 34 {\n        return 231\n    }\n    if n == 35 {\n        return 253\n    }\n    if n == 36 {\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; len(fmt.Sprintf(\"%d\", tri)) < n; i++ {\n        tri += i\n    }\n    return i\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    if n == 5 {\n        return 28\n    }\n    if n == 6 {\n        return 28\n    }\n    if n == 7 {\n        return 36\n    }\n    if n == 8 {\n        return 36\n    }\n    if n == 9 {\n        return 45\n    }\n    if n == 10 {\n        return 45\n    }\n    if n == 11 {\n        return 55\n    }\n    if n == 12 {\n        return 55\n    }\n    if n == 13 {\n        return 66\n    }\n    if n == 14 {\n        return 66\n    }\n    if n == 15 {\n        return 78\n    }\n    if n == 16 {\n        return 78\n    }\n    if n == 17 {\n        return 91\n    }\n    if n == 18 {\n        return 91\n    }\n    if n == 19 {\n        return 105\n    }\n    if n == 20 {\n        return 105\n    }\n    if n == 21 {\n        return 120\n    }\n    if n == 22 {\n        return 120\n    }\n    if n == 23 {\n        return 136\n    }\n    if n == 24 {\n        return 136\n    }\n    if n == 25 {\n        return 153\n    }\n    if n == 26 {\n        return 153\n    }\n    if n == 27 {\n        return 171\n    }\n    if n == 28 {\n        return 171\n    }\n    if n == 29 {\n        return 190\n    }\n    if n == 30 {\n        return 190\n    }\n    if n == 31 {\n        return 210\n    }\n    if n == 32 {\n        return 210\n    }\n    if n == 33 {\n        return 231\n    }\n    if n == 34 {\n        return 231\n    }\n    if n == 35 {\n        return 253\n    }\n    if n == 36 {\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i, j int\n    for i = 1; i < n; i++ {\n        j = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", j)) >= n {\n            return i\n        }\n    }\n    return -1\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprint(tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    var i int = 1\n    var j int = 1\n    for {\n        i = i + 1\n        j = j + i\n        if len(fmt.Sprintf(\"%d\", j)) == n {\n            return i\n        }\n    }\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // loop until the number of digits in triangular number is equal to n\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        // increment the index\n        index += 1\n        // add the index to the triangular number\n        triangular_number += index\n    }\n    // return the index\n    return index\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n_digits int\n    var triangular_number int\n    var triangular_number_digits int\n    var triangular_number_digits_prev int\n    var triangular_number_prev int\n    var triangular_number_prev_prev int\n    var triangular_number_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev int\n    var triangular_number_prev_prev_prev_prev_prev_prev_prev_prev_prev_",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // initialize the index\n    index := 1\n\n    // initialize the triangular number\n    triangular_number := 1\n\n    // find the index of the triangular number\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        index += 1\n        triangular_number += index\n    }\n\n    return index\n}\n",
    "    var i int = 1\n    var sum int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n        sum += i\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_num int = 1\n    var num_digits int = 1\n    for num_digits < n {\n        i++\n        triangular_num += i\n        num_digits = len(fmt.Sprintf(\"%d\", triangular_num))\n    }\n    return i\n}\n",
    "    if n < 1 {\n        return 0\n    }\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize value of triangular number\n    triangularNumber := 1\n    // Find triangular number with n digits\n    for triangularNumber <= n {\n        // Increment index\n        index++\n        // Add value to triangular number\n        triangularNumber += index\n    }\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var j int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n        i++\n        j++\n    }\n    return j\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Iterate till count of digits in triangular number is not equal to n\n    for count != n {\n        // Increment index by 1\n        index++\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Update count of digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var j int = 1\n    for {\n        if len(fmt.Sprint(i)) == n {\n            return j\n        }\n        i += j\n        j++\n    }\n}\n",
    "    var i int = 1\n    var j int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i)) == n {\n            break\n        }\n        i += j\n        j++\n    }\n    return j\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprint(triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    var index int = 1\n    // Initialize triangular number\n    var triangular_number int = 1\n    // Initialize count of digits in triangular number\n    var count_digits int = 1\n    // Run loop till n-1 digits are not found\n    for count_digits < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        triangular_number += index\n        // Count digits in triangular number\n        count_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    return index\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var j int = 1\n    var count int = 1\n    for {\n        j = j + i\n        i++\n        count++\n        if len(fmt.Sprintf(\"%d\", j)) == n {\n            return count\n        }\n    }\n}\n",
    "    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    digits := 1\n    // loop until the number of digits is equal to n\n    for digits < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        triangular_number += index\n        // get the number of digits\n        digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var j int = 1\n    var sum int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n        j++\n        sum += j\n    }\n}\n",
    "    var i, j, k int\n    for i = 1; i < n; i++ {\n        k = i * (i + 1) / 2\n        if k > n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for sum < n {\n        sum += i\n        i++\n    }\n    return i - 1\n}\n",
    "    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    digits := 1\n    // loop until the number of digits is equal to n\n    for digits < n {\n        // increment the index\n        index += 1\n        // calculate the triangular number\n        triangular_number += index\n        // calculate the number of digits\n        digits = len(fmt.Sprint(triangular_number))\n    }\n    // return the index\n    return index\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            break\n        }\n        i++\n    }\n    return i\n}\n",
    "    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize first triangular number\n    tn := 0\n    // Initialize index of triangular number\n    index := 0\n    // Find n'th triangular number\n    for i := 1; ; i++ {\n        tn = tn + i\n        // Increase index of triangular number\n        index++\n        // If number of digits in tn is equal to n,\n        // return index\n        if len(fmt.Sprint(tn)) == n {\n            return index\n        }\n    }\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    return find_Index(n-1) + n - 1\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    i := 1\n    for {\n        t := i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var tn int = 0\n    for {\n        tn = tn + i\n        if len(fmt.Sprintf(\"%d\", tn)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = t + i\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = i * (i + 1) / 2\n        if tri > 9 && tri < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if tri > 999 && tri < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if tri > 99999 && tri < 1000000 {\n            if n == 6 {\n                return i\n            }\n        }\n    }\n    return i\n}\n",
    "    var i int = 0\n    var j int = 0\n    var sum int = 0\n\n    for {\n        sum = 0\n        for j = 1; j <= i; j++ {\n            sum += j\n        }\n        if len(fmt.Sprint(sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    count := 1\n    // Loop until n digits in triangular number is not equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in updated triangular number\n        count = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var num int = 0\n    for num < n {\n        num = 0\n        for j := 1; j <= i; j++ {\n            num += j\n        }\n        i++\n    }\n    return i-1\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n",
    "    // Initialize index of triangular number\n    var i int = 1\n\n    // Initialize triangular number\n    var t int = 1\n\n    // Find the triangular number with n digits\n    for t < n {\n        i++\n        t = t + i\n    }\n\n    // Return index of triangular number\n    return i\n}\n",
    "    var i int\n    for i = 1; i < n; i++ {\n        if (i * (i + 1) / 2) >= n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize first triangular number\n    tn := 0\n    // First triangular number is 0\n    i := 0\n    // Calculate other triangular numbers\n    for {\n        i++\n        tn = tn + i\n        // If number of digits in tn is n,\n        // return value of i\n        if len(fmt.Sprintf(\"%d\", tn)) == n {\n            return i\n        }\n    }\n}\n",
    "    // Initialize index\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits\n    count := 1\n    // Loop until count of digits is equal to n\n    for count != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        count = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if t > 999 && t < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if t > 99999 && t < 1000000 {\n            if n == 6 {\n                return i\n            }\n        }\n    }\n    return 0\n}\n",
    "    var i int = 1\n    var tri int = 0\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        tri += i\n        i++\n    }\n    return i-1\n}\n",
    "    // Initialize index\n    index := 1\n\n    // Initialize triangular number\n    triangular_number := 1\n\n    // Initialize count of digits\n    count_digits := 1\n\n    // Loop until count of digits is equal to n\n    for count_digits != n {\n        // Increment index\n        index++\n\n        // Add index to triangular number\n        triangular_number += index\n\n        // Count digits in triangular number\n        count_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n\n    // Return index\n    return index\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > n {\n            break\n        }\n    }\n    return i - 1\n}\n",
    "    var i int = 1\n    var sum int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n        sum += i\n    }\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var sum int = 1\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n    return -1\n}\n",
    "    // initialize the first triangular number\n    var triangular_number int = 1\n    var index int = 1\n    // loop until the number of digits in triangular number is greater than n\n    for len(fmt.Sprint(triangular_number)) < n {\n        index++\n        triangular_number += index\n    }\n    return index\n}\n",
    "    // Initialize first triangular number\n    tn := 0\n    // First triangular number is 0\n    i := 0\n    // Calculate other triangular numbers\n    for {\n        i++\n        tn = tn + i\n        // If number of digits in tn is n,\n        // return value of i\n        if len(fmt.Sprint(tn)) == n {\n            return i\n        }\n    }\n}\n",
    "    var i int = 1\n    var j int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return j\n        }\n        i++\n        j++\n    }\n}\n",
    "    // initialize\n    i := 1\n    j := 1\n    // loop\n    for {\n        if len(fmt.Sprint(i)) == n {\n            return j\n        }\n        i += j\n        j += 1\n    }\n}\n",
    "    // initialize first triangular number\n    tn := 0\n    // initialize index of triangular number\n    i := 1\n    // loop until n-digit triangular number is found\n    for len(fmt.Sprintf(\"%d\", tn)) < n {\n        // generate next triangular number\n        tn += i\n        // increment index\n        i++\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n",
    "    index := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", index*(index+1)/2)) == n {\n            return index\n        }\n        index++\n    }\n}\n",
    "    var i int\n    var tri int\n    for i = 1; ; i++ {\n        tri = (i * (i + 1)) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    var index int = 1\n\n    // Initialize value of triangular number\n    var tri_num int = 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num += index\n    }\n\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t = i * (i + 1) / 2\n    }\n    return i\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 0\n    for t < n {\n        t = 0\n        for j := 1; j <= i; j++ {\n            t += j\n        }\n        i++\n    }\n    return i - 1\n}\n",
    "    // initialize first triangular number\n    tn := 0\n    // initialize index of triangular number\n    index := 0\n    // iterate until number of digits in 'tn' becomes n\n    for len(fmt.Sprintf(\"%d\", tn)) < n {\n        index = index + 1\n        // generate next triangular number\n        tn = tn + index\n    }\n    // return index\n    return index\n}\n",
    "    // Initialize index of result\n    index := 1\n    // Initialize first triangular number\n    tri_num := 1\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num += index\n    }\n    return index\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var triangle int = 1\n    for ; len(fmt.Sprintf(\"%d\", triangle)) < n; i++ {\n        triangle += i\n    }\n    return i\n}\n",
    "    var i int\n    var j int\n    var k int\n    var sum int\n    for i = 1; i < n; i++ {\n        sum = 0\n        for j = 1; j <= i; j++ {\n            sum += j\n        }\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n    }\n    return -1\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var t int = 1\n    for ; len(fmt.Sprintf(\"%d\", t)) < n; i++ {\n        t = i * (i + 1) / 2\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangle int = 1\n    var digits int = 1\n    for digits < n {\n        i++\n        triangle += i\n        digits = len(fmt.Sprintf(\"%d\", triangle))\n    }\n    return i\n}\n",
    "    var i int = 0\n    for {\n        var tri int = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", tri)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // initialize the triangular number\n    tri_num := 0\n    // initialize the index\n    index := 0\n    // loop until the number of digits in the triangular number is equal to n\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        // increment the index\n        index++\n        // add the index to the triangular number\n        tri_num += index\n    }\n    // return the index\n    return index\n}\n",
    "    var i int = 1\n    var triangle int = 0\n    for ; len(fmt.Sprintf(\"%d\", triangle)) < n; i++ {\n        triangle += i\n    }\n    return i - 1\n}\n",
    "    // Initialize index\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize length of triangular number\n    tri_num_len := 1\n    // Loop until length of triangular number is greater than or equal to n\n    for tri_num_len < n {\n        // Increment index\n        index++\n        // Update triangular number\n        tri_num += index\n        // Update length of triangular number\n        tri_num_len = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    if n <= 0 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n    }\n    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t > 9 && t < 100 {\n            if n == 2 {\n                return i\n            }\n        } else if t > 999 && t < 10000 {\n            if n == 4 {\n                return i\n            }\n        } else if t > 99999 && t < 1000000 {\n            if n == 6 {\n                return i\n            }\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var triangle int\n    for i = 1; ; i++ {\n        triangle = (i * (i + 1)) / 2\n        if len(fmt.Sprintf(\"%d\", triangle)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var triangular_number int = 0\n    for {\n        triangular_number = triangular_number + i\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprint(tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var j int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i)) == n {\n            return j\n        }\n        i += j\n        j += 1\n    }\n}\n",
    "    var i int = 1\n    var t int = 1\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        i++\n        t = t + i\n    }\n    return i\n}\n",
    "    // Initialize first triangular number\n    tn := 0\n    // First triangular number is 0\n    i := 0\n    for len(fmt.Sprintf(\"%d\", tn)) < n {\n        i++\n        tn += i\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_number int = 0\n    for {\n        triangular_number = triangular_number + i\n        if len(fmt.Sprintf(\"%d\", triangular_number)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i, j, k int\n    var sum int\n    for i = 1; i < n; i++ {\n        sum = 0\n        for j = 1; j <= i; j++ {\n            sum += j\n        }\n        if sum > n {\n            k = i\n            break\n        }\n    }\n    return k\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_Index(n - 1) + n\n}\n",
    "    var i int = 1\n    var triangular int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", triangular)) == n {\n            return i\n        }\n        i++\n        triangular += i\n    }\n}\n",
    "    var i, j, k int\n    for i = 1; ; i++ {\n        k = 0\n        for j = 1; j <= i; j++ {\n            k += j\n        }\n        if len(fmt.Sprint(k)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = t + i\n        if len(fmt.Sprint(t)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    if n == 5 {\n        return 28\n    }\n    if n == 6 {\n        return 36\n    }\n    if n == 7 {\n        return 45\n    }\n    if n == 8 {\n        return 55\n    }\n    if n == 9 {\n        return 66\n    }\n    if n == 10 {\n        return 78\n    }\n    if n == 11 {\n        return 91\n    }\n    if n == 12 {\n        return 105\n    }\n    if n == 13 {\n        return 120\n    }\n    if n == 14 {\n        return 136\n    }\n    if n == 15 {\n        return 153\n    }\n    if n == 16 {\n        return 171\n    }\n    if n == 17 {\n        return 190\n    }\n    if n == 18 {\n        return 210\n    }\n    if n == 19 {\n        return 231\n    }\n    if n == 20 {\n        return 253\n    }\n    if n == 21 {\n        return 276\n    }\n    if n == 22 {\n        return 300\n    }\n    if n == 23 {\n        return 325\n    }\n    if n == 24 {\n        return 351\n    }\n    if n == 25 {\n        return 378\n    }\n    if n == 26 {\n        return 406\n    }\n    if n == 27 {\n        return 435\n    }\n    if n == 28 {\n        return 465\n    }\n    if n == 29 {\n        return 496\n    }\n    if n == 30 {\n        return 528\n    }\n    if n == 31 {\n        return 561\n    }\n    if n == 32 {\n        return 595\n    }\n    if n == 33 {\n        return 630\n    }\n    if n == 34 {\n        return 666\n    }\n    if n == 35 {\n        return 703\n    }\n    if n == 36 {\n        return 741\n    }\n   ",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize count of digits in triangular number\n    digits := 1\n    // Loop until we find the triangular number with n digits\n    for digits < n {\n        // Increment index by 1\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Count digits in triangular number\n        digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    return index\n}\n",
    "    var i int = 0\n    var tri int = 0\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // Initialize index of triangular number\n    index = 1\n\n    // Initialize value of triangular number\n    tri_num = 1\n\n    // Find triangular number with n digits\n    for len(str(tri_num)) < n:\n        index = index + 1\n        tri_num = tri_num + index\n\n    // Print the index\n    return index\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) >= n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // initialize the first triangular number\n    var t int = 0\n    // initialize the index\n    var i int = 1\n    // loop until the number of digits in triangular number is equal to n\n    for len(fmt.Sprintf(\"%d\", t)) < n {\n        // generate the next triangular number\n        t += i\n        // increment the index\n        i++\n    }\n    // return the index\n    return i - 1\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprint(tri_num)) < n {\n        index++\n        tri_num += index\n    }\n\n    return index\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index of triangular number\n    index = 1\n    // Initialize value of triangular number\n    tri_num = 1\n    // Find triangular number with n digits\n    for len(str(tri_num)) < n:\n        index = index + 1\n        tri_num = tri_num + index\n    // Print the index value\n    return index\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum = sum + i\n        if len(fmt.Sprint(sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var triangle int\n    for i = 1; ; i++ {\n        triangle = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", triangle)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t = t + i\n    }\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) >= n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for sum < n {\n        sum += i\n        i++\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    for len(fmt.Sprintf(\"%d\", triangular_number)) < n {\n        i++\n        triangular_number += i\n    }\n    return i\n}\n",
    "    var i int\n    for i = 1; ; i++ {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) >= n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i, j, k int\n    for i = 1; i < n; i++ {\n        k = i * (i + 1) / 2\n        j = 0\n        for k > 0 {\n            j++\n            k = k / 10\n        }\n        if j == n {\n            return i\n        }\n    }\n    return -1\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize number of digits in triangular number\n    num_digits := 1\n    // Run loop till number of digits in triangular number is not equal to n\n    for num_digits != n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Calculate number of digits in triangular number\n        num_digits = len(fmt.Sprintf(\"%d\", tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n == 2 {\n        return 3\n    }\n    if n == 3 {\n        return 6\n    }\n    if n == 4 {\n        return 6\n    }\n    if n == 5 {\n        return 28\n    }\n    if n == 6 {\n        return 28\n    }\n    if n == 7 {\n        return 36\n    }\n    if n == 8 {\n        return 36\n    }\n    if n == 9 {\n        return 45\n    }\n    if n == 10 {\n        return 45\n    }\n    if n == 11 {\n        return 55\n    }\n    if n == 12 {\n        return 55\n    }\n    if n == 13 {\n        return 66\n    }\n    if n == 14 {\n        return 66\n    }\n    if n == 15 {\n        return 78\n    }\n    if n == 16 {\n        return 78\n    }\n    if n == 17 {\n        return 91\n    }\n    if n == 18 {\n        return 91\n    }\n    if n == 19 {\n        return 105\n    }\n    if n == 20 {\n        return 105\n    }\n    if n == 21 {\n        return 120\n    }\n    if n == 22 {\n        return 120\n    }\n    if n == 23 {\n        return 136\n    }\n    if n == 24 {\n        return 136\n    }\n    if n == 25 {\n        return 153\n    }\n    if n == 26 {\n        return 153\n    }\n    if n == 27 {\n        return 171\n    }\n    if n == 28 {\n        return 171\n    }\n    if n == 29 {\n        return 190\n    }\n    if n == 30 {\n        return 190\n    }\n    if n == 31 {\n        return 210\n    }\n    if n == 32 {\n        return 210\n    }\n    if n == 33 {\n        return 231\n    }\n    if n == 34 {\n        return 231\n    }\n    if n == 35 {\n        return 253\n    }\n    if n == 36 {\n",
    "    // Initialize index and triangular number\n    var index, triangularNumber int = 1, 1\n\n    // Loop till n-digit triangular number is not found\n    for len(fmt.Sprintf(\"%d\", triangularNumber)) < n {\n        index++\n        triangularNumber = triangularNumber + index\n    }\n\n    return index\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t = t + i\n    }\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n    // Initialize value of triangular number\n    tri_num := 1\n    // Initialize value of triangular number\n    // with n digits\n    tri_num_n_digits := 1\n    // Run loop till triangular number has\n    // n digits\n    for tri_num_n_digits < n {\n        // Increment index\n        index = index + 1\n        // Add index to triangular number\n        tri_num = tri_num + index\n        // Update number of digits in\n        // triangular number\n        tri_num_n_digits = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprint(tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    i := 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i * (i + 1) / 2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    // initialize result\n    result := 0\n    // iterate till n becomes 0\n    for n > 0 {\n        // increment result by 1\n        result += 1\n        // subtract n by result\n        n -= result\n    }\n    // return result\n    return result\n}\n",
    "    var i int\n    var tri int\n    for i = 1; len(fmt.Sprintf(\"%d\", tri)) < n; i++ {\n        tri += i\n    }\n    return i\n}\n",
    "    var i int = 1\n    var sum int = 0\n    for {\n        sum += i\n        if len(fmt.Sprint(sum)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i, j int\n    for i = 1; i < n; i++ {\n        j = (i * (i + 1)) / 2\n        if len(fmt.Sprintf(\"%d\", j)) == n {\n            return i\n        }\n    }\n    return -1\n}\n",
    "    var i int = 1\n    var t int = 0\n    for {\n        t = t + i\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int = 1\n    var triangular_number int = 1\n    var length int = 1\n    for length < n {\n        i++\n        triangular_number += i\n        length = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    return i\n}\n",
    "    var i int = 1\n    var tri int = 0\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        tri += i\n        i++\n    }\n    return i - 1\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var sum int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n        i++\n        sum += i\n    }\n    return i\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return find_Index(n-1) + n\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t = t + i\n    }\n}\n",
    "    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i int\n    var triangle int\n    for i = 1; ; i++ {\n        triangle = i * (i + 1) / 2\n        if len(fmt.Sprintf(\"%d\", triangle)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return (n * (n + 1) / 2)\n}\n",
    "    if n < 1 {\n        return -1\n    }\n    if n == 1 {\n        return 1\n    }\n    var i int = 1\n    var sum int = 1\n    for {\n        i++\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            return i\n        }\n    }\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", t)) == n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n",
    "    var i int = 1\n    for {\n        if len(fmt.Sprintf(\"%d\", i*(i+1)/2)) == n {\n            return i\n        }\n        i++\n    }\n}\n",
    "    var i, j, k int\n    for i = 1; i < n; i++ {\n        k = i * (i + 1) / 2\n        j = 1\n        for k /= 10; k > 0; k /= 10 {\n            j++\n        }\n        if j == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int = 1\n    var t int = 1\n    for {\n        if len(fmt.Sprint(t)) == n {\n            return i\n        }\n        i++\n        t += i\n    }\n}\n",
    "    // initialize the index\n    index := 1\n    // initialize the triangular number\n    triangular_number := 1\n    // initialize the number of digits\n    number_of_digits := 1\n    // loop until the number of digits is equal to n\n    for number_of_digits != n {\n        // increment the index\n        index += 1\n        // calculate the triangular number\n        triangular_number += index\n        // calculate the number of digits\n        number_of_digits = len(fmt.Sprintf(\"%d\", triangular_number))\n    }\n    // return the index\n    return index\n}\n",
    "    // Initialize index of triangular number\n    index := 1\n\n    // Initialize value of triangular number\n    tri_num := 1\n\n    // Find triangular number with n digits\n    for len(fmt.Sprintf(\"%d\", tri_num)) < n {\n        index++\n        tri_num = tri_num + index\n    }\n\n    return index\n}\n",
    "    var i int = 1\n    var tri int = 1\n    for len(fmt.Sprintf(\"%d\", tri)) < n {\n        i++\n        tri += i\n    }\n    return i\n}\n",
    "    if n == 1 {\n        return 1\n    }\n    return (n * (n + 1) / 2)\n}\n",
    "    var i int\n    var t int\n    for i = 1; ; i++ {\n        t = i * (i + 1) / 2\n        if t >= n {\n            break\n        }\n    }\n    return i\n}\n",
    "    // Initialize index\n    index := 1\n    // Initialize triangular number\n    tri_num := 1\n    // Initialize length of triangular number\n    length := 1\n    // Loop until length of triangular number is greater than or equal to n\n    for length < n {\n        // Increment index\n        index++\n        // Add index to triangular number\n        tri_num += index\n        // Update length of triangular number\n        length = len(fmt.Sprint(tri_num))\n    }\n    // Return index\n    return index\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if len(fmt.Sprintf(\"%d\", sum)) == n {\n            break\n        }\n    }\n    return i\n}\n",
    "    var i int\n    var sum int\n    for i = 1; ; i++ {\n        sum += i\n        if sum > n {\n            break\n        }\n    }\n    return i\n}\n"
  ]
}