{
  "name": "mbpp_802_count_rotation",
  "language": "go_test.go",
  "prompt": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    var count int = 1\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmppuczlwxm_test.go:50: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmppuczlwxm_test.go:50: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmppuczlwxm_test.go:50: expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmppuczlwxm_test.go:50: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmppuczlwxm_test.go:50: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr) - 1] {\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpyn6r5pbn_test.go:57: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpyn6r5pbn_test.go:57: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpyn6r5pbn_test.go:57: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpyn6r5pbn_test.go:57: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpyn6r5pbn_test.go:57: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n\n    var count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    n := len(arr)\n    low := 0\n    high := n - 1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low + high) / 2\n        next := (mid + 1) % n\n        prev := (mid + n - 1) % n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid+1] {\n            return mid + 1\n        }\n        if arr[mid] > arr[0] {\n            left = mid + 1\n        } else {\n            right = mid\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp9u13dv70_test.go:62: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp9u13dv70_test.go:62: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp9u13dv70_test.go:62: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9u13dv70_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp9u13dv70_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp2a86_442_test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp2a86_442_test.go:48: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp2a86_442_test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp6an2xdbn_test.go:39: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    left := 0\n    right := len(arr) - 1\n    for left < right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid+1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[mid-1] {\n            return mid\n        }\n        if arr[mid] > arr[0] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmppn931vgr_test.go:64: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmppn931vgr_test.go:64: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmppn931vgr_test.go:64: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmppn931vgr_test.go:64: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmppn931vgr_test.go:64: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid+1:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpdys6wuv9_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpdys6wuv9_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpdys6wuv9_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpdys6wuv9_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpdys6wuv9_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpw1g_006f_test.go:53: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else if arr[2] > arr[3] {\n            return 4\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else if arr[2] > arr[3] {\n            return 4\n        } else if arr[3] > arr[4] {\n            return 5\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else if arr[2] > arr[3] {\n            return 4\n        } else if arr[3] > arr[4] {\n            return 5\n        } else if arr[4] > arr[5] {\n            return 6\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else if arr[2] > arr[3] {\n            return 4\n        } else if arr[3] > arr[4\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509827,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqdbgxvh0_test.go:78:33: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the min value\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmphwgr4z70_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmphwgr4z70_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509827,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprqi45u4v_test.go:75:6: expected '(', found TestCount_Rotation\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid - 1] {\n        return count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpwi908pjb_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpwi908pjb_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpwi908pjb_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] {\n        return count_rotation(arr[:mid])\n    }\n    if arr[mid] < arr[mid+1] {\n        return count_rotation(arr[mid:])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpvs375wng_test.go:53: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpvs375wng_test.go:53: expected '%!s(int=0)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpzf7nt_kx_test.go:27\ncommand-line-arguments_test.TestCount_Rotation(0xc000182600)\n\t/tmp/tmpzf7nt_kx_test.go:45 +0x634\ntesting.tRunner(0xc000182600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] < arr[mid - 1] {\n        return mid\n    }\n    if arr[mid] > arr[mid - 1] {\n        return mid + 1\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpepoczxd6_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpepoczxd6_test.go:55: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpepoczxd6_test.go:55: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpepoczxd6_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpepoczxd6_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 0\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr) - 1\n    }\n    left := 0\n    right := len(arr) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid + 1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[mid - 1] {\n            return mid\n        }\n        if arr[mid] > arr[0] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmph_87pb_e_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmph_87pb_e_test.go:58: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmph_87pb_e_test.go:58: expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmph_87pb_e_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] > arr[0] {\n        return mid + count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_jz4dwey_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp_jz4dwey_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp_jz4dwey_test.go:52: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp_jz4dwey_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp_jz4dwey_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        return 2\n    }\n    if len(arr) == 3 {\n        return 3\n    }\n    if len(arr) == 4 {\n        return 4\n    }\n    if len(arr) == 5 {\n        return 5\n    }\n    if len(arr) == 6 {\n        return 6\n    }\n    if len(arr) == 7 {\n        return 7\n    }\n    if len(arr) == 8 {\n        return 8\n    }\n    if len(arr) == 9 {\n        return 9\n    }\n    if len(arr) == 10 {\n        return 10\n    }\n    if len(arr) == 11 {\n        return 11\n    }\n    if len(arr) == 12 {\n        return 12\n    }\n    if len(arr) == 13 {\n        return 13\n    }\n    if len(arr) == 14 {\n        return 14\n    }\n    if len(arr) == 15 {\n        return 15\n    }\n    if len(arr) == 16 {\n        return 16\n    }\n    if len(arr) == 17 {\n        return 17\n    }\n    if len(arr) == 18 {\n        return 18\n    }\n    if len(arr) == 19 {\n        return 19\n    }\n    if len(arr) == 20 {\n        return 20\n    }\n    if len(arr) == 21 {\n        return 21\n    }\n    if len(arr) == 22 {\n        return 22\n    }\n    if len(arr) == 23 {\n        return 23\n    }\n    if len(arr) == 24 {\n        return 24\n    }\n    if len(arr) == 25 {\n        return 25\n    }\n    if len(arr) == 26 {\n        return 26\n    }\n    if len(arr) == 27 {\n        return 27\n    }\n    if len(arr) == 28 {\n        return 28\n    }\n    if len(arr) == 29 {\n        return 29\n    }\n   \nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124082,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwnyit90b_test.go:101:6: expected '(', found TestCount_Rotation\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp4b0nardf_test.go:49: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp4b8gu_tf_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum value\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpw4gys5wr_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpw4gys5wr_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpiymg9ynz_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpiymg9ynz_test.go:34 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1] {\n        return count_rotation(arr[mid:])\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1] {\n        return count_rotation(arr[:mid])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpxyn_ovyj_test.go:56: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpxyn_ovyj_test.go:56: expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpxyn_ovyj_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    var mid int = len(arr)/2\n    if arr[mid] < arr[mid-1] {\n        return mid\n    }\n    if arr[mid] > arr[mid-1] {\n        return mid + 1\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpot3u34em_test.go:56: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpot3u34em_test.go:56: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpot3u34em_test.go:56: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpot3u34em_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpot3u34em_test.go:56: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    mid := len(arr) / 2\n    if arr[0] > arr[mid] {\n        return count_rotation(arr[:mid])\n    }\n    return count_rotation(arr[mid:])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpmxdabglz_test.go:46: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpmxdabglz_test.go:46: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpmxdabglz_test.go:46: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmppbvrk37e_test.go:11\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmppbvrk37e_test.go:28 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    var min int = arr[0]\n    var min_index int = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp7yca1dmc_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp7yca1dmc_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        return 1\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        if arr[4] > arr[5] {\n            return 6\n        }\n        return 1\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        if\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124082,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9fduqlxu_test.go:90:6: expected '(', found TestCount_Rotation\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid + 1:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp0j53ouss_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp0j53ouss_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp0j53ouss_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp0j53ouss_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp0j53ouss_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124084,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpvw1vk12v_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000186300)\n\t/tmp/tmpvw1vk12v_test.go:30 +0x626\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] < arr[mid-1] {\n        return mid\n    }\n    if arr[mid] > arr[mid-1] {\n        return mid + 1\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124084,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpbo0lq_ep_test.go:55: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpbo0lq_ep_test.go:55: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpbo0lq_ep_test.go:55: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpbo0lq_ep_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpbo0lq_ep_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else {\n            return 3\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else {\n            return 4\n        }\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else {\n            return 5\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else if arr[4] > arr[5] {\n            return 5\n        } else {\n            return 6\n        }\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124085,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7y1fxpep_test.go:78:33: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp76r27kel_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp76r27kel_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpkz86ef4j_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000182600)\n\t/tmp/tmpkz86ef4j_test.go:26 +0x606\ntesting.tRunner(0xc000182600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 0\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 0\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else {\n            return 0\n        }\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else {\n            return 0\n        }\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else {\n            return 0\n        }\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4] {\n            return 4\n        } else if arr[4] > arr[5] {\n            return 5\n        } else {\n            return 0\n        }\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else if arr[2] > arr[3] {\n            return 3\n        } else if arr[3] > arr[4\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124085,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4ju5pz_a_test.go:78:33: expected ']', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i-1] > arr[i] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    var i int\n    for i = 1; i < len(arr); i++ {\n        if arr[i-1] > arr[i] {\n            return i\n        }\n    }\n    return 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpq4kjnntv_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpq4kjnntv_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpq4kjnntv_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpq4kjnntv_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpq4kjnntv_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpqgr2ffm9_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpqgr2ffm9_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] == arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmps69e76mm_test.go:57: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmps69e76mm_test.go:57: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmps69e76mm_test.go:57: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmps69e76mm_test.go:57: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmps69e76mm_test.go:57: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            return i + 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpf00o7gmv_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpf00o7gmv_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpf00o7gmv_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpf00o7gmv_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpf00o7gmv_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low + high) / 2\n        next := (mid + 1) % len(arr)\n        prev := (mid + len(arr) - 1) % len(arr)\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpuoe8jwfr_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpuoe8jwfr_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp1brjsfug_test.go:25\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp1brjsfug_test.go:43 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.023s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpqgr2ffm9_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpqgr2ffm9_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i:=0; i<len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpmswodeo4_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpmswodeo4_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp153nwuvm_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp153nwuvm_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp153nwuvm_test.go:52: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp153nwuvm_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp153nwuvm_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    return count_rotation(arr[1:]) + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpyukoumg__test.go:48: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpyukoumg__test.go:48: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpyukoumg__test.go:48: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpyukoumg__test.go:48: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpyukoumg__test.go:48: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpcum4_ziv_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpcum4_ziv_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpcum4_ziv_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpcum4_ziv_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpcum4_ziv_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.025s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpiymg9ynz_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpiymg9ynz_test.go:34 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    var low, high, mid int\n    low = 0\n    high = len(arr) - 1\n    for low <= high {\n        mid = (low + high) / 2\n        if arr[mid] > arr[mid+1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[mid-1] {\n            return mid\n        }\n        if arr[mid] > arr[0] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp594ah2lp_test.go:66: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp594ah2lp_test.go:66: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp594ah2lp_test.go:66: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp594ah2lp_test.go:66: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp594ah2lp_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprkm504wd_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmprkm504wd_test.go:34 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpiymg9ynz_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpiymg9ynz_test.go:34 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpkz86ef4j_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000182600)\n\t/tmp/tmpkz86ef4j_test.go:26 +0x606\ntesting.tRunner(0xc000182600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    var mid int = len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpp93n34mq_test.go:51: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpp93n34mq_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpp93n34mq_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpjyo6m0b0_test.go:24\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpjyo6m0b0_test.go:41 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i + 1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpna89dwc7_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpna89dwc7_test.go:34 +0x634\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1 + count_rotation(arr[mid+1:])\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1 + count_rotation(arr[:mid])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpmmx40l_h_test.go:62: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpmmx40l_h_test.go:62: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpmmx40l_h_test.go:62: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpmmx40l_h_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpmmx40l_h_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element in the array\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp89pycekm_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp89pycekm_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpv1vhddxh_test.go:48: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpe7b2v650_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmpe7b2v650_test.go:34 +0x634\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpsxcup5xm_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpsxcup5xm_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpsxcup5xm_test.go:53: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpsxcup5xm_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpsxcup5xm_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpdiy00sly_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpdiy00sly_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            return i\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp73nlvw84_test.go:53: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the index of the minimum value\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[min_index] {\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_d6yq48h_test.go:37: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp_d6yq48h_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[0] < arr[mid] {\n        return count_rotation(arr[mid:]) + mid\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpjlhhl_uj_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpjlhhl_uj_test.go:49: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpjlhhl_uj_test.go:49: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjlhhl_uj_test.go:49: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.021s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i, j int\n    for i = 0; i < len(arr); i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxqq9iqs4_test.go:10:12: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    for i := 1; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            return i + 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpnn0cfrsz_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpnn0cfrsz_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpnn0cfrsz_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpnn0cfrsz_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpnn0cfrsz_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    min := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == min {\n            return i\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpoq63v1mn_test.go:44: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpoq63v1mn_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmppiw0534s_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmppiw0534s_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmppiw0534s_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmppiw0534s_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmppiw0534s_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        return 2\n    }\n    if arr[0] < arr[1] {\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return 0\n    }\n    if arr[0] > arr[1] {\n        return 1\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpuovzc3bp_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpuovzc3bp_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpuovzc3bp_test.go:51: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpuovzc3bp_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpuovzc3bp_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp1cmitwpr_test.go:18\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp1cmitwpr_test.go:35 +0x634\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid+1\n    }\n    if arr[mid] < arr[mid-1] {\n        return count_rotation(arr[:mid])\n    }\n    return count_rotation(arr[mid:])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp98gzq84v_test.go:52: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp98gzq84v_test.go:52: expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp98gzq84v_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp98gzq84v_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid+1:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp4dy9qzrh_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp4dy9qzrh_test.go:51: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp4dy9qzrh_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp4dy9qzrh_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i + 1] {\n            return i + 1\n        }\n    }\n\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpy5bna5se_test.go:19\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpy5bna5se_test.go:37 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpuoe8jwfr_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpuoe8jwfr_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpeq35wqe2_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpeq35wqe2_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpeq35wqe2_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpeq35wqe2_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpeq35wqe2_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpe1g9s422_test.go:23\ncommand-line-arguments_test.TestCount_Rotation(0xc000102600)\n\t/tmp/tmpe1g9s422_test.go:40 +0x634\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    n := len(arr)\n    low := 0\n    high := n - 1\n    for low <= high {\n        if arr[low] <= arr[high] {\n            return low\n        }\n        mid := (low + high) / 2\n        next := (mid + 1) % n\n        prev := (mid + n - 1) % n\n        if arr[mid] <= arr[next] && arr[mid] <= arr[prev] {\n            return mid\n        } else if arr[mid] <= arr[high] {\n            high = mid - 1\n        } else if arr[mid] >= arr[low] {\n            low = mid + 1\n        }\n    }\n    return -1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509854,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] {\n        return count_rotation(arr[:mid])\n    }\n    return count_rotation(arr[mid:])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp7op4na05_test.go:58: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp7op4na05_test.go:58: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp7op4na05_test.go:58: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp7op4na05_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp7op4na05_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1] {\n        return count_rotation(arr[mid+1:])\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1] {\n        return count_rotation(arr[:mid])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp0fmsmgna_test.go:62: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp0fmsmgna_test.go:62: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp0fmsmgna_test.go:62: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp0fmsmgna_test.go:62: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp0fmsmgna_test.go:62: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp6itgtuxz_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the min value\n    min := arr[0]\n    min_index := 0\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < min {\n            min = arr[i]\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpk5pdjlg2_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpk5pdjlg2_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) <= 1 {\n        return 0\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 0\n    }\n    left := 0\n    right := len(arr) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid + 1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[left] {\n            right = mid - 1\n        } else {\n            left = mid + 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpuvpaw07u_test.go:49: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpuvpaw07u_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpduj3bxip_test.go:23\ncommand-line-arguments_test.TestCount_Rotation(0xc000186300)\n\t/tmp/tmpduj3bxip_test.go:40 +0x634\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[1] {\n        return 1\n    }\n    if arr[len(arr) - 1] > arr[0] {\n        return len(arr)\n    }\n    low := 0\n    high := len(arr) - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] > arr[mid + 1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[mid - 1] {\n            return mid\n        }\n        if arr[mid] > arr[0] {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmptqe45ah2_test.go:65: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmptqe45ah2_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmptqe45ah2_test.go:65: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmptqe45ah2_test.go:65: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmptqe45ah2_test.go:65: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid + 1\n    }\n    if arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1] {\n        return count_rotation(arr[mid+1:])\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1] {\n        return count_rotation(arr[:mid])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpjczq_uap_test.go:61: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpjczq_uap_test.go:61: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpjczq_uap_test.go:61: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpjczq_uap_test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpjczq_uap_test.go:61: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpu64kanii_test.go:42: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    low := 0\n    high := len(arr) - 1\n    for low < high {\n        mid := (low + high) / 2\n        if arr[mid] > arr[high] {\n            low = mid + 1\n        } else {\n            high = mid\n        }\n    }\n    return low\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp_edf0w9j_test.go:40: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpe7b2v650_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmpe7b2v650_test.go:34 +0x634\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpjtkue3_3_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmpjtkue3_3_test.go:26 +0x606\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.018s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return mid + 1 + count_rotation(arr[mid + 1:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpcesrjkl4_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpcesrjkl4_test.go:51: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpcesrjkl4_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpcesrjkl4_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] < arr[0] {\n        return count_rotation(arr[:mid])\n    } else {\n        return count_rotation(arr[mid:])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpk8ivwbff_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpk8ivwbff_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpk8ivwbff_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpk8ivwbff_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpk8ivwbff_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i-1] {\n            count = i\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        if arr[1] > arr[2] {\n            return 2\n        }\n        return 3\n    }\n    if arr[0] > arr[1] {\n        return 1\n    }\n    if arr[len(arr)-1] < arr[len(arr)-2] {\n        return len(arr)\n    }\n    left := 0\n    right := len(arr) - 1\n    for left <= right {\n        mid := (left + right) / 2\n        if arr[mid] > arr[mid+1] {\n            return mid + 1\n        }\n        if arr[mid] < arr[mid-1] {\n            return mid\n        }\n        if arr[mid] > arr[0] {\n            left = mid + 1\n        } else {\n            right = mid - 1\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpuzh2kx87_test.go:73: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    // find the minimum element\n    min := arr[0]\n    min_index := 0\n    for i, v := range arr {\n        if v < min {\n            min = v\n            min_index = i\n        }\n    }\n    return min_index\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpye9vl9yt_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 1\n        } else if arr[1] > arr[2] {\n            return 2\n        } else {\n            return 3\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1] {\n        return mid + 1\n    } else if arr[mid] < arr[mid - 1] && arr[mid] < arr[mid + 1] {\n        return mid\n    } else if arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1] {\n        return count_rotation(arr[:mid])\n    } else {\n        return count_rotation(arr[mid:])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpftdwodso_test.go:61: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpfdixzs70_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpfdixzs70_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpfdixzs70_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpfdixzs70_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpfdixzs70_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp76r27kel_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp76r27kel_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpkpmeo_eu_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpkpmeo_eu_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpkpmeo_eu_test.go:52: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpkpmeo_eu_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpkpmeo_eu_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return 1\n    }\n\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpw5u54ec0_test.go:27\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpw5u54ec0_test.go:45 +0x634\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return len(arr)\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return 1\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp4s_9uxe6_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp4s_9uxe6_test.go:52: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp4s_9uxe6_test.go:52: expected '%!s(int=0)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp4s_9uxe6_test.go:52: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        }\n        return 2\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid+1\n    }\n    if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid+1\n    }\n    if arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1] {\n        return count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpteqozybr_test.go:58: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpteqozybr_test.go:58: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpteqozybr_test.go:58: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpteqozybr_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpteqozybr_test.go:58: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else {\n            return 1\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid-1] && arr[mid] > arr[mid+1] {\n        return mid + 1\n    } else if arr[mid] < arr[mid-1] && arr[mid] < arr[mid+1] {\n        return mid\n    } else if arr[mid] < arr[mid-1] && arr[mid] > arr[mid+1] {\n        return count_rotation(arr[:mid])\n    } else {\n        return count_rotation(arr[mid:])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpi5s11sl__test.go:61: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpi5s11sl__test.go:61: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpi5s11sl__test.go:61: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if arr[0] < arr[len(arr)-1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr)-1] {\n        return len(arr)\n    }\n    mid := len(arr)/2\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    }\n    return count_rotation(arr[:mid])\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpleqgt0xt_test.go:52: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpleqgt0xt_test.go:52: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpleqgt0xt_test.go:52: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpleqgt0xt_test.go:52: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpleqgt0xt_test.go:52: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpbt30yq4m_test.go:36: expected '%!s(int=1)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        return 1\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        return 1\n    }\n    if len(arr) == 4 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        return 1\n    }\n    if len(arr) == 5 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        return 1\n    }\n    if len(arr) == 6 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        if arr[4] > arr[5] {\n            return 6\n        }\n        return 1\n    }\n    if len(arr) == 7 {\n        if arr[0] > arr[1] {\n            return 2\n        }\n        if arr[1] > arr[2] {\n            return 3\n        }\n        if arr[2] > arr[3] {\n            return 4\n        }\n        if arr[3] > arr[4] {\n            return 5\n        }\n        if\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124082,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9fduqlxu_test.go:90:6: expected '(', found TestCount_Rotation\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124084,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpvw1vk12v_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000186300)\n\t/tmp/tmpvw1vk12v_test.go:30 +0x626\ntesting.tRunner(0xc000186300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var i int\n    for i = 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            break\n        }\n    }\n    return i + 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp9veddnz7_test.go:36: expected '%!s(int=0)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    if arr[0] < arr[len(arr) - 1] {\n        return 1\n    }\n    if arr[0] > arr[len(arr) - 1] {\n        return len(arr)\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[0] {\n        return 1 + count_rotation(arr[mid:])\n    } else {\n        return 1 + count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpr5mhy845_test.go:54: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpr5mhy845_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpr5mhy845_test.go:54: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpr5mhy845_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmpr5mhy845_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if len(arr) == 3 {\n        if arr[0] > arr[1] {\n            return 2\n        } else if arr[1] > arr[2] {\n            return 3\n        } else {\n            return 1\n        }\n    }\n    if arr[0] > arr[1] {\n        return 2\n    }\n    if arr[len(arr)-1] < arr[len(arr)-2] {\n        return len(arr)\n    }\n    for i := 1; i < len(arr)-1; i++ {\n        if arr[i] > arr[i+1] {\n            return i+1\n        }\n    }\n    return 1\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp35w6gd_1_test.go:63: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp35w6gd_1_test.go:63: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp35w6gd_1_test.go:63: expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            return i + 1\n        }\n    }\n    return len(arr)\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124088,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpe7b2v650_test.go:17\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmpe7b2v650_test.go:34 +0x634\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] < arr[mid - 1] {\n        return mid\n    }\n    if arr[mid] < arr[0] {\n        return count_rotation(arr[:mid])\n    } else {\n        return count_rotation(arr[mid:])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpp2xqh7cq_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i+1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124090,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpj9zunksu_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmpj9zunksu_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int = 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmp894gjx6s_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmp894gjx6s_test.go:30 +0x626\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    count := 0\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124086,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmpuoe8jwfr_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc000001380)\n\t/tmp/tmpuoe8jwfr_test.go:26 +0x606\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 2\n        } else {\n            return 1\n        }\n    }\n\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid + 1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid - 1] {\n        return mid\n    }\n    if arr[mid] > arr[0] {\n        return count_rotation(arr[mid:])\n    } else {\n        return count_rotation(arr[:mid])\n    }\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124091,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmpuig4_ewa_test.go:55: expected '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpuig4_ewa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    l := len(arr)\n    if l == 0 {\n        return 0\n    }\n    if l == 1 {\n        return 1\n    }\n    if l == 2 {\n        return 2\n    }\n    if arr[0] < arr[l-1] {\n        return 1\n    }\n    if arr[0] > arr[l-1] {\n        return l\n    }\n    for i := 1; i < l; i++ {\n        if arr[i] < arr[i-1] {\n            return i+1\n        }\n    }\n    return l\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124091,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__0 (0.00s)\n        tmp7vdlpzyr_test.go:51: expected '%!s(int=1)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmp7vdlpzyr_test.go:51: expected '%!s(int=2)', got '%!s(int=5)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmp7vdlpzyr_test.go:51: expected '%!s(int=3)', got '%!s(int=6)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmp7vdlpzyr_test.go:51: expected '%!s(int=0)', got '%!s(int=1)'\n    --- FAIL: TestCount_Rotation/test_num__4 (0.00s)\n        tmp7vdlpzyr_test.go:51: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > arr[i+1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124083,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc0001c6000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_rotation(...)\n\t/tmp/tmprlakqkmk_test.go:12\ncommand-line-arguments_test.TestCount_Rotation(0xc0001a2300)\n\t/tmp/tmprlakqkmk_test.go:30 +0x626\ntesting.tRunner(0xc0001a2300, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    var count int\n    for i := 0; i < len(arr) - 1; i++ {\n        if arr[i] > arr[i + 1] {\n            count = i + 1\n            break\n        }\n    }\n    return count\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509828,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_rotation_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\nfunc count_rotation(arr []int) int {\n    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return 1\n    }\n    if len(arr) == 2 {\n        if arr[0] > arr[1] {\n            return 1\n        } else {\n            return 2\n        }\n    }\n    mid := len(arr) / 2\n    if arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1] {\n        return mid + 1\n    }\n    if arr[mid] < arr[mid - 1] && arr[mid] < arr[mid + 1] {\n        return mid + 1\n    }\n    if arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1] {\n        return count_rotation(arr[:mid])\n    }\n    if arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1] {\n        return count_rotation(arr[mid:])\n    }\n    return 0\n}\n\nfunc TestCount_Rotation(t *testing.T) {\n  candidate := count_rotation\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 1}), expected: 1 },\n     { actual: candidate([]int{4, 5, 1, 2, 3}), expected: 2 },\n     { actual: candidate([]int{7, 8, 9, 1, 2, 3}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3}), expected: 0 },\n     { actual: candidate([]int{1, 3, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124091,
      "stdout": "--- FAIL: TestCount_Rotation (0.00s)\n    --- FAIL: TestCount_Rotation/test_num__1 (0.00s)\n        tmpaqui14z8_test.go:56: expected '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestCount_Rotation/test_num__2 (0.00s)\n        tmpaqui14z8_test.go:56: expected '%!s(int=3)', got '%!s(int=4)'\n    --- FAIL: TestCount_Rotation/test_num__3 (0.00s)\n        tmpaqui14z8_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}