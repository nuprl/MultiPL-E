{
  "name": "mbpp_630_get_coordinates",
  "language": "go_test.go",
  "prompt": "package get_coordinates_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract all the adjacent coordinates of the given coordinate tuple.\nfunc get_coordinates(test_tup []interface{}) [][]int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestGet_Coordinates(t *testing.T) {\n  candidate := get_coordinates\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{3, 4}), expected: [][]int{[]int{2, 3}, []int{2, 4}, []int{2, 5}, []int{3, 3}, []int{3, 4}, []int{3, 5}, []int{4, 3}, []int{4, 4}, []int{4, 5}} },\n     { actual: candidate([]interface{}{4, 5}), expected: [][]int{[]int{3, 4}, []int{3, 5}, []int{3, 6}, []int{4, 4}, []int{4, 5}, []int{4, 6}, []int{5, 4}, []int{5, 5}, []int{5, 6}} },\n     { actual: candidate([]interface{}{5, 6}), expected: [][]int{[]int{4, 5}, []int{4, 6}, []int{4, 7}, []int{5, 5}, []int{5, 6}, []int{5, 7}, []int{6, 5}, []int{6, 6}, []int{6, 7}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result [][]int\n    var x, y int\n    x = test_tup[0].(int)\n    y = test_tup[1].(int)\n    result = append(result, []int{x-1, y-1})\n    result = append(result, []int{x-1, y})\n    result = append(result, []int{x-1, y+1})\n    result = append(result, []int{x, y-1})\n    result = append(result, []int{x, y+1})\n    result = append(result, []int{x+1, y-1})\n    result = append(result, []int{x+1, y})\n    result = append(result, []int{x+1, y+1})\n    return result\n}\n",
    "    var result [][]int\n    x := test_tup[0].(int)\n    y := test_tup[1].(int)\n    result = append(result, []int{x-1, y-1})\n    result = append(result, []int{x-1, y})\n    result = append(result, []int{x-1, y+1})\n    result = append(result, []int{x, y-1})\n    result = append(result, []int{x, y+1})\n    result = append(result, []int{x+1, y-1})\n    result = append(result, []int{x+1, y})\n    result = append(result, []int{x+1, y+1})\n    return result\n}\n",
    "    var result [][]int\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []int:\n            result = append(result, v.([]int))\n        case []interface{}:\n            result = append(result, get_coordinates(v.([]interface{}))...)\n        }\n    }\n    return result\n}\n",
    "    var coordinates [][]int\n    for i := 0; i < len(test_tup); i++ {\n        var coordinate []int\n        for j := 0; j < len(test_tup[i].([]interface{})); j++ {\n            coordinate = append(coordinate, int(test_tup[i].([]interface{})[j].(float64)))\n        }\n        coordinates = append(coordinates, coordinate)\n    }\n    return coordinates\n}\n",
    "    var result [][]int\n    for i := 0; i < len(test_tup); i++ {\n        var tup []int\n        tup = append(tup, test_tup[i].([]int)...)\n        result = append(result, tup)\n    }\n    return result\n}\n",
    "    var result [][]int\n    var x, y int\n    x = test_tup[0].(int)\n    y = test_tup[1].(int)\n    result = append(result, []int{x-1, y-1})\n    result = append(result, []int{x-1, y})\n    result = append(result, []int{x-1, y+1})\n    result = append(result, []int{x, y-1})\n    result = append(result, []int{x, y+1})\n    result = append(result, []int{x+1, y-1})\n    result = append(result, []int{x+1, y})\n    result = append(result, []int{x+1, y+1})\n    return result\n}\n",
    "    var result [][]int\n    var x, y int\n    x = test_tup[0].(int)\n    y = test_tup[1].(int)\n    result = append(result, []int{x, y})\n    result = append(result, []int{x, y + 1})\n    result = append(result, []int{x, y - 1})\n    result = append(result, []int{x + 1, y})\n    result = append(result, []int{x - 1, y})\n    return result\n}\n",
    "    var result [][]int\n    var x int = test_tup[0].(int)\n    var y int = test_tup[1].(int)\n    var x_coordinates = []int{x-1, x, x+1}\n    var y_coordinates = []int{y-1, y, y+1}\n    for _, x_coordinate := range x_coordinates {\n        for _, y_coordinate := range y_coordinates {\n            result = append(result, []int{x_coordinate, y_coordinate})\n        }\n    }\n    return result\n}\n",
    "    var result [][]int\n    for i := 0; i < len(test_tup); i++ {\n        var temp []int\n        for j := 0; j < len(test_tup); j++ {\n            if i != j {\n                temp = append(temp, test_tup[j].(int))\n            }\n        }\n        result = append(result, temp)\n    }\n    return result\n}\n",
    "    var result [][]int\n    for i := 0; i < len(test_tup); i++ {\n        for j := 0; j < len(test_tup); j++ {\n            if i == j {\n                continue\n            }\n            var temp []int\n            temp = append(temp, test_tup[i].(int), test_tup[j].(int))\n            result = append(result, temp)\n        }\n    }\n    return result\n}\n",
    "    var result [][]int\n    x := test_tup[0].(int)\n    y := test_tup[1].(int)\n    result = append(result, []int{x, y})\n    result = append(result, []int{x, y + 1})\n    result = append(result, []int{x, y - 1})\n    result = append(result, []int{x + 1, y})\n    result = append(result, []int{x + 1, y + 1})\n    result = append(result, []int{x + 1, y - 1})\n    result = append(result, []int{x - 1, y})\n    result = append(result, []int{x - 1, y + 1})\n    result = append(result, []int{x - 1, y - 1})\n    return result\n}\n",
    "    var coordinates [][]int\n    var x, y int\n    x = test_tup[0].(int)\n    y = test_tup[1].(int)\n    coordinates = append(coordinates, []int{x, y})\n    coordinates = append(coordinates, []int{x, y + 1})\n    coordinates = append(coordinates, []int{x, y - 1})\n    coordinates = append(coordinates, []int{x + 1, y})\n    coordinates = append(coordinates, []int{x + 1, y + 1})\n    coordinates = append(coordinates, []int{x + 1, y - 1})\n    coordinates = append(coordinates, []int{x - 1, y})\n    coordinates = append(coordinates, []int{x - 1, y + 1})\n    coordinates = append(coordinates, []int{x - 1, y - 1})\n    return coordinates\n}\n",
    "    var coordinates [][]int\n    for _, tup := range test_tup {\n        switch tup.(type) {\n        case int:\n            coordinates = append(coordinates, []int{tup.(int)})\n        case []interface{}:\n            coordinates = append(coordinates, get_coordinates(tup.([]interface{}))...)\n        }\n    }\n    return coordinates\n}\n",
    "    var result [][]int\n    var x, y int\n    x = test_tup[0].(int)\n    y = test_tup[1].(int)\n    result = append(result, []int{x, y+1})\n    result = append(result, []int{x, y-1})\n    result = append(result, []int{x+1, y})\n    result = append(result, []int{x-1, y})\n    return result\n}\n",
    "    var result [][]int\n    var x int = test_tup[0].(int)\n    var y int = test_tup[1].(int)\n    var x_coordinates = []int{x-1, x, x+1}\n    var y_coordinates = []int{y-1, y, y+1}\n    for _, x_coordinate := range x_coordinates {\n        for _, y_coordinate := range y_coordinates {\n            result = append(result, []int{x_coordinate, y_coordinate})\n        }\n    }\n    return result\n}\n",
    "    var coordinates [][]int\n    for i := 0; i < len(test_tup); i++ {\n        for j := 0; j < len(test_tup[i].([]interface{})); j++ {\n            coordinates = append(coordinates, []int{i, j})\n        }\n    }\n    return coordinates\n}\n",
    "    var coordinates [][]int\n    x := test_tup[0].(int)\n    y := test_tup[1].(int)\n    coordinates = append(coordinates, []int{x, y})\n    coordinates = append(coordinates, []int{x, y + 1})\n    coordinates = append(coordinates, []int{x, y - 1})\n    coordinates = append(coordinates, []int{x + 1, y})\n    coordinates = append(coordinates, []int{x - 1, y})\n    return coordinates\n}\n",
    "    var result [][]int\n    var x int\n    var y int\n    for _, val := range test_tup {\n        switch val.(type) {\n        case int:\n            if x == 0 {\n                x = val.(int)\n            } else {\n                y = val.(int)\n            }\n        }\n    }\n    result = append(result, []int{x, y})\n    result = append(result, []int{x, y + 1})\n    result = append(result, []int{x, y - 1})\n    result = append(result, []int{x + 1, y})\n    result = append(result, []int{x + 1, y + 1})\n    result = append(result, []int{x + 1, y - 1})\n    result = append(result, []int{x - 1, y})\n    result = append(result, []int{x - 1, y + 1})\n    result = append(result, []int{x - 1, y - 1})\n    return result\n}\n",
    "    var coordinates [][]int\n    x := test_tup[0].(int)\n    y := test_tup[1].(int)\n    coordinates = append(coordinates, []int{x-1, y-1})\n    coordinates = append(coordinates, []int{x-1, y})\n    coordinates = append(coordinates, []int{x-1, y+1})\n    coordinates = append(coordinates, []int{x, y-1})\n    coordinates = append(coordinates, []int{x, y+1})\n    coordinates = append(coordinates, []int{x+1, y-1})\n    coordinates = append(coordinates, []int{x+1, y})\n    coordinates = append(coordinates, []int{x+1, y+1})\n    return coordinates\n}\n",
    "    var result [][]int\n    var x int = test_tup[0].(int)\n    var y int = test_tup[1].(int)\n    var x_coordinates []int = []int{x-1, x, x+1}\n    var y_coordinates []int = []int{y-1, y, y+1}\n    for _, x_coordinate := range x_coordinates {\n        for _, y_coordinate := range y_coordinates {\n            if x_coordinate != x || y_coordinate != y {\n                result = append(result, []int{x_coordinate, y_coordinate})\n            }\n        }\n    }\n    return result\n}\n"
  ]
}