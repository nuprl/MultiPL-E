{
  "name": "mbpp_599_sum_average",
  "language": "go_test.go",
  "prompt": "package sum_average_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find sum and average of first n natural numbers.\nfunc sum_average(number int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSum_Average(t *testing.T) {\n  candidate := sum_average\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: []interface{}{55, 5.5} },\n     { actual: candidate(15), expected: []interface{}{120, 8.0} },\n     { actual: candidate(20), expected: []interface{}{210, 10.5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    var sum int = 0\n    var average float64 = 0.0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average = float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    var sum int\n    var average float64\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average = float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    var sum int\n    var average float64\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average = float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    var sum int = 0\n    var average float64 = 0\n\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n\n    average = float64(sum) / float64(number)\n\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    var sum int\n    var average float64\n    var result []interface{}\n\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n\n    average = float64(sum) / float64(number)\n\n    result = append(result, sum, average)\n\n    return result\n}\n",
    "    var sum int\n    var average float64\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average = float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average := float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average := sum / number\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average := float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average := float64(sum) / float64(number)\n    return []interface{}{sum, average}\n}\n",
    "    sum := 0\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    return []interface{}{sum, float64(sum) / float64(number)}\n}\n",
    "    var sum int\n    var average float32\n    for i := 1; i <= number; i++ {\n        sum += i\n    }\n    average = float32(sum) / float32(number)\n    return []interface{}{sum, average}\n}\n"
  ]
}