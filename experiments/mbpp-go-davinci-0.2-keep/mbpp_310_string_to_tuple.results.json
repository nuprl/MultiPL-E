{
  "name": "mbpp_310_string_to_tuple",
  "language": "go_test.go",
  "prompt": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, char := range str1 {\n        tup = append(tup, char)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, c := range str1 {\n        tuple = append(tuple, c)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, char := range str1 {\n        tup = append(tup, char)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, c := range str1 {\n        tup = append(tup, c)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpczb2ybvb_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpczb2ybvb_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpczb2ybvb_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, c := range str1 {\n        tuple = append(tuple, c)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, s := range str1 {\n        tuple = append(tuple, s)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpegegszm1_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpegegszm1_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpegegszm1_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    tuple := make([]interface{}, len(str1))\n    for i := 0; i < len(str1); i++ {\n        tuple[i] = str1[i]\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp1kvhan1m_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(uint8=112) %!s(uint8=121) %!s(uint8=116) %!s(uint8=104) %!s(uint8=111) %!s(uint8=110) %!s(uint8=32) %!s(uint8=51) %!s(uint8=46) %!s(uint8=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp1kvhan1m_test.go:32: expected '[i t e m 1]', got '[%!s(uint8=105) %!s(uint8=116) %!s(uint8=101) %!s(uint8=109) %!s(uint8=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp1kvhan1m_test.go:32: expected '[1 5 . 1 0]', got '[%!s(uint8=49) %!s(uint8=53) %!s(uint8=46) %!s(uint8=49) %!s(uint8=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var t []interface{}\n    for _, v := range str1 {\n        t = append(t, v)\n    }\n    return t\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpkmtva9lz_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpkmtva9lz_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpkmtva9lz_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, char := range str1 {\n        tup = append(tup, char)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, char := range str1 {\n        tup = append(tup, char)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var result []interface{}\n    for _, char := range str1 {\n        result = append(result, char)\n    }\n    return result\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpyeiqfy3g_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var str2 []interface{}\n    for _, char := range str1 {\n        str2 = append(str2, char)\n    }\n    return str2\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpjgbk7t7x_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpjgbk7t7x_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpjgbk7t7x_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    tuple := make([]interface{}, len(str1))\n    for i, v := range str1 {\n        tuple[i] = v\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpxap984rl_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpxap984rl_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpxap984rl_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, v := range str1 {\n        tuple = append(tuple, v)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpuk54yuz3_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tup []interface{}\n    for _, char := range str1 {\n        tup = append(tup, char)\n    }\n    return tup\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmppemeqiwq_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, c := range str1 {\n        tuple = append(tuple, c)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, c := range str1 {\n        tuple = append(tuple, c)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122955,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmpejupf0vn_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_to_tuple_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a given string to a tuple of characters.\nfunc string_to_tuple(str1 string) []interface{} {\n    var tuple []interface{}\n    for _, char := range str1 {\n        tuple = append(tuple, char)\n    }\n    return tuple\n}\n\nfunc TestString_To_Tuple(t *testing.T) {\n  candidate := string_to_tuple\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python 3.0\"), expected: []interface{}{\"p\", \"y\", \"t\", \"h\", \"o\", \"n\", \"3\", \".\", \"0\"} },\n     { actual: candidate(\"item1\"), expected: []interface{}{\"i\", \"t\", \"e\", \"m\", \"1\"} },\n     { actual: candidate(\"15.10\"), expected: []interface{}{\"1\", \"5\", \".\", \"1\", \"0\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510117,
      "stdout": "--- FAIL: TestString_To_Tuple (0.00s)\n    --- FAIL: TestString_To_Tuple/test_num__0 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[p y t h o n 3 . 0]', got '[%!s(int32=112) %!s(int32=121) %!s(int32=116) %!s(int32=104) %!s(int32=111) %!s(int32=110) %!s(int32=32) %!s(int32=51) %!s(int32=46) %!s(int32=48)]'\n    --- FAIL: TestString_To_Tuple/test_num__1 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[i t e m 1]', got '[%!s(int32=105) %!s(int32=116) %!s(int32=101) %!s(int32=109) %!s(int32=49)]'\n    --- FAIL: TestString_To_Tuple/test_num__2 (0.00s)\n        tmp5a6h90ri_test.go:32: expected '[1 5 . 1 0]', got '[%!s(int32=49) %!s(int32=53) %!s(int32=46) %!s(int32=49) %!s(int32=48)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}