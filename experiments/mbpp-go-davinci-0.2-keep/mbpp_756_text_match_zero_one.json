{
  "name": "mbpp_756_text_match_zero_one",
  "language": "go_test.go",
  "prompt": "package text_match_zero_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\nfunc text_match_zero_one(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_Zero_One(t *testing.T) {\n  candidate := text_match_zero_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abbbba\"), expected: true },\n     { actual: candidate(\"dsabbbba\"), expected: true },\n     { actual: candidate(\"asbbbba\"), expected: false },\n     { actual: candidate(\"abaaa\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`^a[b]+$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`^a+b$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`^[a]+[b]+$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+?`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`^a\\w*b$`)\n    return validID.MatchString(text)\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n",
    "    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var validID = regexp.MustCompile(`ab+`)\n    return validID.MatchString(text)\n}\n"
  ]
}