{
  "name": "mbpp_605_prime_num",
  "language": "go_test.go",
  "prompt": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    if num < 2 || num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510116,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510116,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpop01ve8f_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    } else if num == 2 {\n        return true\n    } else if num % 2 == 0 {\n        return false\n    }\n\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122579,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122579,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    if num < 2 || num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpqvmovus__test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpgwu7casp_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpnezsfrvh_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i*i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    if num < 2 || num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510116,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i <= num/2; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122579,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmp3kkbrzgb_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 2 {\n        return true\n    }\n    if num < 2 || num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510116,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpnezsfrvh_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i * i <= num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122579,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510116,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpop01ve8f_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    if num == 2 {\n        return true\n    }\n    if num % 2 == 0 {\n        return false\n    }\n    for i := 3; i < num; i += 2 {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122577,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmpnezsfrvh_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num < 2 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num == 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "--- FAIL: TestPrime_Num (0.00s)\n    --- FAIL: TestPrime_Num/test_num__2 (0.00s)\n        tmphgxv6v2p_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package prime_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given integer is a prime number.\nfunc prime_num(num int) bool {\n    if num <= 1 {\n        return false\n    }\n    for i := 2; i < num; i++ {\n        if num % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestPrime_Num(t *testing.T) {\n  candidate := prime_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(13), expected: true },\n     { actual: candidate(7), expected: true },\n     { actual: candidate(-1010), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}