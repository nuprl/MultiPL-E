{
  "name": "mbpp_578_interleave_lists",
  "language": "go_test.go",
  "prompt": "package interleave_lists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to interleave 3 lists of the same length into a single flat list.\nfunc interleave_lists(list1 []int, list2 []int, list3 []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestInterleave_Lists(t *testing.T) {\n  candidate := interleave_lists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7}, []int{10, 20, 30, 40, 50, 60, 70}, []int{100, 200, 300, 400, 500, 600, 700}), expected: []int{1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700} },\n     { actual: candidate([]int{10, 20}, []int{15, 2}, []int{5, 10}), expected: []int{10, 15, 5, 20, 2, 10} },\n     { actual: candidate([]int{11, 44}, []int{10, 15}, []int{20, 5}), expected: []int{11, 10, 20, 44, 15, 5} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n\n    result := make([]int, len(list1) * 3)\n\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"lists must be of equal length\")\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[3*i] = list1[i]\n        result[3*i+1] = list2[i]\n        result[3*i+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i], list2[i], list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"Lists are not the same length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    // TODO: implement this function\n    return []int{}\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i], list2[i], list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"Lists must be of the same length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"lists must be of equal length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[3*i] = list1[i]\n        result[3*i+1] = list2[i]\n        result[3*i+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    interleaved := make([]int, len(list1) * 3)\n\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n\n    return interleaved\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3 + 1] = list2[i]\n        result[i*3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"lists are not the same length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n\n    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i], list2[i], list3[i])\n    }\n\n    return result\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, 0)\n\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n\n    return result\n}\n",
    "    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"Lists must be the same length\")\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[3*i] = list1[i]\n        result[3*i+1] = list2[i]\n        result[3*i+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i], list2[i], list3[i])\n    }\n    return interleaved\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var interleaved_list []int\n    for i := 0; i < len(list1); i++ {\n        interleaved_list = append(interleaved_list, list1[i])\n        interleaved_list = append(interleaved_list, list2[i])\n        interleaved_list = append(interleaved_list, list3[i])\n    }\n    return interleaved_list\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"All lists must be of the same length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"lists must be of the same length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"Lists must be of equal length\")\n    }\n    result := make([]int, 0, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"lists must be the same length\")\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"All lists must be of equal length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"lists must be the same length\")\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"lists must be of equal length\")\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return []int{}\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    interleaved := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"lists must be of the same length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var list []int\n    for i := 0; i < len(list1); i++ {\n        list = append(list, list1[i])\n        list = append(list, list2[i])\n        list = append(list, list3[i])\n    }\n    return list\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"Lists must be of equal length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved_list []int\n    for i := 0; i < len(list1); i++ {\n        interleaved_list = append(interleaved_list, list1[i])\n        interleaved_list = append(interleaved_list, list2[i])\n        interleaved_list = append(interleaved_list, list3[i])\n    }\n    return interleaved_list\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return []int{}\n    }\n\n    result := []int{}\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var interleaved []int\n    for i := 0; i < len(list1); i++ {\n        interleaved = append(interleaved, list1[i])\n        interleaved = append(interleaved, list2[i])\n        interleaved = append(interleaved, list3[i])\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    result := make([]int, 0)\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i*3] = list1[i]\n        interleaved[i*3+1] = list2[i]\n        interleaved[i*3+2] = list3[i]\n    }\n    return interleaved\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i], list2[i], list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"Lists must be of the same length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        panic(\"lists must be the same length\")\n    }\n\n    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"Lists are not the same length\")\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    result := make([]int, len(list1) + len(list2) + len(list3))\n    for i := 0; i < len(list1); i++ {\n        result[3*i] = list1[i]\n        result[3*i+1] = list2[i]\n        result[3*i+2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i*3] = list1[i]\n        result[i*3+1] = list2[i]\n        result[i*3+2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    var result []int\n    for i := 0; i < len(list1); i++ {\n        result = append(result, list1[i])\n        result = append(result, list2[i])\n        result = append(result, list3[i])\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list1) != len(list3) {\n        return nil\n    }\n    result := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        result[i * 3] = list1[i]\n        result[i * 3 + 1] = list2[i]\n        result[i * 3 + 2] = list3[i]\n    }\n    return result\n}\n",
    "    if len(list1) != len(list2) || len(list2) != len(list3) {\n        panic(\"Lists must be of the same length\")\n    }\n\n    interleaved := make([]int, len(list1) * 3)\n    for i := 0; i < len(list1); i++ {\n        interleaved[i * 3] = list1[i]\n        interleaved[i * 3 + 1] = list2[i]\n        interleaved[i * 3 + 2] = list3[i]\n    }\n\n    return interleaved\n}\n"
  ]
}