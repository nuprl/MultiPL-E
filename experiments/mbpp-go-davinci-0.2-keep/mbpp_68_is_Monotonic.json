{
  "name": "mbpp_68_is_Monotonic",
  "language": "go_test.go",
  "prompt": "package is_Monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given array is monotonic or not.\nfunc is_Monotonic(A []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Monotonic(t *testing.T) {\n  candidate := is_Monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{6, 5, 4, 4}), expected: true },\n     { actual: candidate([]int{1, 2, 2, 3}), expected: true },\n     { actual: candidate([]int{1, 3, 2}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(A) == 0 {\n        return false\n    }\n    if len(A) == 1 {\n        return true\n    }\n    if A[0] < A[1] {\n        for i := 1; i < len(A); i++ {\n            if A[i-1] > A[i] {\n                return false\n            }\n        }\n    } else if A[0] > A[1] {\n        for i := 1; i < len(A); i++ {\n            if A[i-1] < A[i] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A); i++ {\n            if A[i-1] != A[i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_increasing := true\n    is_decreasing := true\n    for i := 1; i < len(A); i++ {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n",
    "    if len(A) < 2 {\n        return true\n    }\n    if A[0] < A[len(A)-1] {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] > A[i+1] {\n                return false\n            }\n        }\n    } else {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] < A[i+1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_increasing := true\n    is_decreasing := true\n    for i := 1; i < len(A); i++ {\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n",
    "    if len(A) <= 1 {\n        return true\n    }\n    if A[0] < A[len(A)-1] {\n        for i := 1; i < len(A); i++ {\n            if A[i] < A[i-1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A); i++ {\n            if A[i] > A[i-1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) == 1 {\n        return true\n    }\n    is_increasing := true\n    is_decreasing := true\n    for i := 0; i < len(A) - 1; i++ {\n        if A[i] > A[i+1] {\n            is_increasing = false\n        }\n        if A[i] < A[i+1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    if A[0] < A[1] {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] > A[i + 1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] < A[i + 1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) < 2 {\n        return true\n    }\n    is_increasing := true\n    is_decreasing := true\n    for i := 1; i < len(A); i++ {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n    return is_increasing || is_decreasing\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_increasing := A[0] <= A[1]\n    for i := 2; i < len(A); i++ {\n        if is_increasing && A[i] < A[i-1] {\n            return false\n        }\n        if !is_increasing && A[i] > A[i-1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_increasing := A[0] <= A[1]\n    for i := 1; i < len(A) - 1; i++ {\n        if is_increasing {\n            if A[i] > A[i + 1] {\n                return false\n            }\n        } else {\n            if A[i] < A[i + 1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(A) <= 2 {\n        return true\n    }\n    increasing := true\n    decreasing := true\n    for i := 1; i < len(A); i++ {\n        if A[i] < A[i-1] {\n            increasing = false\n        }\n        if A[i] > A[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing || decreasing\n}\n",
    "    if len(A) <= 1 {\n        return true\n    }\n    if A[0] < A[1] {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] > A[i + 1] {\n                return false\n            }\n        }\n    } else if A[0] > A[1] {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] < A[i + 1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] != A[i + 1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    if A[0] <= A[1] {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] > A[i+1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A) - 1; i++ {\n            if A[i] < A[i+1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_increasing := false\n    is_decreasing := false\n    for i := 1; i < len(A); i++ {\n        if A[i] > A[i-1] {\n            is_increasing = true\n        } else if A[i] < A[i-1] {\n            is_decreasing = true\n        }\n        if is_increasing && is_decreasing {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n\n    is_increasing := true\n    is_decreasing := true\n\n    for i := 1; i < len(A); i++ {\n        if A[i] < A[i-1] {\n            is_increasing = false\n        }\n        if A[i] > A[i-1] {\n            is_decreasing = false\n        }\n    }\n\n    return is_increasing || is_decreasing\n}\n",
    "    if len(A) <= 1 {\n        return true\n    }\n    if A[0] <= A[len(A)-1] {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] > A[i+1] {\n                return false\n            }\n        }\n    } else {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] < A[i+1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 1 {\n        return true\n    }\n    if A[0] < A[len(A)-1] {\n        for i := 1; i < len(A); i++ {\n            if A[i] < A[i-1] {\n                return false\n            }\n        }\n    } else {\n        for i := 1; i < len(A); i++ {\n            if A[i] > A[i-1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) == 1 {\n        return true\n    }\n    if A[0] <= A[len(A)-1] {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] > A[i+1] {\n                return false\n            }\n        }\n    } else {\n        for i := 0; i < len(A)-1; i++ {\n            if A[i] < A[i+1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    is_inc := true\n    is_dec := true\n    for i := 1; i < len(A); i++ {\n        if A[i] > A[i-1] {\n            is_dec = false\n        } else if A[i] < A[i-1] {\n            is_inc = false\n        }\n    }\n    return is_inc || is_dec\n}\n",
    "    if len(A) <= 2 {\n        return true\n    }\n    var is_increasing bool\n    if A[0] < A[1] {\n        is_increasing = true\n    } else if A[0] > A[1] {\n        is_increasing = false\n    } else {\n        return is_Monotonic(A[1:])\n    }\n    for i := 1; i < len(A) - 1; i++ {\n        if is_increasing {\n            if A[i] > A[i + 1] {\n                return false\n            }\n        } else {\n            if A[i] < A[i + 1] {\n                return false\n            }\n        }\n    }\n    return true\n}\n"
  ]
}