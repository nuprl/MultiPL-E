{
  "name": "mbpp_167_next_power_of_2",
  "language": "go_test.go",
  "prompt": "package next_power_of_2_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest power of 2 greater than or equal to n.\nfunc next_power_of_2(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestNext_Power_Of_2(t *testing.T) {\n  candidate := next_power_of_2\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: 1 },\n     { actual: candidate(5), expected: 8 },\n     { actual: candidate(17), expected: 32 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    for n & (n - 1) != 0 {\n        n &= (n - 1)\n    }\n    return n << 1\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    var count uint = 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n <= 0 {\n        return 0\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint = 0\n    for n > 0 {\n        n >>= 1\n        i++\n    }\n    return 1 << i\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count uint\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << count\n}\n",
    "    return 1 << uint(n - 1).LeadingZeros()\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var count int\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n\n    return 1 << uint(count)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n-1) == 0 {\n        return n\n    }\n    for n & (n-1) != 0 {\n        n &= (n-1)\n    }\n    return n << 1\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            break\n        }\n    }\n    return 1 << (i + 1)\n}\n",
    "    if n < 0 {\n        return 0\n    }\n    if n == 0 {\n        return 1\n    }\n    if n == 1 {\n        return 2\n    }\n    if n == 2 {\n        return 4\n    }\n    if n == 3 {\n        return 4\n    }\n    if n == 4 {\n        return 8\n    }\n    if n == 5 {\n        return 8\n    }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return 8\n    }\n    if n == 8 {\n        return 16\n    }\n    if n == 9 {\n        return 16\n    }\n    if n == 10 {\n        return 16\n    }\n    if n == 11 {\n        return 16\n    }\n    if n == 12 {\n        return 16\n    }\n    if n == 13 {\n        return 16\n    }\n    if n == 14 {\n        return 16\n    }\n    if n == 15 {\n        return 16\n    }\n    if n == 16 {\n        return 32\n    }\n    if n == 17 {\n        return 32\n    }\n    if n == 18 {\n        return 32\n    }\n    if n == 19 {\n        return 32\n    }\n    if n == 20 {\n        return 32\n    }\n    if n == 21 {\n        return 32\n    }\n    if n == 22 {\n        return 32\n    }\n    if n == 23 {\n        return 32\n    }\n    if n == 24 {\n        return 32\n    }\n    if n == 25 {\n        return 32\n    }\n    if n == 26 {\n        return 32\n    }\n    if n == 27 {\n        return 32\n    }\n    if n == 28 {\n        return 32\n    }\n    if n == 29 {\n        return 32\n    }\n    if n == 30 {\n        return 32\n    }\n    if n == 31 {\n        return 32\n    }\n    if n == 32 {\n        return 64\n    }\n    if n == 33 {\n        return 64\n    }\n    if n == 34 {\n        return 64\n    }\n    if n == 35 {\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var i uint\n    for i = 0; i < 32; i++ {\n        if n & (1 << i) != 0 {\n            return 1 << (i + 1)\n        }\n    }\n    return 0\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    var count int = 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    count := 0\n    for n != 0 {\n        n >>= 1\n        count += 1\n    }\n    return 1 << uint(count)\n}\n",
    "    if n <= 0 {\n        return 1\n    }\n\n    if n & (n - 1) == 0 {\n        return n\n    }\n\n    var i uint\n    for i = 0; i < 32; i++ {\n        if (n >> i) & 1 == 1 {\n            break\n        }\n    }\n\n    return 1 << (i + 1)\n}\n",
    "    if n == 0 {\n        return 1\n    }\n    if n & (n - 1) == 0 {\n        return n\n    }\n    for n & (n - 1) != 0 {\n        n &= (n - 1)\n    }\n    return n << 1\n}\n"
  ]
}