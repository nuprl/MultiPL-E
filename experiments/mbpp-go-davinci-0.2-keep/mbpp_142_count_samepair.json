{
  "name": "mbpp_142_count_samepair",
  "language": "go_test.go",
  "prompt": "package count_samepair_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count number items that are identical in the same position of three given lists.\nfunc count_samepair(list1 []int, list2 []int, list3 []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Samepair(t *testing.T) {\n  candidate := count_samepair\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 9}, []int{2, 1, 3, 1, 2, 6, 7, 9}), expected: 3 },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 8}, []int{2, 1, 3, 1, 2, 6, 7, 8}), expected: 4 },\n     { actual: candidate([]int{1, 2, 3, 4, 2, 6, 7, 8}, []int{2, 2, 3, 1, 2, 6, 7, 8}, []int{2, 1, 3, 1, 2, 6, 7, 8}), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list1[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i, _ := range list1 {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var count int\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i, _ := range list1 {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i, _ := range list1 {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    count := 0\n    for i := 0; i < len(list1); i++ {\n        if list1[i] == list2[i] && list2[i] == list3[i] {\n            count++\n        }\n    }\n    return count\n}\n"
  ]
}