{
  "name": "mbpp_638_wind_chill",
  "language": "go_test.go",
  "prompt": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    if v < 4.8 || t > 10 {\n        return 0\n    }\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjear6a8n_test.go:10:10: constant 4.8 truncated to integer\n/tmp/tmpjear6a8n_test.go:13:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*(math.Pow(float64(v), 0.16)) + 0.3965*float64(t)*(math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5jth9aga_test.go:10:51: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.pow(float64(v), 0.16) + 0.3965*float64(t)*math.pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdr42124y_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    // Wind chill index is calculated using the formula:\n    // wci = 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    // where v is the wind velocity in km/h and t is the temperature in celsius.\n    wci := 13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16)\n    return int(math.Round(wci))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb_wft8ph_test.go:13:50: undefined: math\n/tmp/tmpb_wft8ph_test.go:14:16: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=40)', got '%!s(int=83)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    if v < 4.8 || t > 10 {\n        return 0\n    }\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpezie_t0a_test.go:10:10: constant 4.8 truncated to integer\n/tmp/tmpezie_t0a_test.go:13:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    // Wind chill index is only valid for wind velocities over 4.8km/h and temperatures below 10 degrees celsius\n    if v < 5 || t > 10 {\n        return 0\n    }\n\n    // Wind chill index is calculated as 13.12 + 0.6215 * t - 11.37 * v ^ 0.16 + 0.3965 * t * v ^ 0.16\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplzghnanh_test.go:16:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.pow(float64(v), 0.16) + 0.3965*float64(t)*math.pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdr42124y_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=40)', got '%!s(int=83)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    var w float64 = 13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16)\n    return int(math.Round(w))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm5s8q3yq_test.go:10:55: undefined: math\n/tmp/tmpm5s8q3yq_test.go:11:16: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=40)', got '%!s(int=83)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.pow(float64(v), 0.16) + 0.3965*float64(t)*math.pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdr42124y_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    if v < 4.8 || t > 10 {\n        return 0\n    }\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqr4jd8fl_test.go:10:10: constant 4.8 truncated to integer\n/tmp/tmpqr4jd8fl_test.go:13:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    if v < 4.8 {\n        return t\n    }\n    if t > 10 {\n        return t\n    }\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphvgszv9g_test.go:10:10: constant 4.8 truncated to integer\n/tmp/tmphvgszv9g_test.go:16:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    if v < 4.8 || t > 10 {\n        return t\n    }\n    return 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44p59s9o_test.go:10:10: constant 4.8 truncated to integer\n/tmp/tmp44p59s9o_test.go:13:18: constant 13.12 truncated to integer\n/tmp/tmp44p59s9o_test.go:13:26: constant 0.6215 truncated to integer\n/tmp/tmp44p59s9o_test.go:13:36: constant 11.37 truncated to integer\n/tmp/tmp44p59s9o_test.go:13:39: invalid indirect of 0.16 (type untyped float)\n/tmp/tmp44p59s9o_test.go:13:53: constant 0.3965 truncated to integer\n/tmp/tmp44p59s9o_test.go:13:58: invalid indirect of 0.16 (type untyped float)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=40)', got '%!s(int=83)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=19)', got '%!s(int=3)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmpv80vqvj1_test.go:28: expected '%!s(int=6)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * (math.Pow(float64(v), 0.16))) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp0lgc961_test.go:10:58: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.pow(float64(v), 0.16) + 0.3965*float64(t)*math.pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdr42124y_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    // Wind chill index = 13.12 + 0.6215*T - 11.37*V^0.16 + 0.3965*T*V^0.16\n    // T = temperature in celsius\n    // V = wind velocity in km/h\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)*float64(v)*0.16 + 0.3965*float64(t)*float64(v)*float64(v)*0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmpi5ln55l2_test.go:31: expected '%!s(int=40)', got '%!s(int=5812)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmpi5ln55l2_test.go:31: expected '%!s(int=19)', got '%!s(int=-855)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmpi5ln55l2_test.go:31: expected '%!s(int=6)', got '%!s(int=-113)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*(math.Pow(float64(v), 0.16)) + 0.3965*float64(t)*(math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5jth9aga_test.go:10:51: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    // Wind chill index is calculated using the formula:\n    // wci = 13.12 + 0.6215 * t - 11.37 * v^0.16 + 0.3965 * t * v^0.16\n    // where t is the temperature in celsius and v is the wind velocity in km/h\n    // The wind chill index is rounded to the next integer\n    wci := 13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16)\n    return int(math.Ceil(wci))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpahyllra2_test.go:14:50: undefined: math\n/tmp/tmpahyllra2_test.go:15:16: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*float64(v)**0.16 + 0.3965*float64(t)*float64(v)**0.16)\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124129,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdyaia63h_test.go:10:61: invalid indirect of 0.16 (type untyped float)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return 0\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "--- FAIL: TestWind_Chill (0.00s)\n    --- FAIL: TestWind_Chill/test_num__0 (0.00s)\n        tmp2xlc368a_test.go:28: expected '%!s(int=40)', got '%!s(int=0)'\n    --- FAIL: TestWind_Chill/test_num__1 (0.00s)\n        tmp2xlc368a_test.go:28: expected '%!s(int=19)', got '%!s(int=0)'\n    --- FAIL: TestWind_Chill/test_num__2 (0.00s)\n        tmp2xlc368a_test.go:28: expected '%!s(int=6)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int((13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16))))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124131,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpasymxmea_test.go:10:58: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + (0.6215 * float64(t)) - (11.37 * math.Pow(float64(v), 0.16)) + (0.3965 * float64(t) * math.Pow(float64(v), 0.16)))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf_7vtvwa_test.go:10:57: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215 * float64(t) - 11.37 * math.Pow(float64(v), 0.16) + 0.3965 * float64(t) * math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509723,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq76bp7l_test.go:10:54: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package wind_chill_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nfunc wind_chill(v int, t int) int {\n    return int(13.12 + 0.6215*float64(t) - 11.37*math.Pow(float64(v), 0.16) + 0.3965*float64(t)*math.Pow(float64(v), 0.16))\n}\n\nfunc TestWind_Chill(t *testing.T) {\n  candidate := wind_chill\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(120, 35), expected: 40 },\n     { actual: candidate(40, 20), expected: 19 },\n     { actual: candidate(10, 8), expected: 6 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509722,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi6e1w70b_test.go:10:50: undefined: math\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}