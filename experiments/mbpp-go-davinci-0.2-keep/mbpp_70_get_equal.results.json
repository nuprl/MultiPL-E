{
  "name": "mbpp_70_get_equal",
  "language": "go_test.go",
  "prompt": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        }\n        if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyv3kx18d_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyv3kx18d_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyv3kx18d_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyv3kx18d_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyv3kx18d_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyv3kx18d_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy7glimm__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy7glimm__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy7glimm__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if len(v) != length {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphyzfo8a7_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphyzfo8a7_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphyzfo8a7_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        }\n        if len(Input[i]) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp74nmpm7v_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp74nmpm7v_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp74nmpm7v_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp74nmpm7v_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp74nmpm7v_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp74nmpm7v_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input)-1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hlymllg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, i := range Input {\n        if length == 0 {\n            length = len(i)\n        } else {\n            if length != len(i) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3snup2o5_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3snup2o5_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3snup2o5_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3snup2o5_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp3snup2o5_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp3snup2o5_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkxbn4sib_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, tuple := range Input {\n        if i == 0 {\n            length = len(tuple)\n        } else {\n            if length != len(tuple) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwrbr13e8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if len(tuple) != length {\n            if length == 0 {\n                length = len(tuple)\n            } else {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp115z6210_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp115z6210_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp115z6210_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp115z6210_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp115z6210_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp115z6210_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else {\n            if length != len(tuple) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgemcu8c9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgemcu8c9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgemcu8c9_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i+1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm3byx41r_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm3byx41r_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm3byx41r_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm3byx41r_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm3byx41r_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm3byx41r_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else if length != len(Input[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkz2e31e9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkz2e31e9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkz2e31e9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkz2e31e9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkz2e31e9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkz2e31e9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        }\n        if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprhfmfyc2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhfmfyc2_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhfmfyc2_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhfmfyc2_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmprhfmfyc2_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmprhfmfyc2_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0s6_hp0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, tuple := range Input {\n        if i == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxtcz3otz_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxtcz3otz_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxtcz3otz_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxtcz3otz_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpxtcz3otz_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpxtcz3otz_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknmpmjiv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, value := range Input {\n        if len(value) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcbpil4tv_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcbpil4tv_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcbpil4tv_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcbpil4tv_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcbpil4tv_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcbpil4tv_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var len_first = len(Input[0])\n    for _, v := range Input {\n        if len(v) != len_first {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyy5rke_p_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyy5rke_p_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyy5rke_p_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyy5rke_p_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyy5rke_p_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyy5rke_p_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input)-1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hlymllg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if len(v) != length {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphyzfo8a7_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphyzfo8a7_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmphyzfo8a7_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmphyzfo8a7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdk2gbme__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk2gbme__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk2gbme__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0s6_hp0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknmpmjiv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoqsqkre4_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoqsqkre4_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoqsqkre4_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoqsqkre4_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpoqsqkre4_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpoqsqkre4_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy7glimm__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy7glimm__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpy7glimm__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpy7glimm__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else {\n            if length != len(tuple) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgemcu8c9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgemcu8c9_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgemcu8c9_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgemcu8c9_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknmpmjiv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    var length = len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzt5_py6i_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzt5_py6i_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzt5_py6i_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzt5_py6i_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzt5_py6i_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzt5_py6i_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var result bool\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n            result = true\n        } else {\n            if len(v) != length {\n                result = false\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa23lufeo_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa23lufeo_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa23lufeo_test.go:33:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa23lufeo_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpa23lufeo_test.go:34:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpa23lufeo_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0s6_hp0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i := 0; i < len(Input); i++ {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps718ufmb_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmps718ufmb_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmps718ufmb_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, tuple := range Input {\n        if i == 0 {\n            length = len(tuple)\n        } else {\n            if length != len(tuple) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwrbr13e8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input)-1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hlymllg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmz6rr3b9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmz6rr3b9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmz6rr3b9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := 0; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcyxmchz2_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcyxmchz2_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcyxmchz2_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcyxmchz2_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpcyxmchz2_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpcyxmchz2_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    length := len(Input[0])\n    for _, v := range Input {\n        if len(v) != length {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpknmpmjiv_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpknmpmjiv_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpknmpmjiv_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkxbn4sib_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, tuple := range Input {\n        if i == 0 {\n            length = len(tuple)\n        } else {\n            if length != len(tuple) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwrbr13e8_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpwrbr13e8_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpwrbr13e8_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm0s6_hp0_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpm0s6_hp0_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpm0s6_hp0_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13arbp7l_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp13arbp7l_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp13arbp7l_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if len(Input[i]) != length {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_o21zbm0_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_o21zbm0_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_o21zbm0_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_o21zbm0_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_o21zbm0_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_o21zbm0_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return false\n    }\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdk2gbme__test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk2gbme__test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpdk2gbme__test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpdk2gbme__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for i := 1; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[i-1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1a9pprna_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1a9pprna_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1a9pprna_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1a9pprna_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1a9pprna_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1a9pprna_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkxbn4sib_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[0]) != len(Input[i]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1jjmq937_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1jjmq937_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1jjmq937_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1jjmq937_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp1jjmq937_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp1jjmq937_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input)-1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hlymllg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpafktn_4y_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpafktn_4y_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpafktn_4y_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        if len(Input[i]) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqy94j8j1_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpqy94j8j1_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpqy94j8j1_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i := 0; i < len(Input); i++ {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps718ufmb_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmps718ufmb_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmps718ufmb_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmps718ufmb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input); i++ {\n        for j := i + 1; j < len(Input); j++ {\n            if len(Input[i]) != len(Input[j]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyjp58_kk_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpyjp58_kk_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpyjp58_kk_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input)-1; i++ {\n        if len(Input[i]) != len(Input[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_hlymllg_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmp_hlymllg_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmp_hlymllg_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    if len(Input) == 0 {\n        return true\n    }\n    for _, v := range Input {\n        if len(v) != len(Input[0]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkxbn4sib_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkxbn4sib_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkxbn4sib_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else {\n            if length != len(v) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpud2acwys_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpud2acwys_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpud2acwys_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    for i := 0; i < len(Input) - 1; i++ {\n        if len(Input[i]) != len(Input[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkx0dxtiu_test.go:25:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:25:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:26:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:26:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpkx0dxtiu_test.go:27:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpkx0dxtiu_test.go:27:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, v := range Input {\n        if i == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123562,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmz6rr3b9_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmz6rr3b9_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpmz6rr3b9_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpmz6rr3b9_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, v := range Input {\n        if length == 0 {\n            length = len(v)\n        } else if length != len(v) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgate8yej_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgate8yej_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgate8yej_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for _, tuple := range Input {\n        if length == 0 {\n            length = len(tuple)\n        } else if length != len(tuple) {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnc1tf3c_test.go:28:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:29:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:29:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpgnc1tf3c_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpgnc1tf3c_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package get_equal_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find whether all the given tuples have equal length or not.\nfunc get_equal(Input [][]interface{}) bool {\n    var length int\n    for i, _ := range Input {\n        if i == 0 {\n            length = len(Input[i])\n        } else {\n            if length != len(Input[i]) {\n                return false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestGet_Equal(t *testing.T) {\n  candidate := get_equal\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{11, 22, 33}, []interface{}{44, 55, 66}}), expected: true },\n     { actual: candidate([][]int{[]interface{}{1, 2, 3}, []interface{}{4, 5, 6, 7}}), expected: false },\n     { actual: candidate([][]int{[]interface{}{1, 2}, []interface{}{3, 4}}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517567,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzwp3gvlm_test.go:30:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:31:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:31:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n/tmp/tmpzwp3gvlm_test.go:32:33: cannot use [][]int{...} (type [][]int) as type [][]interface {} in argument to candidate\n/tmp/tmpzwp3gvlm_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}