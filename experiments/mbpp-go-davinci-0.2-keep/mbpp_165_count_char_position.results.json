{
  "name": "mbpp_165_count_char_position",
  "language": "go_test.go",
  "prompt": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char) - 97 {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char) - 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if int(v) == 97 + i || int(v) == 65 + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' - i || str1[i] == 'A' - i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1qgu3ufi_test.go:12:20: invalid operation: str1[i] == 'a' - i (mismatched types byte and int)\n/tmp/tmp1qgu3ufi_test.go:12:42: invalid operation: str1[i] == 'A' - i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if int(v) == i + 97 || int(v) == i + 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppg9k4z1t_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppg9k4z1t_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) - 96 == i + 1 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) - 64 == i + 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5aqmz88_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpb5aqmz88_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, r := range str1 {\n        if r >= 'a' && r <= 'z' && i == int(r - 'a') {\n            count++\n        } else if r >= 'A' && r <= 'Z' && i == int(r - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == 'a' + i {\n            count++\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptbevo87x_test.go:12:56: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmptbevo87x_test.go:14:63: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            if str1[i] == 'a' + i {\n                count++\n            }\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            if str1[i] == 'A' + i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn1xtxu2n_test.go:13:24: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpn1xtxu2n_test.go:17:24: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpiiqvt1tw_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpiiqvt1tw_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && int(c) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmp5ec6wrhu_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmp5ec6wrhu_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 97) {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'a') || v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && i == int(c) - 97 {\n            count++\n        } else if c >= 'A' && c <= 'Z' && i == int(c) - 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c - 'a' == i {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_wpv1cgl_test.go:12:44: invalid operation: c - 'a' == i (mismatched types rune and int)\n/tmp/tmp_wpv1cgl_test.go:15:44: invalid operation: c - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122876,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpe07bcjtl_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpe07bcjtl_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    str1 = strings.ToLower(str1)\n    for i, v := range str1 {\n        if v == rune(i + 97) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0u3rdtj1_test.go:11:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == 'a' + i {\n            count++\n        }\n        if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjz3mjn6f_test.go:12:56: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpjz3mjn6f_test.go:15:56: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            if c == 'a' + i {\n                count++\n            }\n        } else if c >= 'A' && c <= 'Z' {\n            if c == 'A' + i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6kn0zt5s_test.go:13:18: invalid operation: c == 'a' + i (mismatched types rune and int)\n/tmp/tmp6kn0zt5s_test.go:17:18: invalid operation: c == 'A' + i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && int(c) - int('a') == i {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && int(c) - int('A') == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, r := range str1 {\n        if r >= 'a' && r <= 'z' && i == int(r - 'a') {\n            count++\n        }\n        if r >= 'A' && r <= 'Z' && i == int(r - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && int(c) == i+97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpruvxo6h1_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpruvxo6h1_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && i == int(c - 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && i == int(c - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v == 'a' + i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v == 'A' + i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfpyh6c2h_test.go:13:18: invalid operation: v == 'a' + i (mismatched types rune and int)\n/tmp/tmpfpyh6c2h_test.go:17:18: invalid operation: v == 'A' + i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) == i + 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) == i + 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == byte(i + 97) || str1[i] == byte(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) - int('a') == i {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && int(v) - int('A') == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, _ := range str1 {\n        if str1[i] == 'a' || str1[i] == 'A' ||\n            str1[i] == 'b' || str1[i] == 'B' ||\n            str1[i] == 'c' || str1[i] == 'C' ||\n            str1[i] == 'd' || str1[i] == 'D' ||\n            str1[i] == 'e' || str1[i] == 'E' ||\n            str1[i] == 'f' || str1[i] == 'F' ||\n            str1[i] == 'g' || str1[i] == 'G' ||\n            str1[i] == 'h' || str1[i] == 'H' ||\n            str1[i] == 'i' || str1[i] == 'I' ||\n            str1[i] == 'j' || str1[i] == 'J' ||\n            str1[i] == 'k' || str1[i] == 'K' ||\n            str1[i] == 'l' || str1[i] == 'L' ||\n            str1[i] == 'm' || str1[i] == 'M' ||\n            str1[i] == 'n' || str1[i] == 'N' ||\n            str1[i] == 'o' || str1[i] == 'O' ||\n            str1[i] == 'p' || str1[i] == 'P' ||\n            str1[i] == 'q' || str1[i] == 'Q' ||\n            str1[i] == 'r' || str1[i] == 'R' ||\n            str1[i] == 's' || str1[i] == 'S' ||\n            str1[i] == 't' || str1[i] == 'T' ||\n            str1[i] == 'u' || str1[i] == 'U' ||\n            str1[i] == 'v' || str1[i] == 'V' ||\n            str1[i] == 'w'\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzdhpctc0_test.go:35:6: expected '(', found TestCount_Char_Position\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp10eq8oxs_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && int(char) == i + 97 {\n            count++\n        } else if char >= 'A' && char <= 'Z' && int(char) == i + 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i+'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v == rune(i+'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, char := range str1 {\n        if (char >= 'a' && char <= 'z' && i == int(char - 'a')) || (char >= 'A' && char <= 'Z' && i == int(char - 'A')) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            if i == int(str1[i] - 'a') {\n                count++\n            }\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            if i == int(str1[i] - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        } else if c >= 'A' && c <= 'Z' && c == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3g1ndhpv_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp3g1ndhpv_test.go:14:51: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'a') || v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'A' {\n            count++\n        } else if str1[i] == 'b' || str1[i] == 'B' {\n            count++\n        } else if str1[i] == 'c' || str1[i] == 'C' {\n            count++\n        } else if str1[i] == 'd' || str1[i] == 'D' {\n            count++\n        } else if str1[i] == 'e' || str1[i] == 'E' {\n            count++\n        } else if str1[i] == 'f' || str1[i] == 'F' {\n            count++\n        } else if str1[i] == 'g' || str1[i] == 'G' {\n            count++\n        } else if str1[i] == 'h' || str1[i] == 'H' {\n            count++\n        } else if str1[i] == 'i' || str1[i] == 'I' {\n            count++\n        } else if str1[i] == 'j' || str1[i] == 'J' {\n            count++\n        } else if str1[i] == 'k' || str1[i] == 'K' {\n            count++\n        } else if str1[i] == 'l' || str1[i] == 'L' {\n            count++\n        } else if str1[i] == 'm' || str1[i] == 'M' {\n            count++\n        } else if str1[i] == 'n' || str1[i] == 'N' {\n            count++\n        } else if str1[i] == 'o' || str1[i] == 'O' {\n            count++\n        } else if str1[i] == 'p' || str1[i] == 'P' {\n            count++\n        } else if str1[i] == 'q' || str1[i] == 'Q' {\n            count\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjdb1ii_o_test.go:46:6: expected '(', found TestCount_Char_Position\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    var str2 string = \"abcdefghijklmnopqrstuvwxyz\"\n    for i, v := range str1 {\n        if i == strings.Index(str2, string(v)) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw05c9ajz_test.go:13:17: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' {\n            if i == int(c - 'a') {\n                count++\n            }\n        } else if c >= 'A' && c <= 'Z' {\n            if i == int(c - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && char - 'a' == i {\n            count++\n        } else if char >= 'A' && char <= 'Z' && char - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvwbjt86p_test.go:12:53: invalid operation: char - 'a' == i (mismatched types rune and int)\n/tmp/tmpvwbjt86p_test.go:14:60: invalid operation: char - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            if str1[i] - 'a' == i {\n                count++\n            }\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            if str1[i] - 'A' == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpid15d9tt_test.go:13:30: invalid operation: str1[i] - 'a' == i (mismatched types byte and int)\n/tmp/tmpid15d9tt_test.go:17:30: invalid operation: str1[i] - 'A' == i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char) - 97 {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char) - 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if v == 'a' || v == 'A' {\n                count++\n            } else if v == 'b' || v == 'B' {\n                if i == 1 {\n                    count++\n                }\n            } else if v == 'c' || v == 'C' {\n                if i == 2 {\n                    count++\n                }\n            } else if v == 'd' || v == 'D' {\n                if i == 3 {\n                    count++\n                }\n            } else if v == 'e' || v == 'E' {\n                if i == 4 {\n                    count++\n                }\n            } else if v == 'f' || v == 'F' {\n                if i == 5 {\n                    count++\n                }\n            } else if v == 'g' || v == 'G' {\n                if i == 6 {\n                    count++\n                }\n            } else if v == 'h' || v == 'H' {\n                if i == 7 {\n                    count++\n                }\n            } else if v == 'i' || v == 'I' {\n                if i == 8 {\n                    count++\n                }\n            } else if v == 'j' || v == 'J' {\n                if i == 9 {\n                    count++\n                }\n            } else if v == 'k' || v == 'K' {\n                if i == 10 {\n                    count++\n                }\n            } else if v == 'l' || v == 'L' {\n                if i == 11 {\n                    count++\n                }\n            } else if v == 'm' || v == 'M' {\n                if i == 12 {\n                    count++\n                }\n            } else if v == 'n' || v == 'N' {\n                if i == 13 {\n                    count++\n                }\n            } else if v == 'o' || v == 'O' {\n                if i == 14 {\n                    count++\n                }\n            } else if v == 'p' || v == 'P'\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0ej32rwc_test.go:72:6: expected '(', found TestCount_Char_Position\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i+97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i+97) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpnqalq71q_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpnqalq71q_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z' {\n            if c == 'A' + rune(i) || c == 'a' + rune(i) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v == rune(i + 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp49_kvamt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmp49_kvamt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' - 32 + i || str1[i] == 'a' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7c0q15sp_test.go:12:20: invalid operation: str1[i] == 'a' - 32 + i (mismatched types byte and int)\n/tmp/tmp7c0q15sp_test.go:12:47: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3g1ndhpv_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp3g1ndhpv_test.go:14:51: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v) - 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v) - 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && char - 'a' == i {\n            count++\n        }\n        if char >= 'A' && char <= 'Z' && char - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp6dag_xf_test.go:12:53: invalid operation: char - 'a' == i (mismatched types rune and int)\n/tmp/tmpp6dag_xf_test.go:15:53: invalid operation: char - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == 'a' + i {\n            count++\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptbevo87x_test.go:12:56: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmptbevo87x_test.go:14:63: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpbujklteu_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            if str1[i] - 'a' == i {\n                count++\n            }\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            if str1[i] - 'A' == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpid15d9tt_test.go:13:30: invalid operation: str1[i] - 'a' == i (mismatched types byte and int)\n/tmp/tmpid15d9tt_test.go:17:30: invalid operation: str1[i] - 'A' == i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == 'a' + i ||\n            str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeek2cr5n_test.go:12:56: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpeek2cr5n_test.go:13:57: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if v == 'a' || v == 'A' || v == 'e' || v == 'E' || v == 'i' || v == 'I' || v == 'o' || v == 'O' || v == 'u' || v == 'U' {\n                count += i + 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__0 (0.00s)\n        tmpnw9nzz4e_test.go:36: expected '%!s(int=2)', got '%!s(int=4)'\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpnw9nzz4e_test.go:36: expected '%!s(int=3)', got '%!s(int=5)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpnw9nzz4e_test.go:36: expected '%!s(int=5)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) - int('a') == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) - int('A') == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if int(v) >= 97 && int(v) <= 122 && i == int(v) - 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpj4l_uxkg_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpj4l_uxkg_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if i == int(v) - 'a' || i == int(v) - 'A' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && int(char) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpt0gxsgc4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpt0gxsgc4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i+97 {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && int(v) == i+65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i + 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) - int('a') == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) - int('A') == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bku3zhe_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp1bku3zhe_test.go:15:44: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'A' {\n            count++\n        }\n        if str1[i] == 'b' || str1[i] == 'B' {\n            count++\n        }\n        if str1[i] == 'c' || str1[i] == 'C' {\n            count++\n        }\n        if str1[i] == 'd' || str1[i] == 'D' {\n            count++\n        }\n        if str1[i] == 'e' || str1[i] == 'E' {\n            count++\n        }\n        if str1[i] == 'f' || str1[i] == 'F' {\n            count++\n        }\n        if str1[i] == 'g' || str1[i] == 'G' {\n            count++\n        }\n        if str1[i] == 'h' || str1[i] == 'H' {\n            count++\n        }\n        if str1[i] == 'i' || str1[i] == 'I' {\n            count++\n        }\n        if str1[i] == 'j' || str1[i] == 'J' {\n            count++\n        }\n        if str1[i] == 'k' || str1[i] == 'K' {\n            count++\n        }\n        if str1[i] == 'l' || str1[i] == 'L' {\n            count++\n        }\n        if str1[i] == 'm' || str1[i] == 'M' {\n            count++\n        }\n        if str1[i] == 'n' || str1[i] == 'N' {\n            count++\n        }\n        if str1[i] == 'o' || str1[i] == 'O' {\n            count++\n        }\n        if str1[i] == 'p' || str1[i] == 'P' {\n            count++\n        }\n        if str1[i] == '\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw2svudik_test.go:60:23: rune literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == byte(i + 97) || str1[i] == byte(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v - 'a' == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v - 'A' == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4a5am23l_test.go:13:24: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp4a5am23l_test.go:17:24: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        }\n        if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    var str2 string = \"abcdefghijklmnopqrstuvwxyz\"\n    for i := 0; i < len(str1); i++ {\n        for j := 0; j < len(str2); j++ {\n            if str1[i] == str2[j] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122879,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__0 (0.00s)\n        tmpb222c5ll_test.go:37: expected '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpb222c5ll_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpb222c5ll_test.go:37: expected '%!s(int=5)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v == rune(i + 97) {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v == rune(i + 65) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && int(char) == i + 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpt0gxsgc4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpt0gxsgc4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' || str1[i] == 'A' || str1[i] == 'e' || str1[i] == 'E' || str1[i] == 'i' || str1[i] == 'I' || str1[i] == 'o' || str1[i] == 'O' || str1[i] == 'u' || str1[i] == 'U' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__0 (0.00s)\n        tmpwntqhaw4_test.go:34: expected '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpwntqhaw4_test.go:34: expected '%!s(int=3)', got '%!s(int=2)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpwntqhaw4_test.go:34: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3g1ndhpv_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp3g1ndhpv_test.go:14:51: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, r := range str1 {\n        if r >= 'a' && r <= 'z' {\n            if i == int(r - 'a') {\n                count++\n            }\n        } else if r >= 'A' && r <= 'Z' {\n            if i == int(r - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5aqmz88_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpb5aqmz88_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i+'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpi0p8lpiz_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpi0p8lpiz_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if int(v) >= 97 && int(v) <= 122 && i == int(v) - 97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpvtkgi92d_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpvtkgi92d_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        } else if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3g1ndhpv_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp3g1ndhpv_test.go:14:51: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c - 'a' == i {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_wpv1cgl_test.go:12:44: invalid operation: c - 'a' == i (mismatched types rune and int)\n/tmp/tmp_wpv1cgl_test.go:15:44: invalid operation: c - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == 'a' + i {\n            count++\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuq9a4z0m_test.go:12:56: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpuq9a4z0m_test.go:14:63: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && v - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bku3zhe_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp1bku3zhe_test.go:15:44: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') {\n            if int(char) == i + 97 || int(char) == i + 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v) - 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v) - 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v == rune(i + 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v - 'a' == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v - 'A' == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4a5am23l_test.go:13:24: invalid operation: v - 'a' == i (mismatched types rune and int)\n/tmp/tmp4a5am23l_test.go:17:24: invalid operation: v - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            if i == int(char) - 97 {\n                count++\n            }\n        } else if char >= 'A' && char <= 'Z' {\n            if i == int(char) - 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    var char_position int\n    for _, char := range str1 {\n        char_position = int(char) - 96\n        if char_position > 0 && char_position < 27 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__0 (0.00s)\n        tmpzbwb7m17_test.go:36: expected '%!s(int=2)', got '%!s(int=6)'\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpzbwb7m17_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpzbwb7m17_test.go:36: expected '%!s(int=5)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && int(char) == i + 97 {\n            count++\n        } else if char >= 'A' && char <= 'Z' && int(char) == i + 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) == i + 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) == i + 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && i == int(c - 'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && i == int(c - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) - int('a') == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpafuqwkkl_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpafuqwkkl_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i+'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' {\n            if int(char) - 97 == i {\n                count++\n            }\n        } else if char >= 'A' && char <= 'Z' {\n            if int(char) - 65 == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v - 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v - 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c - 'a' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp00tb64zp_test.go:12:44: invalid operation: c - 'a' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb5aqmz88_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpb5aqmz88_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) - int('a') == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) - int('A') == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' {\n            if str1[i] - 'a' == i {\n                count++\n            }\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' {\n            if str1[i] - 'A' == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpid15d9tt_test.go:13:30: invalid operation: str1[i] - 'a' == i (mismatched types byte and int)\n/tmp/tmpid15d9tt_test.go:17:30: invalid operation: str1[i] - 'A' == i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i+97) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpnqalq71q_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpnqalq71q_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i+97 {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && int(v) == i+65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v - 'a' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp10eq8oxs_test.go:12:44: invalid operation: v - 'a' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && char - 'a' == i {\n            count++\n        } else if char >= 'A' && char <= 'Z' && char - 'A' == i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvwbjt86p_test.go:12:53: invalid operation: char - 'a' == i (mismatched types rune and int)\n/tmp/tmpvwbjt86p_test.go:14:60: invalid operation: char - 'A' == i (mismatched types rune and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i+97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v) - 97 {\n            count++\n        } else if v >= 'A' && v <= 'Z' && i == int(v) - 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmppjbghzhe_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v == rune(i + 97) || v == rune(i + 65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    count := 0\n    for i, r := range str1 {\n        if r >= 'a' && r <= 'z' && i == int(r - 'a') {\n            count++\n        }\n        if r >= 'A' && r <= 'Z' && i == int(r - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v) - 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v) - 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i, c := range str1 {\n        if string(c) == string(alphabet[i]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpxmjvpm4c_test.go:35: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpxmjvpm4c_test.go:35: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && int(c) == i+97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpo83xuljr_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpo83xuljr_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && v == rune(i + 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && v == rune(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, r := range str1 {\n        if r >= 'a' && r <= 'z' && i == int(r - 'a') {\n            count++\n        }\n        if r >= 'A' && r <= 'Z' && i == int(r - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122877,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, char := range str1 {\n        if char >= 'a' && char <= 'z' && i == int(char - 'a') {\n            count++\n        } else if char >= 'A' && char <= 'Z' && i == int(char - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == 'a' + i || str1[i] == 'A' + i {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2e6f8rt_test.go:12:20: invalid operation: str1[i] == 'a' + i (mismatched types byte and int)\n/tmp/tmpg2e6f8rt_test.go:12:42: invalid operation: str1[i] == 'A' + i (mismatched types byte and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if int(v) == i + 65 || int(v) == i + 97 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122876,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if int(v) - int('a') == i {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if int(v) - int('A') == i {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] >= 'a' && str1[i] <= 'z' && str1[i] == byte(i + 'a') {\n            count++\n        } else if str1[i] >= 'A' && str1[i] <= 'Z' && str1[i] == byte(i + 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && int(v) == i+97 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122875,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmpahvi1jv7_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if int(v) == i + 97 || int(v) == i + 65 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] == rune(i+97) || str1[i] == rune(i+65) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp37h_sqq2_test.go:12:20: invalid operation: str1[i] == rune(i + 97) (mismatched types byte and rune)\n/tmp/tmp37h_sqq2_test.go:12:45: invalid operation: str1[i] == rune(i + 65) (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "--- FAIL: TestCount_Char_Position (0.00s)\n    --- FAIL: TestCount_Char_Position/test_num__1 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestCount_Char_Position/test_num__2 (0.00s)\n        tmps5tcjnl4_test.go:34: expected '%!s(int=5)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, c := range str1 {\n        if c >= 'a' && c <= 'z' && c == rune(i+'a') {\n            count++\n        }\n        if c >= 'A' && c <= 'Z' && c == rune(i+'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if v == rune(i + 'a') {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int = 0\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' || v >= 'A' && v <= 'Z' {\n            if v == rune(i + 'a') || v == rune(i + 'A') {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' {\n            if i == int(v) - 97 {\n                count++\n            }\n        } else if v >= 'A' && v <= 'Z' {\n            if i == int(v) - 65 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_char_position_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nfunc count_char_position(str1 string) int {\n    var count int\n    for i, v := range str1 {\n        if v >= 'a' && v <= 'z' && i == int(v - 'a') {\n            count++\n        }\n        if v >= 'A' && v <= 'Z' && i == int(v - 'A') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Char_Position(t *testing.T) {\n  candidate := count_char_position\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"xbcefg\"), expected: 2 },\n     { actual: candidate(\"ABcED\"), expected: 3 },\n     { actual: candidate(\"AbgdeF\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509990,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}