{
  "name": "mbpp_96_divisor",
  "language": "go_test.go",
  "prompt": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors += 1\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int = 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var i int\n    var count int\n    for i = 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var divisors []int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors = append(divisors, i)\n        }\n    }\n    return len(divisors)\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    divisors := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            divisors++\n        }\n    }\n    return divisors\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122596,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    count := 0\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the number of divisors of a given integer.\nfunc divisor(n int) int {\n    var count int\n    for i := 1; i <= n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestDivisor(t *testing.T) {\n  candidate := divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(15), expected: 4 },\n     { actual: candidate(12), expected: 6 },\n     { actual: candidate(9), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510045,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}