{
  "name": "mbpp_434_text_match_one",
  "language": "go_test.go",
  "prompt": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__0 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_One/test_num__1 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpzjsdjpx0_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, c := range text[1:] {\n        if c != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp_e4qczbw_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] != 'a' {\n            return false\n        }\n        for j := i + 1; j < len(text); j++ {\n            if text[j] != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpcwinx5t1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__0 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_One/test_num__1 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] != 'a' {\n            return false\n        }\n        for j := i + 1; j < len(text); j++ {\n            if text[j] != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpcwinx5t1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, ch := range text[1:] {\n            if ch != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpkak9sosh_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] != 'a' {\n            return false\n        }\n        for j := i + 1; j < len(text); j++ {\n            if text[j] != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpcwinx5t1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, c := range text[1:] {\n        if c != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp_e4qczbw_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    for i := 0; i < len(text); i++ {\n        if text[i] != 'a' {\n            return false\n        }\n        for j := i + 1; j < len(text); j++ {\n            if text[j] != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123976,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpcwinx5t1_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) == 0 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123978,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp78c1ad2h_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpwyv_xs6c_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n\n    if text[0] != 'a' {\n        return false\n    }\n\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp2tlbkvdq_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for _, char := range text[1:] {\n        if char != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmp9q74649i_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) < 2 {\n        return false\n    }\n    if text[0] != 'a' {\n        return false\n    }\n    for i := 1; i < len(text); i++ {\n        if text[i] != 'b' {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpparf2bvm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    if len(text) >= 2 && text[0] == 'a' {\n        for _, char := range text[1:] {\n            if char != 'b' {\n                return false\n            }\n        }\n        return true\n    }\n    return false\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509803,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__2 (0.00s)\n        tmpizgfowbt_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package text_match_one_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that matches a string that has an a followed by one or more b's.\nfunc text_match_one(text string) bool {\n    // your code here\n    return true\n}\n\nfunc TestText_Match_One(t *testing.T) {\n  candidate := text_match_one\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"ac\"), expected: false },\n     { actual: candidate(\"dc\"), expected: false },\n     { actual: candidate(\"abba\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509804,
      "stdout": "--- FAIL: TestText_Match_One (0.00s)\n    --- FAIL: TestText_Match_One/test_num__0 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestText_Match_One/test_num__1 (0.00s)\n        tmpupbkdtm8_test.go:29: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}