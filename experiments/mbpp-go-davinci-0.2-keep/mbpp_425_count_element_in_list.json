{
  "name": "mbpp_425_count_element_in_list",
  "language": "go_test.go",
  "prompt": "package count_element_in_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count the number of sublists containing a particular element.\nfunc count_element_in_list(list1 interface{}, x interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Element_In_List(t *testing.T) {\n  candidate := count_element_in_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 3}, []int{5, 7}, []int{1, 11}, []int{1, 15, 7}}, 1), expected: 3 },\n     { actual: candidate([][]int{[]string{\"A\", \"B\"}, []string{\"A\", \"C\"}, []string{\"A\", \"D\", \"E\"}, []string{\"B\", \"C\", \"D\"}}, \"A\"), expected: 3 },\n     { actual: candidate([][]int{[]string{\"A\", \"B\"}, []string{\"A\", \"C\"}, []string{\"A\", \"D\", \"E\"}, []string{\"B\", \"C\", \"D\"}}, \"E\"), expected: 1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == x.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if v == x.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_element_in_list(v, x)\n        }\n        return count\n    default:\n        if list1 == x {\n            return 1\n        } else {\n            return 0\n        }\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_element_in_list(v, x)\n        }\n    default:\n        if list1 == x {\n            count = 1\n        }\n    }\n    return count\n}\n",
    "    var count int = 0\n    switch list1 := list1.(type) {\n    case []int:\n        for _, v := range list1 {\n            if v == x {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1 {\n            if v == x {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n",
    "    switch list1 := list1.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range list1 {\n            count += count_element_in_list(v, x)\n        }\n        return count\n    default:\n        if list1 == x {\n            return 1\n        } else {\n            return 0\n        }\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == x.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if v == x.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case [][]int:\n        list := list1.([][]int)\n        count := 0\n        for _, v := range list {\n            for _, v1 := range v {\n                if v1 == x {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case [][]int:\n        list := list1.([][]int)\n        count := 0\n        for _, v := range list {\n            count += count_element_in_list(v, x)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int = 0\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        for i := 0; i < len(list); i++ {\n            if list[i] == x {\n                count++\n            }\n        }\n    case []string:\n        list := list1.([]string)\n        for i := 0; i < len(list); i++ {\n            if list[i] == x {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case [][]int:\n        list := list1.([][]int)\n        count := 0\n        for _, v := range list {\n            if count_element_in_list(v, x) > 0 {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case [][]int:\n        list := list1.([][]int)\n        count := 0\n        for _, v := range list {\n            if count_element_in_list(v, x) > 0 {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, elem := range list {\n            count += count_element_in_list(elem, x)\n        }\n        return count\n    default:\n        if list1 == x {\n            return 1\n        } else {\n            return 0\n        }\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == x {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if v == x {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for i := 0; i < len(list); i++ {\n            if list[i] == x {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for i := 0; i < len(list); i++ {\n            if list[i] == x {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_element_in_list(v, x)\n        }\n        return count\n    default:\n        if list1 == x {\n            return 1\n        } else {\n            return 0\n        }\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count += 1\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if v == x {\n                count += 1\n            }\n        }\n        return count\n    case [][]int:\n        list := list1.([][]int)\n        count := 0\n        for _, v := range list {\n            if v[0] == x {\n                count += 1\n            }\n        }\n        return count\n    case [][]string:\n        list := list1.([][]string)\n        count := 0\n        for _, v := range list {\n            if v[0] == x {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n",
    "    switch list1 := list1.(type) {\n    case []int:\n        count := 0\n        for _, v := range list1 {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    case []string:\n        count := 0\n        for _, v := range list1 {\n            if v == x {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n"
  ]
}