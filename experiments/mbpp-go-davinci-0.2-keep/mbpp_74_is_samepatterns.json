{
  "name": "mbpp_74_is_samepatterns",
  "language": "go_test.go",
  "prompt": "package is_samepatterns_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether it follows the sequence given in the patterns array.\nfunc is_samepatterns(colors []string, patterns []string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Samepatterns(t *testing.T) {\n  candidate := is_samepatterns\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"red\", \"green\", \"green\"}, []string{\"a\", \"b\", \"b\"}), expected: true },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\", \"b\"}), expected: false },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\"}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        } else if patterns[i] == \"odd\" && colors[i] % 2 == 1 {\n            continue\n        } else if patterns[i] == \"up\" && colors[i] < colors[i-1] {\n            continue\n        } else if patterns[i] == \"down\" && colors[i] > colors[i-1] {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"odd\" && colors[i] != \"red\" && colors[i] != \"blue\" {\n            return false\n        }\n        if patterns[i] == \"even\" && colors[i] != \"green\" && colors[i] != \"yellow\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i, j int\n    var color string\n    var pattern string\n    var color_map map[string]string\n    var pattern_map map[string]string\n    var color_pattern string\n    var pattern_color string\n\n    if len(colors) != len(patterns) {\n        return false\n    }\n\n    color_map = make(map[string]string)\n    pattern_map = make(map[string]string)\n\n    for i = 0; i < len(colors); i++ {\n        color = colors[i]\n        pattern = patterns[i]\n\n        color_pattern = color_map[color]\n        pattern_color = pattern_map[pattern]\n\n        if color_pattern == \"\" && pattern_color == \"\" {\n            color_map[color] = pattern\n            pattern_map[pattern] = color\n        } else if color_pattern != pattern || pattern_color != color {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" && colors[i] != colors[0] {\n            return false\n        }\n\n        if patterns[i] == \"odd\" && colors[i] == colors[0] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n"
  ]
}