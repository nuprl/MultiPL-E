{
  "name": "mbpp_74_is_samepatterns",
  "language": "go_test.go",
  "prompt": "package is_samepatterns_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether it follows the sequence given in the patterns array.\nfunc is_samepatterns(colors []string, patterns []string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Samepatterns(t *testing.T) {\n  candidate := is_samepatterns\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"red\", \"green\", \"green\"}, []string{\"a\", \"b\", \"b\"}), expected: true },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\", \"b\"}), expected: false },\n     { actual: candidate([]string{\"red\", \"green\", \"greenn\"}, []string{\"a\", \"b\"}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        } else if patterns[i] == \"odd\" && colors[i] % 2 == 1 {\n            continue\n        } else if patterns[i] == \"up\" && colors[i] < colors[i-1] {\n            continue\n        } else if patterns[i] == \"down\" && colors[i] > colors[i-1] {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"odd\" && colors[i] != \"red\" && colors[i] != \"blue\" {\n            return false\n        }\n        if patterns[i] == \"even\" && colors[i] != \"green\" && colors[i] != \"yellow\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i, j int\n    var color string\n    var pattern string\n    var color_map map[string]string\n    var pattern_map map[string]string\n    var color_pattern string\n    var pattern_color string\n\n    if len(colors) != len(patterns) {\n        return false\n    }\n\n    color_map = make(map[string]string)\n    pattern_map = make(map[string]string)\n\n    for i = 0; i < len(colors); i++ {\n        color = colors[i]\n        pattern = patterns[i]\n\n        color_pattern = color_map[color]\n        pattern_color = pattern_map[pattern]\n\n        if color_pattern == \"\" && pattern_color == \"\" {\n            color_map[color] = pattern\n            pattern_map[pattern] = color\n        } else if color_pattern != pattern || pattern_color != color {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" && colors[i] != colors[0] {\n            return false\n        }\n\n        if patterns[i] == \"odd\" && colors[i] == colors[0] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    color_map := make(map[string]string)\n    pattern_map := make(map[string]string)\n    for i, color := range colors {\n        if _, ok := color_map[color]; !ok {\n            color_map[color] = patterns[i]\n        } else if color_map[color] != patterns[i] {\n            return false\n        }\n    }\n    for i, pattern := range patterns {\n        if _, ok := pattern_map[pattern]; !ok {\n            pattern_map[pattern] = colors[i]\n        } else if pattern_map[pattern] != colors[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        }\n        if patterns[i] == \"odd\" && colors[i] % 2 == 1 {\n            continue\n        }\n        return false\n    }\n    return true\n}\n",
    "    // Write your code here\n    var color_map = make(map[string]string)\n    var pattern_map = make(map[string]string)\n    for i, color := range colors {\n        if _, ok := color_map[color]; !ok {\n            color_map[color] = patterns[i]\n        }\n        if _, ok := pattern_map[patterns[i]]; !ok {\n            pattern_map[patterns[i]] = color\n        }\n        if color_map[color] != patterns[i] || pattern_map[patterns[i]] != color {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var (\n        i, j int\n        k int\n        color string\n        pattern string\n        color_map map[string]string\n        pattern_map map[string]string\n    )\n\n    color_map = make(map[string]string)\n    pattern_map = make(map[string]string)\n\n    for i, color = range colors {\n        pattern = patterns[i]\n        if color_map[color] == \"\" {\n            color_map[color] = pattern\n        } else {\n            if color_map[color] != pattern {\n                return false\n            }\n        }\n\n        if pattern_map[pattern] == \"\" {\n            pattern_map[pattern] = color\n        } else {\n            if pattern_map[pattern] != color {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n    var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n    var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n    var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n    var oooo int\n    var pppp int\n    var qqqq int\n    var rrrr int\n   ",
    "    var i, j int\n    var pattern string\n    var color string\n    var pattern_map map[string]string\n    var color_map map[string]string\n    var ok bool\n    var result bool\n\n    pattern_map = make(map[string]string)\n    color_map = make(map[string]string)\n    result = true\n\n    for i, pattern = range patterns {\n        color = colors[i]\n        if _, ok = pattern_map[pattern]; ok {\n            if color_map[pattern] != color {\n                result = false\n                break\n            }\n        } else {\n            pattern_map[pattern] = color\n            color_map[pattern] = color\n        }\n    }\n\n    return result\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, pattern := range patterns {\n        if pattern == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if pattern == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i, j int\n    for i = 0; i < len(colors); i++ {\n        for j = 0; j < len(patterns); j++ {\n            if colors[i] == patterns[j] {\n                break\n            }\n        }\n        if j == len(patterns) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) == 0 {\n        return true\n    }\n    if len(patterns) == 0 {\n        return false\n    }\n    if len(colors) < len(patterns) {\n        return false\n    }\n    if len(colors) == 1 {\n        return patterns[0] == \"*\" || patterns[0] == colors[0]\n    }\n    if patterns[0] == \"*\" {\n        return is_samepatterns(colors[1:], patterns[1:])\n    }\n    if patterns[0] == colors[0] {\n        return is_samepatterns(colors[1:], patterns[1:])\n    }\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range colors {\n        if patterns[i] != \"*\" && colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        } else if patterns[i] == \"odd\" && colors[i] % 2 != 0 {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, color := range colors {\n        if patterns[i] != \"any\" && patterns[i] != color {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        } else if patterns[i] == \"odd\" && colors[i] % 2 != 0 {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        } else if patterns[i] == \"odd\" && colors[i] % 2 == 1 {\n            continue\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var color_map = make(map[string]string)\n    var pattern_map = make(map[string]string)\n    for i := 0; i < len(colors); i++ {\n        if _, ok := color_map[colors[i]]; !ok {\n            color_map[colors[i]] = patterns[i]\n        } else {\n            if color_map[colors[i]] != patterns[i] {\n                return false\n            }\n        }\n        if _, ok := pattern_map[patterns[i]]; !ok {\n            pattern_map[patterns[i]] = colors[i]\n        } else {\n            if pattern_map[patterns[i]] != colors[i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i int\n    for i = 0; i < len(colors); i++ {\n        if colors[i] != patterns[i % len(patterns)] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i, j int\n    var color_map = make(map[string]string)\n    var pattern_map = make(map[string]string)\n    for i = 0; i < len(colors); i++ {\n        if _, ok := color_map[colors[i]]; !ok {\n            color_map[colors[i]] = patterns[i]\n        } else {\n            if color_map[colors[i]] != patterns[i] {\n                return false\n            }\n        }\n        if _, ok := pattern_map[patterns[i]]; !ok {\n            pattern_map[patterns[i]] = colors[i]\n        } else {\n            if pattern_map[patterns[i]] != colors[i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Write your code here\n    var i, j int\n    for i = 0; i < len(patterns); i++ {\n        for j = 0; j < len(colors); j++ {\n            if patterns[i] == colors[j] {\n                break\n            }\n        }\n        if j == len(colors) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    if len(colors) == 0 {\n        return true\n    }\n    color_map := make(map[string]string)\n    pattern_map := make(map[string]string)\n    for i := 0; i < len(colors); i++ {\n        if color_map[colors[i]] == \"\" {\n            color_map[colors[i]] = patterns[i]\n        } else if color_map[colors[i]] != patterns[i] {\n            return false\n        }\n        if pattern_map[patterns[i]] == \"\" {\n            pattern_map[patterns[i]] = colors[i]\n        } else if pattern_map[patterns[i]] != colors[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" && colors[i] % 2 == 0 {\n            continue\n        }\n        if patterns[i] == \"odd\" && colors[i] % 2 == 1 {\n            continue\n        }\n        return false\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range patterns {\n        if patterns[i] == \"even\" {\n            if i % 2 == 0 {\n                if colors[i] != colors[i+1] {\n                    return false\n                }\n            } else {\n                if colors[i] == colors[i-1] {\n                    return false\n                }\n            }\n        } else if patterns[i] == \"odd\" {\n            if i % 2 == 0 {\n                if colors[i] == colors[i+1] {\n                    return false\n                }\n            } else {\n                if colors[i] != colors[i-1] {\n                    return false\n                }\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] != \"*\" && patterns[i] != colors[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(patterns); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] && patterns[i] != \"*\" {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Write your code here\n    var i, j int\n    var color_map map[string]int\n    color_map = make(map[string]int)\n    for i = 0; i < len(colors); i++ {\n        if _, ok := color_map[colors[i]]; !ok {\n            color_map[colors[i]] = i\n        }\n    }\n    for i = 0; i < len(patterns); i++ {\n        if _, ok := color_map[patterns[i]]; !ok {\n            return false\n        }\n        if i > 0 && color_map[patterns[i]] < color_map[patterns[i-1]] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] == \"red\" || colors[i] == \"blue\" {\n                return false\n            }\n        }\n        if patterns[i] == \"odd\" {\n            if colors[i] == \"green\" || colors[i] == \"yellow\" {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] == \"even\" {\n            if colors[i] != colors[0] {\n                return false\n            }\n        } else if patterns[i] == \"odd\" {\n            if colors[i] == colors[0] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Write your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if patterns[i] != \"*\" && patterns[i] != colors[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    var i, j int\n    for i = 0; i < len(colors); i++ {\n        for j = 0; j < len(patterns); j++ {\n            if colors[i] == patterns[j] {\n                break\n            }\n        }\n        if j == len(patterns) {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // TODO - Add your code here\n    return false\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var i, j int\n    var c, p string\n    var result bool\n\n    for i, c = range colors {\n        for j, p = range patterns {\n            if c == p {\n                result = true\n                break\n            }\n        }\n        if result == false {\n            return false\n        }\n        result = false\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, _ := range patterns {\n        if patterns[i] != \"*\" && patterns[i] != colors[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, color := range colors {\n        if color != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n\n    for i, _ := range colors {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // TODO: Implement me\n    return false\n}\n",
    "    // Write your code here\n    return true\n}\n",
    "    if len(colors) != len(patterns) {\n        return false\n    }\n    for i := 0; i < len(colors); i++ {\n        if colors[i] != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    // Write your code here\n    if len(colors) != len(patterns) {\n        return false\n    }\n    for i, c := range colors {\n        if c != patterns[i] {\n            return false\n        }\n    }\n    return true\n}\n"
  ]
}