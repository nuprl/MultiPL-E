{
  "name": "mbpp_253_count_integer",
  "language": "go_test.go",
  "prompt": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5m6itlc_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpuv6294_f_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpuv6294_f_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdo_4zei9_test.go:26:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, value := range list {\n                if value == int(value) {\n                    count += 1\n                }\n            }\n            return count\n        case []float64:\n            list := list1.([]float64)\n            count := 0\n            for _, value := range list {\n                if value == float64(int(value)) {\n                    count += 1\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_empxvof_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list2 := list1.([]int)\n        count := 0\n        for _, v := range list2 {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list2 := list1.([]float64)\n        count := 0\n        for _, v := range list2 {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpvbzrk8xi_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvpouj8y1_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpvpouj8y1_test.go:20:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpvpouj8y1_test.go:26:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n/tmp/tmpvpouj8y1_test.go:32:26: invalid type assertion: v.(bool) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp67v8mw4w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp67v8mw4w_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []interface{}:\n            list := list1.([]interface{})\n            count := 0\n            for _, v := range list {\n                count += count_integer(v)\n            }\n            return count\n        case int:\n            return 1\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp0wgsd6yc_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp0wgsd6yc_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpq4otawbv_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpq4otawbv_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list2 := list1.([]interface{})\n        count := 0\n        for _, value := range list2 {\n            count += count_integer(value)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpqfrt6o18_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpqfrt6o18_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "Unsupported type\n--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2isxvc65_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpyvun1t0l_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpyvun1t0l_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp8sr6jbtc_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp8sr6jbtc_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb29dvnh2_test.go:10:12: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:11:10: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:12:14: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        case []interface{}:\n            list := list1.([]interface{})\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm7bicf7n_test.go:24:28: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        case []float64:\n            list := list1.([]float64)\n            count := 0\n            for _, v := range list {\n                if v == float64(int(v)) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpt6x8hg6b_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        list := list1.([]string)\n        count := 0\n        for _, v := range list {\n            if _, err := fmt.Sscanf(v, \"%d\", &count); err == nil {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp0bl5x98f_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp0bl5x98f_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            if _, ok := value.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdesqq77w_test.go:15:30: invalid type assertion: value.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    }\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb29dvnh2_test.go:10:12: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:11:10: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:12:14: undefined: reflect\n/tmp/tmpb29dvnh2_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        return len(list)\n    case []float64:\n        list := list1.([]float64)\n        return len(list)\n    case []string:\n        list := list1.([]string)\n        return len(list)\n    case []bool:\n        list := list1.([]bool)\n        return len(list)\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6ls_9l3w_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp6ls_9l3w_test.go:43: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case []int:\n                count += count_integer(v)\n            case []interface{}:\n                count += count_integer(v)\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpisi0go6i_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpq4otawbv_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdo_4zei9_test.go:26:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpttqmnbrc_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp5o_umce7_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp5o_umce7_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, item := range list {\n            count += count_integer(item)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpl4cu4acx_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpl4cu4acx_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        var count int\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmppx8dg5fs_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmppx8dg5fs_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count += 1\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsip1j89_test.go:10:12: undefined: reflect\n/tmp/tmplsip1j89_test.go:11:10: undefined: reflect\n/tmp/tmplsip1j89_test.go:12:14: undefined: reflect\n/tmp/tmplsip1j89_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    default:\n        return -1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0i_js_wj_test.go:11:12: undefined: reflect\n/tmp/tmp0i_js_wj_test.go:12:10: undefined: reflect\n/tmp/tmp0i_js_wj_test.go:13:14: undefined: reflect\n/tmp/tmp0i_js_wj_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9vp2alg2_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case []int:\n                count += count_integer(v)\n            case []interface{}:\n                count += count_integer(v)\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpisi0go6i_test.go:54: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            if value == int(value) {\n                count++\n            }\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, value := range list1.([]interface{}) {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgkoa5n_g_test.go:26:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpl3jqd7fm_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpl3jqd7fm_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc46fivm3_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(int); ok {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2__jgn9g_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmp2__jgn9g_test.go:20:26: invalid type assertion: v.(int) (non-interface type string on left)\n/tmp/tmp2__jgn9g_test.go:26:26: invalid type assertion: v.(int) (non-interface type float64 on left)\n/tmp/tmp2__jgn9g_test.go:32:26: invalid type assertion: v.(int) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpv1khzn8u_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        var count int\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        var count int\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        var count int\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    default:\n        return -1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjk8pn_tm_test.go:11:12: undefined: reflect\n/tmp/tmpjk8pn_tm_test.go:12:10: undefined: reflect\n/tmp/tmpjk8pn_tm_test.go:13:14: undefined: reflect\n/tmp/tmpjk8pn_tm_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsip1j89_test.go:10:12: undefined: reflect\n/tmp/tmplsip1j89_test.go:11:10: undefined: reflect\n/tmp/tmplsip1j89_test.go:12:14: undefined: reflect\n/tmp/tmplsip1j89_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpkge0rs62_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpkge0rs62_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpe449g9_n_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpe449g9_n_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    }\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppt9b13gq_test.go:10:12: undefined: reflect\n/tmp/tmppt9b13gq_test.go:11:10: undefined: reflect\n/tmp/tmppt9b13gq_test.go:12:14: undefined: reflect\n/tmp/tmppt9b13gq_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count = 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpe449g9_n_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpe449g9_n_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9vp2alg2_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpfs7vaq7r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvpouj8y1_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpvpouj8y1_test.go:20:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpvpouj8y1_test.go:26:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n/tmp/tmpvpouj8y1_test.go:32:26: invalid type assertion: v.(bool) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count += 1\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float32:\n        list := list1.([]float32)\n        count := 0\n        for _, v := range list {\n            if v == float32(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpmvvqwg7v_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float32:\n        list := list1.([]float32)\n        count := 0\n        for _, v := range list {\n            if v == float32(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpmvvqwg7v_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvpouj8y1_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpvpouj8y1_test.go:20:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpvpouj8y1_test.go:26:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n/tmp/tmpvpouj8y1_test.go:32:26: invalid type assertion: v.(bool) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpttqmnbrc_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmgqw21bw_test.go:11:12: undefined: reflect\n/tmp/tmpmgqw21bw_test.go:12:10: undefined: reflect\n/tmp/tmpmgqw21bw_test.go:13:14: undefined: reflect\n/tmp/tmpmgqw21bw_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123084,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9vp2alg2_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpix3s272k_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpnlzvt6k3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpnlzvt6k3_test.go:35: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpyvun1t0l_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpyvun1t0l_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5m5xqjgn_test.go:10:12: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:11:10: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:12:14: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmphozajvk8_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n\n        return count\n    }\n\n    return 0\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwnxj1j33_test.go:10:12: undefined: reflect\n/tmp/tmpwnxj1j33_test.go:11:10: undefined: reflect\n/tmp/tmpwnxj1j33_test.go:12:14: undefined: reflect\n/tmp/tmpwnxj1j33_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5m6itlc_test.go:15:26: invalid type assertion: v.(int) (non-interface type int on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case int:\n        return 1\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp8sr6jbtc_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp8sr6jbtc_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n\n        for i := 0; i < s.Len(); i++ {\n            if s.Index(i).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdbyowssv_test.go:11:12: undefined: reflect\n/tmp/tmpdbyowssv_test.go:12:10: undefined: reflect\n/tmp/tmpdbyowssv_test.go:13:14: undefined: reflect\n/tmp/tmpdbyowssv_test.go:16:37: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl_q89175_test.go:24:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbgr6pf3o_test.go:11:12: undefined: reflect\n/tmp/tmpbgr6pf3o_test.go:12:10: undefined: reflect\n/tmp/tmpbgr6pf3o_test.go:13:14: undefined: reflect\n/tmp/tmpbgr6pf3o_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            if v == int(v) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdo_4zei9_test.go:26:24: cannot convert v (type interface {}) to type int: need type assertion\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bwcj8yi_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmp1bwcj8yi_test.go:20:26: invalid type assertion: v.(int) (non-interface type string on left)\n/tmp/tmp1bwcj8yi_test.go:26:26: invalid type assertion: v.(int) (non-interface type float64 on left)\n/tmp/tmp1bwcj8yi_test.go:32:26: invalid type assertion: v.(int) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2pyz6z2r_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count += 1\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "Unsupported type\n--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpw33phug0_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsip1j89_test.go:10:12: undefined: reflect\n/tmp/tmplsip1j89_test.go:11:10: undefined: reflect\n/tmp/tmplsip1j89_test.go:12:14: undefined: reflect\n/tmp/tmplsip1j89_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    list := list1.([]interface{})\n    count := 0\n    for _, v := range list {\n        switch v.(type) {\n        case int:\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_integer(0x51a3a0, 0xc0000926a0, 0x2)\n\t/tmp/tmp8_6wtpj__test.go:10 +0xb8\ncommand-line-arguments_test.TestCount_Integer(0xc000001380)\n\t/tmp/tmp8_6wtpj__test.go:29 +0x199\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []interface{}:\n        count := 0\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n        return count\n    case int:\n        return 1\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmp5o_umce7_test.go:39: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp5o_umce7_test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsip1j89_test.go:10:12: undefined: reflect\n/tmp/tmplsip1j89_test.go:11:10: undefined: reflect\n/tmp/tmplsip1j89_test.go:12:14: undefined: reflect\n/tmp/tmplsip1j89_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123082,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplsip1j89_test.go:10:12: undefined: reflect\n/tmp/tmplsip1j89_test.go:11:10: undefined: reflect\n/tmp/tmplsip1j89_test.go:12:14: undefined: reflect\n/tmp/tmplsip1j89_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case []int:\n            list := list1.([]int)\n            count := 0\n            for _, v := range list {\n                if v == int(v) {\n                    count++\n                }\n            }\n            return count\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpwoatx241_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpwoatx241_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n        case int:\n            return 1\n        case []int:\n            count := 0\n            for _, v := range list1.([]int) {\n                count += count_integer(v)\n            }\n            return count\n        default:\n            return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_94q2hk__test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_94q2hk__test.go:39: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch reflect.TypeOf(list1).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(list1)\n        count := 0\n        for i := 0; i < s.Len(); i++ {\n            if reflect.TypeOf(s.Index(i).Interface()).Kind() == reflect.Int {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5m5xqjgn_test.go:10:12: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:11:10: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:12:14: undefined: reflect\n/tmp/tmp5m5xqjgn_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, v := range list {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp7811t5_f_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if _, ok := v.(int); ok {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range list1.([]string) {\n            if _, ok := v.(string); ok {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if _, ok := v.(float64); ok {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range list1.([]bool) {\n            if _, ok := v.(bool); ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510187,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvpouj8y1_test.go:14:26: invalid type assertion: v.(int) (non-interface type int on left)\n/tmp/tmpvpouj8y1_test.go:20:26: invalid type assertion: v.(string) (non-interface type string on left)\n/tmp/tmpvpouj8y1_test.go:26:26: invalid type assertion: v.(float64) (non-interface type float64 on left)\n/tmp/tmpvpouj8y1_test.go:32:26: invalid type assertion: v.(bool) (non-interface type bool on left)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    count := 0\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            count += count_integer(v)\n        }\n    case int:\n        count += 1\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__1 (0.00s)\n        tmpww41sy1q_test.go:37: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmpww41sy1q_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp1v2a819y_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp1v2a819y_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp_vw8mfa3_test.go:40: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    list := list1.([]interface{})\n    count := 0\n    for _, v := range list {\n        switch v.(type) {\n        case int:\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\npanic: interface conversion: interface {} is []int, not []interface {} [recovered]\n\tpanic: interface conversion: interface {} is []int, not []interface {}\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523720, 0xc0000102d0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_integer(0x51a3a0, 0xc0000926a0, 0x2)\n\t/tmp/tmp8_6wtpj__test.go:10 +0xb8\ncommand-line-arguments_test.TestCount_Integer(0xc000001380)\n\t/tmp/tmp8_6wtpj__test.go:29 +0x199\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count += 1\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count += 1\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpze9chg1q_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, v := range list {\n            if v == int(v) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, v := range list {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmpkoumwgvw_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, val := range list {\n            if val == int(val) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, val := range list {\n            if val == float64(int(val)) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6liz6i4h_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            switch v.(type) {\n            case int:\n                count++\n            case float64:\n                if v.(float64) == float64(int(v.(float64))) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510188,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    var count int = 0\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            if v == int(v) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            if v == float64(int(v)) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123086,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp6b1xo4mh_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        count := 0\n        for _, value := range list {\n            if value == int(value) {\n                count++\n            }\n        }\n        return count\n    case []float64:\n        list := list1.([]float64)\n        count := 0\n        for _, value := range list {\n            if value == float64(int(value)) {\n                count++\n            }\n        }\n        return count\n    case []interface{}:\n        list := list1.([]interface{})\n        count := 0\n        for _, value := range list {\n            switch value.(type) {\n            case int:\n                count++\n            case float64:\n                if value.(float64) == float64(int(value.(float64))) {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123085,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package count_integer_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that returns the number of integer elements in a given list.\nfunc count_integer(list1 interface{}) int {\n    switch list1.(type) {\n    case []int:\n        return len(list1.([]int))\n    case []string:\n        return len(list1.([]string))\n    case []float64:\n        return len(list1.([]float64))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Integer(t *testing.T) {\n  candidate := count_integer\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 2, \"abc\", 1.2}), expected: 2 },\n     { actual: candidate([]int{1, 2, 3}), expected: 3 },\n     { actual: candidate([]float64{1, 1.2, 4, 5.1}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123083,
      "stdout": "--- FAIL: TestCount_Integer (0.00s)\n    --- FAIL: TestCount_Integer/test_num__0 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=0)'\n    --- FAIL: TestCount_Integer/test_num__2 (0.00s)\n        tmp2dhgs_80_test.go:37: expected '%!s(int=2)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}