{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "go_test.go",
  "prompt": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 != 0 {\n            return n == 1\n        }\n        n /= 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpw5i8wera_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpw5i8wera_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i /= 2 {\n        if i == 1 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpimemcb2p_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpimemcb2p_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpa2rp9ne3_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 0 {\n            continue\n        }\n        if i == 1 {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpg5_jm5ch_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpg5_jm5ch_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n -= 1\n        } else {\n            n >>= 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp60_rc2c2_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i/2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpon21qax8_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpon21qax8_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1nky1nwx_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1nky1nwx_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpyz3hb190_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpyz3hb190_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if i == n {\n            return true\n        }\n        if i > n {\n            return false\n        }\n        n -= i\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124065,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpou3323in_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp5s0eo4qf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp5s0eo4qf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            n = n - i\n            if n == 0 {\n                return true\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxpedi3g4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpxpedi3g4_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxpedi3g4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp29g0f_5y_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp29g0f_5y_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_Sum_Of_Powers_Of_Two(n/2)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp1fpkijz8_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp1fpkijz8_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 1 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpsh01jcoa_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp2y721j4u_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp2y721j4u_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 && n != 1 {\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp7yfvcabw_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp7yfvcabw_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i >> 1 {\n        if i == 1 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpsap7yebu_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpsap7yebu_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n == 1 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpsb8f5_7l_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpsb8f5_7l_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if (1 << i) == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpu2lkq7gm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpu2lkq7gm_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpvcm8_8ce_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 == 1 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp7d6bsu4h_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp7d6bsu4h_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmptj30k085_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmptj30k085_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpt_4zashx_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpt_4zashx_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n%2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n/2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_0jniupr_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_0jniupr_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n >> 1 == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpp_9f5io7_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpp_9f5io7_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        } else {\n            n = n / 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpnkjwvyn__test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i >> 1 {\n        if i & 1 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmphqy_pl4m_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmphqy_pl4m_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        } else {\n            n = n / 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpnkjwvyn__test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 1 {\n        return true\n    }\n    if n < 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpvzwnwb1y_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n            return false\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp5s0eo4qf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp5s0eo4qf_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 1 {\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvftaa7u2_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvftaa7u2_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 1; i <= n; i *= 2 {\n        if n == i {\n            return true\n        }\n        if is_Sum_Of_Powers_Of_Two(n - i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpd18n0dxi_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpeplbb87a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i /= 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxwmtgtyv_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxwmtgtyv_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpeplbb87a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n / 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp31mwr018_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 1 {\n        return true\n    }\n    if n == 0 {\n        return false\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpl4qbbt_z_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpl4qbbt_z_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for i := 0; i < n; i++ {\n        if (n & (1 << i)) != 0 {\n            n -= 1 << i\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpjkcxvcix_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp3hvd__1x_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8_vr970v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8_vr970v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            if n >> 1 == 0 {\n                return true\n            } else {\n                return false\n            }\n        }\n        n = n >> 1\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmporb0dm37_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmporb0dm37_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 1 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8tfmmseu_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8tfmmseu_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpdkbqw8cb_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmptj30k085_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmptj30k085_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n >>= 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp36axsd52_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp36axsd52_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp36axsd52_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n\n    for n % 2 == 0 {\n        n /= 2\n    }\n\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp5k088edd_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp5k088edd_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n = n - 1\n        }\n        n = n / 2\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp_u1jmz01_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_y7mafvt_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_y7mafvt_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for i := 0; i < n; i++ {\n        if n == 1 << i {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpo0l4vp6z_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpo0l4vp6z_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmh7q7q4k_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpmh7q7q4k_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmh7q7q4k_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpi_yd0gp__test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpi_yd0gp__test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpeplbb87a_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if n & 1 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpdkbqw8cb_test.go:35: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy3jce46i_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 0 {\n        return is_Sum_Of_Powers_Of_Two(n / 2)\n    }\n    return is_Sum_Of_Powers_Of_Two(n - 1)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpn_mhsc6c_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n & (n - 1) != 0 {\n        n = n & (n - 1)\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqtrr8mny_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqtrr8mny_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n /= 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_959nhfz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_959nhfz_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpgqma241b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpgqma241b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_y7mafvt_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_y7mafvt_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp3hvd__1x_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpgqma241b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpgqma241b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for n > 0 {\n        if (n & (n-1)) == 0 {\n            return true\n        }\n        n = n & (n-1)\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp77_j6h7r_test.go:34: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    for i := 1; i < n; i *= 2 {\n        if i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpt3doz23i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpt3doz23i_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for i := 1; i <= n; i++ {\n        if n == (1 << i) - 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_92lh4_g_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp_92lh4_g_test.go:36: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_92lh4_g_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n <= 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if n == i {\n            return true\n        }\n        if n < i {\n            return false\n        }\n        n -= i\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmaoaolu4_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpvr6c7bws_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n/2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpiknlg_vk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpiknlg_vk_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 == 1 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp7d6bsu4h_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp7d6bsu4h_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp8_vr970v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp8_vr970v_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n -= 1\n        } else {\n            n >>= 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpy3g39kor_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_pa1wokz_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            n -= 1\n        } else {\n            n /= 2\n        }\n        if n == 1 {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmp87ywhnqb_test.go:44: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n /= 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp0unw0l33_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n >> 1\n            if n == 0 {\n                return true\n            }\n        } else {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpma_o88_h_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i /= 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpwtsag7jf_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpwtsag7jf_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    if n % 2 == 1 {\n        return false\n    }\n    return is_Sum_Of_Powers_Of_Two(n / 2)\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpboguvecq_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i <= n; i++ {\n        if n == (1 << i) {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxa5976co_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxa5976co_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 0 {\n            continue\n        }\n        if i == 1 {\n            return true\n        }\n        return false\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpg5_jm5ch_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpg5_jm5ch_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n & 1 == 1 {\n            n = n - 1\n        } else {\n            n = n >> 1\n        }\n    }\n    return n == 0\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__1 (0.00s)\n        tmpby7594kz_test.go:38: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n == 1 {\n            return true\n        }\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpgn2d9kht_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpgn2d9kht_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpmeic5bae_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqve56p4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqve56p4b_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n < 1 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := 1; i < n; i++ {\n        if n & i == n {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpy72jhsys_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpy72jhsys_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 != 0 {\n            return n == 1\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmprv5aotya_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmprv5aotya_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            return n == 1\n        }\n        n = n / 2\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmp_sd8za_1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmp_sd8za_1_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n = n / 2\n    }\n    if n == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124066,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpq5t5p_y__test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i == 2 {\n            return true\n        }\n        if i % 2 != 0 {\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpr8hkkjly_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n & (n - 1) != 0 {\n        n = n & (n - 1)\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqtrr8mny_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqtrr8mny_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return true\n    }\n    for i := n; i > 0; i = i / 2 {\n        if i % 2 == 1 {\n            if i == 1 {\n                return true\n            }\n            return false\n        }\n    }\n    return false\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpkng5duag_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n != 1 {\n        if n % 2 != 0 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124068,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpz8_9lg89_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n            return false\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpqu4pdgsg_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpqu4pdgsg_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n > 0 {\n        if n % 2 == 1 {\n            if n == 1 {\n                return true\n            } else {\n                return false\n            }\n        }\n        n = n / 2\n    }\n    return true\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124070,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpemh8w3u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpemh8w3u6_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package is_Sum_Of_Powers_Of_Two_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nfunc is_Sum_Of_Powers_Of_Two(n int) bool {\n    if n == 0 {\n        return false\n    }\n    for n % 2 == 0 {\n        n /= 2\n    }\n    return n == 1\n}\n\nfunc TestIs_Sum_Of_Powers_Of_Two(t *testing.T) {\n  candidate := is_Sum_Of_Powers_Of_Two\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected: true },\n     { actual: candidate(7), expected: false },\n     { actual: candidate(14), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517109,
      "stdout": "--- FAIL: TestIs_Sum_Of_Powers_Of_Two (0.00s)\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__0 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Sum_Of_Powers_Of_Two/test_num__2 (0.00s)\n        tmpxm08bat6_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}