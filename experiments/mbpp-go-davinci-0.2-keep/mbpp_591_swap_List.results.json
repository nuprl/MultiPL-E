{
  "name": "mbpp_591_swap_List",
  "language": "go_test.go",
  "prompt": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var first int = newList[0]\n    var last int = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) <= 1 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    // swap the first and last elements\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    temp := newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var first = newList[0]\n    var last = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) <= 1 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var newListLength int = len(newList)\n    var firstElement int = newList[0]\n    var lastElement int = newList[newListLength-1]\n    newList[0] = lastElement\n    newList[newListLength-1] = firstElement\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    temp := newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n\n    first := newList[0]\n    last := newList[len(newList) - 1]\n\n    newList[0] = last\n    newList[len(newList) - 1] = first\n\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    first := newList[0]\n    last := newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) <= 1 {\n        return newList\n    }\n\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var firstElement int\n    var lastElement int\n    var length int\n    length = len(newList)\n    firstElement = newList[0]\n    lastElement = newList[length-1]\n    newList[0] = lastElement\n    newList[length-1] = firstElement\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    // swap the first and last elements\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    temp := newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) == 0 {\n        return newList\n    }\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) < 2 {\n        return newList\n    }\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    if len(newList) > 1 {\n        newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    }\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    temp := newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    first := newList[0]\n    last := newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    return append(newList[len(newList)-1:], newList[1:len(newList)-1]...)\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "--- FAIL: TestSwap_List (0.00s)\n    --- FAIL: TestSwap_List/test_num__0 (0.00s)\n        tmpkq4yxmcr_test.go:28: expected '[%!s(int=24) %!s(int=35) %!s(int=9) %!s(int=56) %!s(int=12)]', got '[%!s(int=24) %!s(int=35) %!s(int=9) %!s(int=56)]'\n    --- FAIL: TestSwap_List/test_num__1 (0.00s)\n        tmpkq4yxmcr_test.go:28: expected '[%!s(int=3) %!s(int=2) %!s(int=1)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSwap_List/test_num__2 (0.00s)\n        tmpkq4yxmcr_test.go:28: expected '[%!s(int=6) %!s(int=5) %!s(int=4)]', got '[%!s(int=6) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList) - 1] = newList[len(newList) - 1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    var temp int\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123542,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package swap_List_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to interchange the first and last elements in a list.\nfunc swap_List(newList []int) []int {\n    newList[0], newList[len(newList)-1] = newList[len(newList)-1], newList[0]\n    return newList\n}\n\nfunc TestSwap_List(t *testing.T) {\n  candidate := swap_List\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{12, 35, 9, 56, 24}), expected: []int{24, 35, 9, 56, 12} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{3, 2, 1} },\n     { actual: candidate([]int{4, 5, 6}), expected: []int{6, 5, 4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510607,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}