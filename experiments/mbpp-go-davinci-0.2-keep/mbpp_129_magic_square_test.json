{
  "name": "mbpp_129_magic_square_test",
  "language": "go_test.go",
  "prompt": "package magic_square_test_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate whether the matrix is a magic square.\nfunc magic_square_test(my_matrix [][]int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMagic_Square_Test(t *testing.T) {\n  candidate := magic_square_test\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{7, 12, 1, 14}, []int{2, 13, 8, 11}, []int{16, 3, 10, 5}, []int{9, 6, 15, 4}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 8}}), expected: true },\n     { actual: candidate([][]int{[]int{2, 7, 6}, []int{9, 5, 1}, []int{4, 3, 7}}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        // check if the sum of each row is equal\n        sum_row := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_row += my_matrix[i][j]\n        }\n        // check if the sum of each column is equal\n        sum_col := 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_col += my_matrix[j][i]\n        }\n        if sum_row != sum_col {\n            return false\n        }\n    }\n    // check if the sum of each diagonal is equal\n    sum_diag_1 := 0\n    sum_diag_2 := 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum_diag_1 += my_matrix[i][i]\n        sum_diag_2 += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum_diag_1 != sum_diag_2 {\n        return false\n    }\n    return true\n}\n",
    "    var sum int\n    var magic_square bool\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 0; i < len(my_matrix); i++ {\n        var sum_row int\n        var sum_column int\n        for j := 0; j < len(my_matrix); j++ {\n            sum_row += my_matrix[i][j]\n            sum_column += my_matrix[j][i]\n        }\n        if sum_row != sum || sum_column != sum {\n            magic_square = false\n            break\n        } else {\n            magic_square = true\n        }\n    }\n    return magic_square\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square\n    var sum int = 0\n    var sum_row int = 0\n    var sum_column int = 0\n    var sum_diagonal int = 0\n    var sum_diagonal_2 int = 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum_row = 0\n        sum_column = 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_row += my_matrix[i][j]\n            sum_column += my_matrix[j][i]\n        }\n        if sum == 0 {\n            sum = sum_row\n        } else if sum != sum_row {\n            return false\n        }\n        if sum != sum_column {\n            return false\n        }\n        sum_diagonal += my_matrix[i][i]\n        sum_diagonal_2 += my_matrix[i][len(my_matrix[i]) - 1 - i]\n    }\n    if sum != sum_diagonal || sum != sum_diagonal_2 {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 1; i < len(my_matrix); i++ {\n        var sum_row int\n        for j := 0; j < len(my_matrix[0]); j++ {\n            sum_row += my_matrix[i][j]\n        }\n        if sum_row != sum {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix[0]); i++ {\n        var sum_col int\n        for j := 0; j < len(my_matrix); j++ {\n            sum_col += my_matrix[j][i]\n        }\n        if sum_col != sum {\n            return false\n        }\n    }\n    var sum_diag1 int\n    var sum_diag2 int\n    for i := 0; i < len(my_matrix); i++ {\n        sum_diag1 += my_matrix[i][i]\n        sum_diag2 += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum_diag1 != sum || sum_diag2 != sum {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square\n    var sum_of_rows = make([]int, len(my_matrix))\n    var sum_of_columns = make([]int, len(my_matrix))\n    var sum_of_diagonals = make([]int, 2)\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_of_rows[i] += my_matrix[i][j]\n            sum_of_columns[j] += my_matrix[i][j]\n            if i == j {\n                sum_of_diagonals[0] += my_matrix[i][j]\n            }\n            if i + j == len(my_matrix) - 1 {\n                sum_of_diagonals[1] += my_matrix[i][j]\n            }\n        }\n    }\n\n    // Check if the sum of each row, column, and diagonal is the same\n    var sum = sum_of_rows[0]\n    for i := 1; i < len(sum_of_rows); i++ {\n        if sum != sum_of_rows[i] || sum != sum_of_columns[i] {\n            return false\n        }\n    }\n    for i := 0; i < len(sum_of_diagonals); i++ {\n        if sum != sum_of_diagonals[i] {\n            return false\n        }\n    }\n\n    return true\n}\n",
    "    // Check if it is a square matrix\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the sum of each row is equal\n    var sum_of_rows = make([]int, len(my_matrix))\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            sum_of_rows[i] += my_matrix[i][j]\n        }\n    }\n    for i := 0; i < len(sum_of_rows) - 1; i++ {\n        if sum_of_rows[i] != sum_of_rows[i + 1] {\n            return false\n        }\n    }\n    // Check if the sum of each column is equal\n    var sum_of_columns = make([]int, len(my_matrix[0]))\n    for i := 0; i < len(my_matrix[0]); i++ {\n        for j := 0; j < len(my_matrix); j++ {\n            sum_of_columns[i] += my_matrix[j][i]\n        }\n    }\n    for i := 0; i < len(sum_of_columns) - 1; i++ {\n        if sum_of_columns[i] != sum_of_columns[i + 1] {\n            return false\n        }\n    }\n    // Check if the sum of each diagonal is equal\n    var sum_of_diagonals = make([]int, 2)\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if i == j {\n                sum_of_diagonals[0] += my_matrix[i][j]\n            }\n            if i + j == len(my_matrix) - 1 {\n                sum_of_diagonals[1] += my_matrix[i][j]\n            }\n        }\n    }\n    if sum_of",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check that the matrix is square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check that the matrix is odd\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n\n    // Check that the matrix is filled with integers\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != int(my_matrix[i][j]) {\n                return false\n            }\n        }\n    }\n\n    // Check that the matrix is filled with consecutive integers\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != i*len(my_matrix) + j + 1 {\n                return false\n            }\n        }\n    }\n\n    // Check that the matrix is filled with consecutive integers\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != i*len(my_matrix) + j + 1 {\n                return false\n            }\n        }\n    }\n\n    // Check that the sum of the rows is equal\n    var row_sum int\n    for i := 0; i < len(my_matrix); i++ {\n        row_sum = 0\n        for j := 0; j < len(my_matrix[i]); j++ {\n            row_sum += my_matrix[i][j]\n        }\n        if row_sum != len(my_matrix)*(len(my_matrix)*len(my_matrix)+1)/2 {\n            return false\n        }\n    }\n\n    // Check that the sum of the columns is equal\n    var col_sum int\n    for j := 0; j < len(my_matrix[0]); j++ {\n        col_",
    "    // TODO: Implement me!\n    return false\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        if sum_row(my_matrix, i) != sum_row(my_matrix, 0) {\n            return false\n        }\n        if sum_col(my_matrix, i) != sum_col(my_matrix, 0) {\n            return false\n        }\n    }\n    if sum_diagonal(my_matrix, 0) != sum_diagonal(my_matrix, 1) {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        if sum(my_matrix[i]) != sum(my_matrix[0]) {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix[0]); i++ {\n        if sum(get_column(my_matrix, i)) != sum(my_matrix[0]) {\n            return false\n        }\n    }\n    if sum(get_diagonal(my_matrix, 0)) != sum(my_matrix[0]) {\n        return false\n    }\n    if sum(get_diagonal(my_matrix, 1)) != sum(my_matrix[0]) {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[0]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // check if matrix is square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // check if matrix is odd\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n    // check if matrix is magic square\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            // check if matrix is magic square\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n\n    // Check if the matrix is a magic square\n    for i := 0; i < len(my_matrix); i++ {\n        if sum(my_matrix[i]) != sum(my_matrix[0]) {\n            return false\n        }\n    }\n\n    for i := 0; i < len(my_matrix); i++ {\n        var sum_of_column int = 0\n        for j := 0; j < len(my_matrix); j++ {\n            sum_of_column += my_matrix[j][i]\n        }\n        if sum_of_column != sum(my_matrix[0]) {\n            return false\n        }\n    }\n\n    var sum_of_diagonal_1 int = 0\n    var sum_of_diagonal_2 int = 0\n    for i := 0; i < len(my_matrix); i++ {\n        sum_of_diagonal_1 += my_matrix[i][i]\n        sum_of_diagonal_2 += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if sum_of_diagonal_1 != sum(my_matrix[0]) || sum_of_diagonal_2 != sum(my_matrix[0]) {\n        return false\n    }\n\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[0]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    // Check the matrix is square\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check the matrix is odd\n    if len(my_matrix) % 2 == 0 {\n        return false\n    }\n    // Check the matrix is magic square\n    var sum int\n    for i := 0; i < len(my_matrix); i++ {\n        sum += my_matrix[0][i]\n    }\n    for i := 1; i < len(my_matrix); i++ {\n        var temp int\n        for j := 0; j < len(my_matrix); j++ {\n            temp += my_matrix[i][j]\n        }\n        if temp != sum {\n            return false\n        }\n    }\n    for i := 0; i < len(my_matrix); i++ {\n        var temp int\n        for j := 0; j < len(my_matrix); j++ {\n            temp += my_matrix[j][i]\n        }\n        if temp != sum {\n            return false\n        }\n    }\n    var temp int\n    for i := 0; i < len(my_matrix); i++ {\n        temp += my_matrix[i][i]\n    }\n    if temp != sum {\n        return false\n    }\n    temp = 0\n    for i := 0; i < len(my_matrix); i++ {\n        temp += my_matrix[i][len(my_matrix) - 1 - i]\n    }\n    if temp != sum {\n        return false\n    }\n    return true\n}\n",
    "    // Check if the matrix is a square.\n    if len(my_matrix) != len(my_matrix[0]) {\n        return false\n    }\n    // Check if the matrix is a magic square.\n    for i := 0; i < len(my_matrix); i++ {\n        for j := 0; j < len(my_matrix[i]); j++ {\n            if my_matrix[i][j] != my_matrix[j][i] {\n                return false\n            }\n        }\n    }\n    return true\n}\n"
  ]
}