{
  "name": "mbpp_291_count_no_of_ways",
  "language": "go_test.go",
  "prompt": "package count_no_of_ways_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nfunc count_no_of_ways(n int, k int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_No_Of_Ways(t *testing.T) {\n  candidate := count_no_of_ways\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2, 4), expected: 16 },\n     { actual: candidate(3, 2), expected: 6 },\n     { actual: candidate(4, 4), expected: 228 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    diff := k * (k - 1)\n    same := k\n    for i := 3; i <= n; i++ {\n        temp := diff\n        diff = (diff + same) * (k - 1)\n        same = temp\n    }\n    return diff + same\n}\n",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    // n >= 3\n    // ways[i] means the number of ways to paint the ith post.\n    ways := make([]int, n)\n    ways[0] = k\n    ways[1] = k * k\n    for i := 2; i < n; i++ {\n        // ways[i] = ways[i - 1] * (k - 1) + ways[i - 2] * (k - 1)\n        ways[i] = ways[i - 1] * (k - 1) + ways[i - 2] * (k - 1)\n    }\n    return ways[n - 1]\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k*k\n    }\n    same := k\n    diff := k*(k-1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same+diff)*(k-1)\n    }\n    return same+diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    diff_color_count := k * (k - 1)\n    same_color_count := k\n    for i := 3; i <= n; i++ {\n        temp := diff_color_count\n        diff_color_count = (diff_color_count + same_color_count) * (k - 1)\n        same_color_count = temp\n    }\n    return diff_color_count + same_color_count\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 || k == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k*k\n    }\n    same := k\n    diff := k*(k-1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same+diff)*(k-1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        temp := diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        temp := diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n",
    "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        temp := diff\n        diff = (same + diff) * (k - 1)\n        same = temp\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    var same, diff int\n    same = k\n    diff = k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n",
    "    if n == 1 {\n        return k\n    }\n    if n == 2 {\n        return k * k\n    }\n    same := k\n    diff := k * (k - 1)\n    for i := 3; i <= n; i++ {\n        same, diff = diff, (same + diff) * (k - 1)\n    }\n    return same + diff\n}\n"
  ]
}