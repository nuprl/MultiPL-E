{
  "name": "mbpp_240_replace_list",
  "language": "go_test.go",
  "prompt": "package replace_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nfunc replace_list(list1 interface{}, list2 interface{}) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestReplace_List(t *testing.T) {\n  candidate := replace_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 7, 9, 10}, []int{2, 4, 6, 8}), expected: []int{1, 3, 5, 7, 9, 2, 4, 6, 8} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}, []int{5, 6, 7, 8}), expected: []int{1, 2, 3, 4, 5, 6, 7, 8} },\n     { actual: candidate([]string{\"red\", \"blue\", \"green\"}, []string{\"yellow\"}), expected: []string{\"red\", \"blue\", \"yellow\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list2_int := list2.([]int)\n        list1_int[len(list1_int) - 1] = list2_int[0]\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list2_string := list2.([]string)\n        list1_string[len(list1_string) - 1] = list2_string[0]\n        return list1_string\n    default:\n        return nil\n    }\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        default:\n            return nil\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        default:\n            return nil\n        }\n    default:\n        return nil\n    }\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)\n            list1[len(list1)-1] = list2.(int)\n        case []string:\n            list1 = list1.([]string)\n            list1[len(list1)-1] = list2.(string)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n            return list1\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n            return list1\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        default:\n            return nil\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        default:\n            return nil\n        }\n    default:\n        return nil\n    }\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    // YOUR CODE HERE\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]int)[0]\n            return list1\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return list1\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    switch list1 := list1.(type) {\n    case []int:\n        switch list2 := list2.(type) {\n        case []int:\n            list1[len(list1)-1] = list2[0]\n            return list1\n        }\n    case []string:\n        switch list2 := list2.(type) {\n        case []string:\n            list1[len(list1)-1] = list2[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    var result []interface{}\n    result = append(result, list1)\n    result = append(result, list2)\n    return result\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n        case []float64:\n            list1 = list1.([]float64)[:len(list1.([]float64))-1]\n            list1 = append(list1.([]float64), list2.([]float64)...)\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    var list1_len int\n    var list2_len int\n    switch list1.(type) {\n    case []int:\n        list1_len = len(list1.([]int))\n    case []string:\n        list1_len = len(list1.([]string))\n    case []float64:\n        list1_len = len(list1.([]float64))\n    }\n    switch list2.(type) {\n    case []int:\n        list2_len = len(list2.([]int))\n    case []string:\n        list2_len = len(list2.([]string))\n    case []float64:\n        list2_len = len(list2.([]float64))\n    }\n    if list1_len == 0 || list2_len == 0 {\n        return list1\n    }\n    switch list1.(type) {\n    case []int:\n        list1_copy := list1.([]int)\n        list1_copy[list1_len-1] = list2.([]int)[0]\n        return list1_copy\n    case []string:\n        list1_copy := list1.([]string)\n        list1_copy[list1_len-1] = list2.([]string)[0]\n        return list1_copy\n    case []float64:\n        list1_copy := list1.([]float64)\n        list1_copy[list1_len-1] = list2.([]float64)[0]\n        return list1_copy\n    }\n    return list1\n}\n",
    "    // TODO: implement replace_list\n    return nil\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n            return list1\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n            return list1\n        default:\n            return nil\n    }\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]string)[0]\n            return list1\n        case []float64:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]float64)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]string)[0]\n            return list1\n        case []float64:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]float64)[0]\n            return list1\n        }\n    case []float64:\n        switch list2.(type) {\n        case []int:\n            list1.([]float64)[len(list1.([]float64))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]float64)[len(list1.([]float64))-1] = list2.([]string)[0]\n            return list1\n        case []float64:\n            list1.([]float64)[len(list1.([]float64))-1] = list2.([]float64)[0]\n            return list1\n        }\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    var list1_len int\n    var list2_len int\n    switch list1.(type) {\n    case []int:\n        list1_len = len(list1.([]int))\n    case []string:\n        list1_len = len(list1.([]string))\n    }\n    switch list2.(type) {\n    case []int:\n        list2_len = len(list2.([]int))\n    case []string:\n        list2_len = len(list2.([]string))\n    }\n    if list1_len == 0 || list2_len == 0 {\n        return list1\n    }\n    switch list1.(type) {\n    case []int:\n        list1_copy := list1.([]int)\n        list1_copy[list1_len-1] = list2.([]int)[0]\n        return list1_copy\n    case []string:\n        list1_copy := list1.([]string)\n        list1_copy[list1_len-1] = list2.([]string)[0]\n        return list1_copy\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        default:\n            return nil\n    }\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_slice := list1.([]int)\n            list1_slice[len(list1_slice) - 1] = list2.(int)\n            return list1_slice\n        case []string:\n            list1_slice := list1.([]string)\n            list1_slice[len(list1_slice) - 1] = list2.(string)\n            return list1_slice\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n            return list1\n        default:\n            return nil\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n            return list1\n        default:\n            return nil\n        }\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_len := len(list1.([]int))\n        list1_new := list1.([]int)[:list1_len-1]\n        list1_new = append(list1_new, list2.([]int)...)\n        return list1_new\n    case []string:\n        list1_len := len(list1.([]string))\n        list1_new := list1.([]string)[:list1_len-1]\n        list1_new = append(list1_new, list2.([]string)...)\n        return list1_new\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        default:\n            return nil\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        default:\n            return nil\n        }\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                case []string:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n                case []float64:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]float64)...)\n                case []bool:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]bool)...)\n            }\n        case []string:\n            switch list2.(type) {\n                case []int:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n                case []string:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                case []float64:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]float64)...)\n                case []bool:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]bool)...)\n            }\n        case []float64:\n            switch list2.(type) {\n                case []int:\n                    list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]int)...)\n                case []string:\n                    list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]string)...)\n                case []float64:\n                    list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]float64)...)\n                case []bool:\n                    list1 = append(list1.([]float64)[:",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]string)[0][0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string)) - 1] = string(list2.([]int)[0])\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1_int := list1.([]int)\n                    list2_int := list2.([]int)\n                    list1_int[len(list1_int)-1] = list2_int[0]\n                    list1_int = append(list1_int, list2_int[1:]...)\n                    return list1_int\n                case []string:\n                    list1_int := list1.([]int)\n                    list2_string := list2.([]string)\n                    list1_int[len(list1_int)-1] = len(list2_string)\n                    list1_int = append(list1_int, list2_string...)\n                    return list1_int\n                case []float64:\n                    list1_int := list1.([]int)\n                    list2_float := list2.([]float64)\n                    list1_int[len(list1_int)-1] = int(list2_float[0])\n                    list1_int = append(list1_int, list2_float[1:]...)\n                    return list1_int\n            }\n        case []string:\n            switch list2.(type) {\n                case []int:\n                    list1_string := list1.([]string)\n                    list2_int := list2.([]int)\n                    list1_string[len(list1_string)-1] = fmt.Sprintf(\"%d\", list2_int[0])\n                    list1_string = append(list1_string, list2_int[1:]...)\n                    return list1_string\n                case []string:\n                    list1_string := list1.([]string)\n                    list2_string := list2.([]string)\n                    list1_string[len(list1_string)-1] = list2_string[0]\n                    list1_string = append(list1_string, list2_string[1:]...)\n                    return list1_string\n                case []float64:\n                    list1_string := list1.([]string)\n                    list2_float := list2.([]float64)\n                   ",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list2_int := list2.([]int)\n        list1_int[len(list1_int)-1] = list2_int[0]\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list2_string := list2.([]string)\n        list1_string[len(list1_string)-1] = list2_string[0]\n        return list1_string\n    case []float64:\n        list1_float64 := list1.([]float64)\n        list2_float64 := list2.([]float64)\n        list1_float64[len(list1_float64)-1] = list2_float64[0]\n        return list1_float64\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]string)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            list2_int := list2.([]int)\n            list1_int[len(list1_int) - 1] = list2_int[0]\n            return list1_int\n        case []string:\n            list1_int := list1.([]int)\n            list2_string := list2.([]string)\n            list1_int[len(list1_int) - 1] = len(list2_string)\n            return list1_int\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1_string := list1.([]string)\n            list2_int := list2.([]int)\n            list1_string[len(list1_string) - 1] = fmt.Sprintf(\"%d\", list2_int[0])\n            return list1_string\n        case []string:\n            list1_string := list1.([]string)\n            list2_string := list2.([]string)\n            list1_string[len(list1_string) - 1] = list2_string[0]\n            return list1_string\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        switch list2.(type) {\n        case []int:\n            list2_int := list2.([]int)\n            list1_int[len(list1_int)-1] = list2_int[0]\n            return list1_int\n        case []string:\n            list2_string := list2.([]string)\n            list1_int[len(list1_int)-1] = len(list2_string[0])\n            return list1_int\n        }\n    case []string:\n        list1_string := list1.([]string)\n        switch list2.(type) {\n        case []int:\n            list2_int := list2.([]int)\n            list1_string[len(list1_string)-1] = string(list2_int[0])\n            return list1_string\n        case []string:\n            list2_string := list2.([]string)\n            list1_string[len(list1_string)-1] = list2_string[0]\n            return list1_string\n        }\n    }\n    return nil\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n            return list1\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n            return list1\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            switch list2.(type) {\n                case []int:\n                    list2_int := list2.([]int)\n                    list1_int[len(list1_int)-1] = list2_int[0]\n                    return list1_int\n                case []string:\n                    list2_string := list2.([]string)\n                    list1_int[len(list1_int)-1] = len(list2_string[0])\n                    return list1_int\n                default:\n                    return nil\n            }\n        case []string:\n            list1_string := list1.([]string)\n            switch list2.(type) {\n                case []int:\n                    list2_int := list2.([]int)\n                    list1_string[len(list1_string)-1] = string(list2_int[0])\n                    return list1_string\n                case []string:\n                    list2_string := list2.([]string)\n                    list1_string[len(list1_string)-1] = list2_string[0]\n                    return list1_string\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    var result []interface{}\n    switch list1.(type) {\n    case []interface{}:\n        result = list1.([]interface{})\n        result[len(result)-1] = list2\n    default:\n        result = []interface{}{list1, list2}\n    }\n    return result\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_int := list1.([]int)\n            switch list2.(type) {\n                case []int:\n                    list2_int := list2.([]int)\n                    list1_int[len(list1_int)-1] = list2_int[0]\n                    list1_int = append(list1_int, list2_int[1:]...)\n                    return list1_int\n                case []string:\n                    list2_string := list2.([]string)\n                    list1_int[len(list1_int)-1] = len(list2_string[0])\n                    list1_int = append(list1_int, list2_string[1:]...)\n                    return list1_int\n                default:\n                    return list1\n            }\n        case []string:\n            list1_string := list1.([]string)\n            switch list2.(type) {\n                case []int:\n                    list2_int := list2.([]int)\n                    list1_string[len(list1_string)-1] = fmt.Sprintf(\"%d\", list2_int[0])\n                    list1_string = append(list1_string, list2_int[1:]...)\n                    return list1_string\n                case []string:\n                    list2_string := list2.([]string)\n                    list1_string[len(list1_string)-1] = list2_string[0]\n                    list1_string = append(list1_string, list2_string[1:]...)\n                    return list1_string\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n            return list1\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n            return list1\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n                    return list1\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n                    return list1\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    // TODO: Implement me!\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list2_int := list2.([]int)\n        list1_int[len(list1_int)-1] = list2_int[0]\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list2_string := list2.([]string)\n        list1_string[len(list1_string)-1] = list2_string[0]\n        return list1_string\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)\n            list1[len(list1)-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1 = list1.([]string)\n            list1[len(list1)-1] = list2.([]string)[0]\n            return list1\n        case []float64:\n            list1 = list1.([]float64)\n            list1[len(list1)-1] = list2.([]float64)[0]\n            return list1\n        case []bool:\n            list1 = list1.([]bool)\n            list1[len(list1)-1] = list2.([]bool)[0]\n            return list1\n        default:\n            return nil\n    }\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n        case []float64:\n            list1 = list1.([]float64)[:len(list1.([]float64))-1]\n            list1 = append(list1.([]float64), list2.([]float64)...)\n        case []bool:\n            list1 = list1.([]bool)[:len(list1.([]bool))-1]\n            list1 = append(list1.([]bool), list2.([]bool)...)\n        default:\n            fmt.Println(\"Invalid type\")\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1 = list2\n        default:\n            fmt.Println(\"list2 is not a list\")\n        }\n    default:\n        fmt.Println(\"list1 is not a list\")\n    }\n    return list1\n}\n",
    "    return list1\n}\n",
    "    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)[:len(list1.([]int))-1]\n        list1 = append(list1.([]int), list2.([]int)...)\n    case []string:\n        list1 = list1.([]string)[:len(list1.([]string))-1]\n        list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list2_int := list2.([]int)\n        list1_int[len(list1_int)-1] = list2_int[0]\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list2_string := list2.([]string)\n        list1_string[len(list1_string)-1] = list2_string[0]\n        return list1_string\n    case []float64:\n        list1_float := list1.([]float64)\n        list2_float := list2.([]float64)\n        list1_float[len(list1_float)-1] = list2_float[0]\n        return list1_float\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int)) - 1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int)) - 1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]int)[:len(list1.([]int)) - 1], list2.([]float64)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string)) - 1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string)) - 1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]string)[:len(list1.([]string)) - 1], list2.([]float64)...)\n        }\n    case []float64:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]float64)[:len(list1.([]float64)) - 1], list2.([]int)...)\n        case []string:\n            return append(list1.([]float64)[:len(list1.([]float64)) - 1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]float64)[:len(list1.([]float64)) - 1], list2.([]float64)...)\n        }\n    }\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n        case []float64:\n            list1 = list1.([]float64)[:len(list1.([]float64))-1]\n            list1 = append(list1.([]float64), list2.([]float64)...)\n    }\n    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                default:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.(int))\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                default:\n                    list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.(string))\n            }\n        default:\n            fmt.Println(\"Invalid input\")\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]string)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_slice := list1.([]int)\n        list1_slice[len(list1_slice)-1] = list2.(int)\n        return list1_slice\n    case []string:\n        list1_slice := list1.([]string)\n        list1_slice[len(list1_slice)-1] = list2.(string)\n        return list1_slice\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n                    return list1\n                case []string:\n                    list1.([]int)[len(list1.([]int)) - 1] = list2.([]string)[0]\n                    return list1\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []int:\n                    list1.([]string)[len(list1.([]string)) - 1] = list2.([]int)[0]\n                    return list1\n                case []string:\n                    list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n                    return list1\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1 = list1.([]int)\n        list2 = list2.([]int)\n        list1 = append(list1[:len(list1)-1], list2...)\n        return list1\n    case []string:\n        list1 = list1.([]string)\n        list2 = list2.([]string)\n        list1 = append(list1[:len(list1)-1], list2...)\n        return list1\n    default:\n        return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int)) - 1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1.([]int)[len(list1.([]int)) - 1] = len(list2.([]string))\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1.([]string)[len(list1.([]string)) - 1] = string(list2.([]int)[0])\n            return list1\n        case []string:\n            list1.([]string)[len(list1.([]string)) - 1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    var result []interface{}\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, v)\n        }\n        result[len(result)-1] = list2\n    default:\n        result = append(result, list1)\n        result = append(result, list2)\n    }\n    return result\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1_int := list1.([]int)\n                    list2_int := list2.([]int)\n                    list1_int = append(list1_int[:len(list1_int)-1], list2_int...)\n                    return list1_int\n                default:\n                    return nil\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1_string := list1.([]string)\n                    list2_string := list2.([]string)\n                    list1_string = append(list1_string[:len(list1_string)-1], list2_string...)\n                    return list1_string\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)[:len(list1.([]int))-1]\n            list1 = append(list1.([]int), list2.([]int)...)\n        case []string:\n            list1 = list1.([]string)[:len(list1.([]string))-1]\n            list1 = append(list1.([]string), list2.([]string)...)\n        case []float64:\n            list1 = list1.([]float64)[:len(list1.([]float64))-1]\n            list1 = append(list1.([]float64), list2.([]float64)...)\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        case []float64:\n            list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]float64)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        case []float64:\n            list1 = append(list1.([]string)[:len(list1.([]string))-1], list2.([]float64)...)\n        }\n    case []float64:\n        switch list2.(type) {\n        case []int:\n            list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]int)...)\n        case []string:\n            list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]string)...)\n        case []float64:\n            list1 = append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]float64)...)\n        }\n    }\n    return list1\n}\n",
    "    return nil\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    var result []interface{}\n    switch list1.(type) {\n    case []interface{}:\n        result = list1.([]interface{})\n    default:\n        result = []interface{}{list1}\n    }\n    switch list2.(type) {\n    case []interface{}:\n        result[len(result)-1] = list2\n    default:\n        result[len(result)-1] = []interface{}{list2}\n    }\n    return result\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list1_int = append(list1_int[:len(list1_int)-1], list2.([]int)...)\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list1_string = append(list1_string[:len(list1_string)-1], list2.([]string)...)\n        return list1_string\n    default:\n        return nil\n    }\n}\n",
    "    var result []interface{}\n    switch list1.(type) {\n    case []interface{}:\n        for _, v := range list1.([]interface{}) {\n            result = append(result, v)\n        }\n    default:\n        result = append(result, list1)\n    }\n    switch list2.(type) {\n    case []interface{}:\n        for _, v := range list2.([]interface{}) {\n            result = append(result, v)\n        }\n    default:\n        result = append(result, list2)\n    }\n    return result\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1 = append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                    return list1\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    list1_int := list1.([]int)\n                    list2_int := list2.([]int)\n                    list1_int[len(list1_int)-1] = list2_int[0]\n                    return list1_int\n                default:\n                    return nil\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    list1_string := list1.([]string)\n                    list2_string := list2.([]string)\n                    list1_string[len(list1_string)-1] = list2_string[0]\n                    return list1_string\n                default:\n                    return nil\n            }\n        default:\n            return nil\n    }\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        list1_int := list1.([]int)\n        list2_int := list2.([]int)\n        list1_int[len(list1_int)-1] = list2_int[0]\n        return list1_int\n    case []string:\n        list1_string := list1.([]string)\n        list2_string := list2.([]string)\n        list1_string[len(list1_string)-1] = list2_string[0]\n        return list1_string\n    default:\n        return nil\n    }\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            list1.([]int)[len(list1.([]int))-1] = list2.([]int)[0]\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []string:\n            list1.([]string)[len(list1.([]string))-1] = list2.([]string)[0]\n            return list1\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        default:\n            return list1\n        }\n    default:\n        return list1\n    }\n}\n",
    "    return list1\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1 = list1.([]int)\n            list1[len(list1)-1] = list2.([]int)[0]\n            return list1\n        case []string:\n            list1 = list1.([]string)\n            list1[len(list1)-1] = list2.([]string)[0]\n            return list1\n        default:\n            return list1\n    }\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_len := len(list1.([]int))\n            list1_last := list1.([]int)[list1_len-1]\n            list1.([]int)[list1_len-1] = list2.([]int)[0]\n            list2.([]int)[0] = list1_last\n        case []string:\n            list1_len := len(list1.([]string))\n            list1_last := list1.([]string)[list1_len-1]\n            list1.([]string)[list1_len-1] = list2.([]string)[0]\n            list2.([]string)[0] = list1_last\n    }\n    return list1\n}\n",
    "    // TODO: Implement\n    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n    case []int:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]int)[:len(list1.([]int))-1], list2.([]float64)...)\n        }\n    case []string:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]string)[:len(list1.([]string))-1], list2.([]float64)...)\n        }\n    case []float64:\n        switch list2.(type) {\n        case []int:\n            return append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]int)...)\n        case []string:\n            return append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]string)...)\n        case []float64:\n            return append(list1.([]float64)[:len(list1.([]float64))-1], list2.([]float64)...)\n        }\n    }\n    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            list1_ := list1.([]int)\n            list2_ := list2.([]int)\n            list1_[len(list1_) - 1] = list2_[0]\n            return list1_\n        case []string:\n            list1_ := list1.([]string)\n            list2_ := list2.([]string)\n            list1_[len(list1_) - 1] = list2_[0]\n            return list1_\n        case []float64:\n            list1_ := list1.([]float64)\n            list2_ := list2.([]float64)\n            list1_[len(list1_) - 1] = list2_[0]\n            return list1_\n        default:\n            return nil\n    }\n}\n",
    "    return nil\n}\n",
    "    return list1\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    switch list1.(type) {\n        case []int:\n            switch list2.(type) {\n                case []int:\n                    return append(list1.([]int)[:len(list1.([]int))-1], list2.([]int)...)\n                default:\n                    return list1\n            }\n        case []string:\n            switch list2.(type) {\n                case []string:\n                    return append(list1.([]string)[:len(list1.([]string))-1], list2.([]string)...)\n                default:\n                    return list1\n            }\n        default:\n            return list1\n    }\n}\n",
    "    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n"
  ]
}