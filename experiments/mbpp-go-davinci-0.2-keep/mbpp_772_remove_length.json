{
  "name": "mbpp_772_remove_length",
  "language": "go_test.go",
  "prompt": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var words []string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            words = append(words, word)\n            word = \"\"\n        }\n    }\n    words = append(words, word)\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    var word_length int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    word = \"\"\n    result = \"\"\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word_len++\n        } else {\n            word_end = i\n            word = test_str[word_start:word_end]\n            if word_len != K {\n                if k == 0 {\n                    result = word\n                } else {\n                    result = result + \" \" + word\n                }\n                k++\n            }\n            word_len = 0\n            word_start = i + 1\n        }\n    }\n\n    if word_len != K {\n        if k == 0 {\n            result = test_str[word_start:]\n        } else {\n            result = result + \" \" + test_str[word_start:]\n        }\n    }\n\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    var word_len int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n",
    "    var result string\n    var word string\n    var i int\n    var j int\n    var length int\n    var word_length int\n\n    length = len(test_str)\n    for i = 0; i < length; i++ {\n        word = \"\"\n        for j = i; j < length; j++ {\n            if test_str[j] == ' ' {\n                break\n            }\n            word = word + string(test_str[j])\n        }\n        word_length = len(word)\n        if word_length != K {\n            result = result + word\n        }\n        if j < length {\n            result = result + \" \"\n        }\n        i = j\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var i int\n\n    word_count = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word\n                word_count++\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n        word_count++\n    }\n\n    if word_count == 0 {\n        return \"\"\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n"
  ]
}