{
  "name": "mbpp_307_colon_tuplex",
  "language": "go_test.go",
  "prompt": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_307_colon_tuplex.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i < n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpqk_popkt_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpqk_popkt_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m and n must be positive integers\")\n    }\n    if m > n {\n        panic(\"m must be less than or equal to n\")\n    }\n    if n > len(tuplex) {\n        panic(\"n must be less than or equal to the length of tuplex\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n must be less than or equal to the length of tuplex [recovered]\n\tpanic: n must be less than or equal to the length of tuplex\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmph_ef6cud_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmph_ef6cud_test.go:29 +0xf9\ntesting.tRunner(0xc000186300, 0x54df38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m and n must be positive\")\n    }\n    if m > n {\n        panic(\"m must be less than or equal to n\")\n    }\n    if m == n {\n        return []interface{}{tuplex[m]}\n    }\n    return append([]interface{}{tuplex[m]}, colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [50] with length 4 [recovered]\n\tpanic: runtime error: index out of range [50] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc00010de90, 0x4, 0x4, 0x32, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:17 +0x293\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x31, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x30, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2f, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2e, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2d, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2c, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2b, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x2a, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x29, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x28, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc0000e5e90, 0x4, 0x4, 0x27, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpog9qm0my_test.go:",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 || n < 0 {\n        panic(\"m or n < 0\")\n    }\n    if m == n {\n        return []interface{}{tuplex[m]}\n    }\n    return append([]interface{}{tuplex[m]}, colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [50] with length 4 [recovered]\n\tpanic: runtime error: index out of range [50] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc00010de90, 0x4, 0x4, 0x32, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:17 +0x293\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x31, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x30, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2f, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2e, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2d, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2c, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2b, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2a, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x29, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x28, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x27, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmp_pzk_iu9_test.go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m >= len(tuplex) || n >= len(tuplex) {\n        return nil\n    }\n    if m > n {\n        m, n = n, m\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpoo8ha4q8_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpoo8ha4q8_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpoo8ha4q8_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if len(tuplex) == 0 {\n        return tuplex\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpct5iw4ru_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpct5iw4ru_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpct5iw4ru_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmps2iiw7v6_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmps2iiw7v6_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmps2iiw7v6_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m and n must be positive integers\")\n    }\n    if m >= len(tuplex) || n >= len(tuplex) {\n        panic(\"m and n must be smaller than length of tuplex\")\n    }\n    if m > n {\n        panic(\"m must be smaller than n\")\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: m and n must be smaller than length of tuplex [recovered]\n\tpanic: m and n must be smaller than length of tuplex\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmprgetq6u__test.go:14\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmprgetq6u__test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpiuxnnshu_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpiuxnnshu_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) - 1 {\n        panic(\"n > len(tuplex) - 1\")\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) - 1 [recovered]\n\tpanic: n > len(tuplex) - 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a2300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp15n0fona_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc0001a2300)\n\t/tmp/tmp15n0fona_test.go:29 +0xf9\ntesting.tRunner(0xc0001a2300, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    for i := m; i < n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmplqm31g64_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmplqm31g64_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmplqm31g64_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"Index out of range.\")\n    }\n    if m > n {\n        panic(\"m > n.\")\n    }\n    if n > len(tuplex) {\n        panic(\"Index out of range.\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: Index out of range. [recovered]\n\tpanic: Index out of range.\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpsfa_ee1d_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpsfa_ee1d_test.go:29 +0xf9\ntesting.tRunner(0xc000186300, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        panic(\"Index out of range.\")\n    }\n    if m > n {\n        panic(\"m should be less than or equal to n.\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: Index out of range. [recovered]\n\tpanic: Index out of range.\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp_db925bw_test.go:11\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp_db925bw_test.go:26 +0xf9\ntesting.tRunner(0xc000001380, 0x54df18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return append(tuplex[m:n], colon_tuplex(tuplex, m, n-1)...)\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc0000c8640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmprcxqzpdz_test.go:13 +0x20f\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmprcxqzpdz_test.go:24 +0x119\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i <= n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp6jxlkskz_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp6jxlkskz_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpteshsa89_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpteshsa89_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return []interface{}{tuplex[m]}\n    }\n    return append([]interface{}{tuplex[m]}, colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [50] with length 4 [recovered]\n\tpanic: runtime error: index out of range [50] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc00010de90, 0x4, 0x4, 0x32, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:17 +0x2c6\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x31, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x30, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2f, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2e, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2d, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2c, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2b, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2a, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x29, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x28, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go:19 +0x125\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x27, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmptwwvu4_y_test.go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i < n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpqk_popkt_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpqk_popkt_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var tuplex_colon []interface{}\n    for i := m; i <= n; i++ {\n        tuplex_colon = append(tuplex_colon, tuplex[i])\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp6jxlkskz_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp6jxlkskz_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    var result []interface{}\n    for i := m; i <= n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpyk3a4yc9_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpyk3a4yc9_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpyk3a4yc9_test.go:38: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m >= len(tuplex) || n >= len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp31h_0x9s_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp31h_0x9s_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp31h_0x9s_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"Index cannot be negative\")\n    }\n    if m > n {\n        panic(\"m cannot be greater than n\")\n    }\n    if n > len(tuplex) {\n        panic(\"n cannot be greater than length of tuple\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n cannot be greater than length of tuple [recovered]\n\tpanic: n cannot be greater than length of tuple\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpw6wgycfv_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000182600)\n\t/tmp/tmpw6wgycfv_test.go:29 +0xf9\ntesting.tRunner(0xc000182600, 0x54df28)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) || m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpwg1dnawt_test.go:31: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpwg1dnawt_test.go:31: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpwg1dnawt_test.go:31: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == 0 {\n        return tuplex[n:]\n    } else if n == 0 {\n        return tuplex[:m]\n    } else {\n        return tuplex[m:n]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp4juynlay_test.go:15\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp4juynlay_test.go:26 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return append(tuplex[m:n], colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc000134640, 0x4, 0x4, 0x2, 0x32, 0x58a5df, 0x3b, 0x438)\n\t/tmp/tmpl0e5_dxm_test.go:16 +0x24a\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpl0e5_dxm_test.go:26 +0x119\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    tuplex_colon := make([]interface{}, n-m+1)\n    for i := m; i <= n; i++ {\n        tuplex_colon[i-m] = tuplex[i]\n    }\n    return tuplex_colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 4 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmplnaenofr_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmplnaenofr_test.go:24 +0x9ff\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m and n must be non-negative\")\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        panic(\"m and n must be less than length of tuplex\")\n    }\n    if m > n {\n        panic(\"m must be less than or equal to n\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: m and n must be less than length of tuplex [recovered]\n\tpanic: m and n must be less than length of tuplex\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp0f2ywrwb_test.go:14\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmp0f2ywrwb_test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i < n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpw9oqfimd_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001200)\n\t/tmp/tmpw9oqfimd_test.go:24 +0xbbf\ntesting.tRunner(0xc000001200, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i < n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpw9oqfimd_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001200)\n\t/tmp/tmpw9oqfimd_test.go:24 +0xbbf\ntesting.tRunner(0xc000001200, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpgc0ykr65_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpgc0ykr65_test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n >= len(tuplex) {\n        panic(\"n >= len(tuplex)\")\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n >= len(tuplex) [recovered]\n\tpanic: n >= len(tuplex)\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpihl4vat5_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpihl4vat5_test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i < n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpqfwsg7t1_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpqfwsg7t1_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i < n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpw9oqfimd_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001200)\n\t/tmp/tmpw9oqfimd_test.go:24 +0xbbf\ntesting.tRunner(0xc000001200, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        panic(\"m > n\")\n    }\n    if m < 0 {\n        panic(\"m < 0\")\n    }\n    if n > len(tuplex) {\n        panic(\"n > len(tuplex)\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: n > len(tuplex) [recovered]\n\tpanic: n > len(tuplex)\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56caf8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpgc0ykr65_test.go:17\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpgc0ykr65_test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df10)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var result []interface{}\n    for i := m; i < n; i++ {\n        result = append(result, tuplex[i])\n    }\n    return result\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpqfwsg7t1_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpqfwsg7t1_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpif7oia_j_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var ret []interface{}\n    for i := m; i < n; i++ {\n        ret = append(ret, tuplex[i])\n    }\n    return ret\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00015a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmp2tt1eg12_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmp2tt1eg12_test.go:24 +0xbbf\ntesting.tRunner(0xc000102600, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m or n is less than 0\")\n    }\n    if m > n {\n        panic(\"m is greater than n\")\n    }\n    if m == n {\n        return []interface{}{tuplex[m]}\n    }\n    return append([]interface{}{tuplex[m]}, colon_tuplex(tuplex, m+1, n)...)\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [50] with length 4 [recovered]\n\tpanic: runtime error: index out of range [50] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(0xc00010de90, 0x4, 0x4, 0x32, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:17 +0x293\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x31, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x30, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2f, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2e, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2d, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2c, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2b, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x2a, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x29, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x28, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go:19 +0x115\ncommand-line-arguments_test.colon_tuplex(0xc000161e90, 0x4, 0x4, 0x27, 0x32, 0x0, 0x0, 0x0)\n\t/tmp/tmpcc5lvvf8_test.go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        panic(\"m or n is less than 0\")\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        panic(\"m or n is greater than the length of the tuple\")\n    }\n    if m > n {\n        panic(\"m is greater than n\")\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: m or n is greater than the length of the tuple [recovered]\n\tpanic: m or n is greater than the length of the tuple\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x51b900, 0x56cb18)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpkvy7roin_test.go:14\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpkvy7roin_test.go:29 +0xf9\ntesting.tRunner(0xc000001380, 0x54df30)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpiuxnnshu_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpiuxnnshu_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i <= n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpiuxnnshu_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpiuxnnshu_test.go:24 +0xbbf\ntesting.tRunner(0xc000001380, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == 0 {\n        m = 0\n    }\n    if n == 0 {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpgvjez49d_test.go:16\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpgvjez49d_test.go:26 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m == n {\n        return tuplex[m:n]\n    } else {\n        return tuplex[m:n+1]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpie30_irb_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpie30_irb_test.go:24 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:51] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:51] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001b8000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpmng5mrym_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000186300)\n\t/tmp/tmpmng5mrym_test.go:29 +0xec\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return []interface{}{}\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpb_b637_z_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpb_b637_z_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 {\n        m = 0\n    }\n    if n > len(tuplex) {\n        n = len(tuplex)\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpb004_u5m_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    if m == n {\n        return tuplex[m:n+1]\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpvy92xex1_test.go:19\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001380)\n\t/tmp/tmpvy92xex1_test.go:29 +0xec\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 {\n        return nil\n    }\n    if m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp31xquqcn_test.go:37: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m < 0 || n < 0 || m > len(tuplex) || n > len(tuplex) {\n        return nil\n    }\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmp3sxa67rh_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return tuplex[m:n]\n    } else {\n        return tuplex[n:m]\n    }\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [50:2] [recovered]\n\tpanic: runtime error: slice bounds out of range [50:2]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmplfqcgavb_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmplfqcgavb_test.go:24 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    var colon []interface{}\n    for i := m; i < n; i++ {\n        colon = append(colon, tuplex[i])\n    }\n    return colon\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124075,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 5 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001200)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpw9oqfimd_test.go:12\ncommand-line-arguments_test.TestColon_Tuplex(0xc000001200)\n\t/tmp/tmpw9oqfimd_test.go:24 +0xbbf\ntesting.tRunner(0xc000001200, 0x54f1e8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m <= 0 {\n        m = 0\n    }\n    if n >= len(tuplex) {\n        n = len(tuplex) - 1\n    }\n    return tuplex[m:n+1]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\n    --- FAIL: TestColon_Tuplex/test_num__0 (0.00s)\n        tmpsv84eqg0_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=50)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__1 (0.00s)\n        tmpsv84eqg0_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=100)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\n    --- FAIL: TestColon_Tuplex/test_num__2 (0.00s)\n        tmpsv84eqg0_test.go:34: expected '[HELLO %!s(int=5) [%!s(int=500)] %!s(bool=true)]', got '[[] %!s(bool=true)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    if m > n {\n        return nil\n    }\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpt6l76_20_test.go:13\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpt6l76_20_test.go:23 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510639,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpu3q5ostm_test.go:10\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpu3q5ostm_test.go:20 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package colon_tuplex_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to get a colon of a tuple.\nfunc colon_tuplex(tuplex []interface{}, m int, n int) []interface{} {\n    // Write your code here\n    return tuplex[m:n]\n}\n\nfunc TestColon_Tuplex(t *testing.T) {\n  candidate := colon_tuplex\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 50), expected: []interface{}{\"HELLO\", 5, []int{50}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 100), expected: []interface{}{\"HELLO\", 5, []int{100}, true} },\n     { actual: candidate([]interface{}{\"HELLO\", 5, []interface{}{}, true}, 2, 500), expected: []interface{}{\"HELLO\", 5, []int{500}, true} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124076,
      "stdout": "--- FAIL: TestColon_Tuplex (0.00s)\npanic: runtime error: slice bounds out of range [:50] with capacity 4 [recovered]\n\tpanic: runtime error: slice bounds out of range [:50] with capacity 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.colon_tuplex(...)\n\t/tmp/tmpymarvbp9_test.go:11\ncommand-line-arguments_test.TestColon_Tuplex(0xc000102600)\n\t/tmp/tmpymarvbp9_test.go:21 +0xec\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}