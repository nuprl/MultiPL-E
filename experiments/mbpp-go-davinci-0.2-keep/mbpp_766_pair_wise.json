{
  "name": "mbpp_766_pair_wise",
  "language": "go_test.go",
  "prompt": "package pair_wise_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to return a list of all pairs of consecutive items in a given list.\nfunc pair_wise(l1 []int) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPair_Wise(t *testing.T) {\n  candidate := pair_wise\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 1, 2, 3, 3, 4, 4, 5}), expected: [][]int{[]interface{}{1, 1}, []interface{}{1, 2}, []interface{}{2, 3}, []interface{}{3, 3}, []interface{}{3, 4}, []interface{}{4, 4}, []interface{}{4, 5}} },\n     { actual: candidate([]int{1, 5, 7, 9, 10}), expected: [][]int{[]interface{}{1, 5}, []interface{}{5, 7}, []interface{}{7, 9}, []interface{}{9, 10}} },\n     { actual: candidate([]int{5, 1, 9, 7, 10}), expected: [][]int{[]interface{}{5, 1}, []interface{}{1, 9}, []interface{}{9, 7}, []interface{}{7, 10}} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: [][]int{[]interface{}{1, 2}, []interface{}{2, 3}, []interface{}{3, 4}, []interface{}{4, 5}, []interface{}{5, 6}, []interface{}{6, 7}, []interface{}{7, 8}, []interface{}{8, 9}, []interface{}{9, 10}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1)-1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i+1]})\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i + 1]})\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i + 1]})\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i + 1]})\n    }\n    return result\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1)-1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1)-1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i+1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i+1]})\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        result = append(result, []interface{}{l1[i], l1[i+1]})\n    }\n    return result\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n",
    "    var l2 [][]interface{}\n    for i := 0; i < len(l1) - 1; i++ {\n        l2 = append(l2, []interface{}{l1[i], l1[i + 1]})\n    }\n    return l2\n}\n"
  ]
}