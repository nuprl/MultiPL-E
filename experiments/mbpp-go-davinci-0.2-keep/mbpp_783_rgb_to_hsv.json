{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "go_test.go",
  "prompt": "package rgb_to_hsv_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\nfunc rgb_to_hsv(r int, g int, b int) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRgb_To_Hsv(t *testing.T) {\n  candidate := rgb_to_hsv\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(255, 255, 255), expected: []interface{}{0, 0.0, 100.0} },\n     { actual: candidate(0, 215, 0), expected: []interface{}{120.0, 100.0, 84.31372549019608} },\n     { actual: candidate(10, 215, 110), expected: []interface{}{149.26829268292684, 95.34883720930233, 84.31372549019608} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var h, s, v int\n    var min, max, delta int\n\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n\n    v = max\n\n    delta = max - min\n\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return fmt.Sprintf(\"%d, %d, %d\", h, s, v)\n    }\n\n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n\n    if h < 0 {\n        h += 360\n    }\n\n    return fmt.Sprintf(\"%d, %d, %d\", h, s, v)\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    // Your code goes here\n    return nil\n}\n",
    "    var h, s, v int\n    var min, max, delta int\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return map[string]interface{}{\n            \"h\": h,\n            \"s\": s,\n            \"v\": v,\n        }\n    }\n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n    if h < 0 {\n        h += 360\n    }\n    return map[string]interface{}{\n        \"h\": h,\n        \"s\": s,\n        \"v\": v,\n    }\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    // TODO: implement this function\n    return nil\n}\n",
    "    // your code here\n    return nil\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    var h, s, v float64\n    cmax := float64(max(r, g, b))\n    cmin := float64(min(r, g, b))\n    delta := cmax - cmin\n\n    if delta == 0 {\n        h = 0\n    } else if cmax == float64(r) {\n        h = 60 * ((float64(g) - float64(b)) / delta)\n    } else if cmax == float64(g) {\n        h = 60 * (2 + (float64(b) - float64(r)) / delta)\n    } else if cmax == float64(b) {\n        h = 60 * (4 + (float64(r) - float64(g)) / delta)\n    }\n\n    if cmax == 0 {\n        s = 0\n    } else {\n        s = delta / cmax\n    }\n\n    v = cmax\n\n    return fmt.Sprintf(\"%f, %f, %f\", h, s, v)\n}\n",
    "    return nil\n}\n",
    "    var h, s, v float64\n    var max, min int\n    var diff int\n\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n\n    diff = max - min\n\n    if max == min {\n        h = 0\n    } else if max == r {\n        h = 60 * float64(g - b) / float64(diff)\n    } else if max == g {\n        h = 60 * float64(b - r) / float64(diff) + 120\n    } else if max == b {\n        h = 60 * float64(r - g) / float64(diff) + 240\n    }\n\n    if h < 0 {\n        h += 360\n    }\n\n    if max == 0 {\n        s = 0\n    } else {\n        s = float64(diff) / float64(max)\n    }\n\n    v = float64(max) / 255\n\n    return fmt.Sprintf(\"%f %f %f\", h, s, v)\n}\n",
    "    return nil\n}\n",
    "    return nil\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    var h float64\n    var s float64\n    var v float64\n\n    var min float64\n    var max float64\n    var delta float64\n\n    rf := float64(r) / 255.0\n    gf := float64(g) / 255.0\n    bf := float64(b) / 255.0\n\n    min = rf\n    if gf < min {\n        min = gf\n    }\n    if bf < min {\n        min = bf\n    }\n\n    max = rf\n    if gf > max {\n        max = gf\n    }\n    if bf > max {\n        max = bf\n    }\n\n    v = max\n\n    delta = max - min\n\n    if max != 0 {\n        s = delta / max\n    } else {\n        s = 0\n        h = -1\n        return []float64{h, s, v}\n    }\n\n    if rf == max {\n        h = (gf - bf) / delta\n    } else if gf == max {\n        h = 2 + (bf - rf) / delta\n    } else {\n        h = 4 + (rf - gf) / delta\n    }\n\n    h *= 60\n\n    if h < 0 {\n        h += 360\n    }\n\n    return []float64{h, s, v}\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    var h, s, v int\n    var min, max, delta int\n    min = r\n    if g < min {\n        min = g\n    }\n    if b < min {\n        min = b\n    }\n    max = r\n    if g > max {\n        max = g\n    }\n    if b > max {\n        max = b\n    }\n    v = max\n    delta = max - min\n    if max != 0 {\n        s = delta * 100 / max\n    } else {\n        s = 0\n        h = -1\n        return map[string]int{\"h\": h, \"s\": s, \"v\": v}\n    }\n    if r == max {\n        h = (g - b) * 60 / delta\n    } else if g == max {\n        h = 120 + (b - r) * 60 / delta\n    } else {\n        h = 240 + (r - g) * 60 / delta\n    }\n    if h < 0 {\n        h += 360\n    }\n    return map[string]int{\"h\": h, \"s\": s, \"v\": v}\n}\n",
    "    // TODO - Add your code here\n    return nil\n}\n"
  ]
}