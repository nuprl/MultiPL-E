{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "go_test.go",
  "prompt": "package text_lowercase_underscore_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nfunc text_lowercase_underscore(text string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestText_Lowercase_Underscore(t *testing.T) {\n  candidate := text_lowercase_underscore\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"aab_cbbbc\"), expected: true },\n     { actual: candidate(\"aab_Abbbc\"), expected: false },\n     { actual: candidate(\"Aaab_abbbc\"), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, char := range text {\n        if char >= 'a' && char <= 'z' {\n            if i > 0 && text[i-1] != '_' {\n                return false\n            }\n        } else if char != '_' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(text) == 0 {\n        return false\n    }\n    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text)-1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else if text[i] < 'a' || text[i] > 'z' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i, c := range text {\n        if c >= 'a' && c <= 'z' {\n            if i > 0 && text[i-1] != '_' {\n                return false\n            }\n        } else if c != '_' {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    var (\n        last_char rune\n        is_lowercase bool\n        is_underscore bool\n    )\n    for _, char := range text {\n        if char == '_' {\n            if !is_lowercase {\n                return false\n            }\n            is_underscore = true\n        } else {\n            if is_underscore {\n                return false\n            }\n            is_lowercase = true\n        }\n        last_char = char\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i - 1] < 'a' || text[i - 1] > 'z' {\n                return false\n            }\n            if text[i + 1] < 'a' || text[i + 1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n",
    "    return true\n}\n",
    "    for i := 0; i < len(text); i++ {\n        if text[i] == '_' {\n            if i == 0 || i == len(text) - 1 {\n                return false\n            }\n            if text[i-1] < 'a' || text[i-1] > 'z' {\n                return false\n            }\n            if text[i+1] < 'a' || text[i+1] > 'z' {\n                return false\n            }\n        } else {\n            if text[i] < 'a' || text[i] > 'z' {\n                return false\n            }\n        }\n    }\n    return true\n}\n"
  ]
}