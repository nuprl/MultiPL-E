{
  "name": "mbpp_447_cube_nums",
  "language": "go_test.go",
  "prompt": "package cube_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find cubes of individual elements in a list.\nfunc cube_nums(nums []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCube_Nums(t *testing.T) {\n  candidate := cube_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 8, 27, 64, 125, 216, 343, 512, 729, 1000} },\n     { actual: candidate([]int{10, 20, 30}), expected: []int{1000, 8000, 27000} },\n     { actual: candidate([]int{12, 15}), expected: []int{1728, 3375} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var result []int\n    for _, num := range nums {\n        result = append(result, num * num * num)\n    }\n    return result\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := []int{}\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, n := range nums {\n        cubes = append(cubes, n*n*n)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, n := range nums {\n        cubes[i] = n * n * n\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, n := range nums {\n        cubes = append(cubes, n*n*n)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := []int{}\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    for i, num := range nums {\n        nums[i] = num * num * num\n    }\n    return nums\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, n := range nums {\n        cubes = append(cubes, n*n*n)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    cubes := []int{}\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * num * num\n    }\n    return result\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * num * num\n    }\n    return result\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, n := range nums {\n        cubes = append(cubes, n*n*n)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, n := range nums {\n        cubes = append(cubes, n*n*n)\n    }\n    return cubes\n}\n",
    "    result := make([]int, len(nums))\n    for i, num := range nums {\n        result[i] = num * num * num\n    }\n    return result\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := make([]int, len(nums))\n    for i, num := range nums {\n        cubes[i] = num * num * num\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    cubes := []int{}\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num*num*num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n",
    "    var cubes []int\n    for _, num := range nums {\n        cubes = append(cubes, num * num * num)\n    }\n    return cubes\n}\n"
  ]
}