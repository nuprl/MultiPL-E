{
  "name": "mbpp_799_left_rotate",
  "language": "go_test.go",
  "prompt": "package left_rotate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nfunc left_rotate(n int, d int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestLeft_Rotate(t *testing.T) {\n  candidate := left_rotate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(16, 2), expected: 64 },\n     { actual: candidate(10, 2), expected: 40 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(99, 3), expected: 792 },\n     { actual: candidate(1, 3), expected: 8 },\n     { actual: candidate(5, 3), expected: 40 },\n     { actual: candidate(29, 3), expected: 232 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return ((n << d) | (n >> (32 - d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    // 1. Get all bits of n except the last d bits\n    // 2. Shift the bits to the right by d\n    // 3. Get the last d bits of n\n    // 4. Shift the bits to the left by 32 - d\n    // 5. OR the bits from step 1 and step 4\n    return ((n & (^0 << d)) >> d) | ((n & ((1 << d) - 1)) << (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    // 1. left shift n by d bits\n    // 2. right shift n by 32 - d bits\n    // 3. OR the result of 1 and 2\n    return ((n << d) | (n >> (32 - d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return ((n << d) | (n >> (32 - d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    // We use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise operator to get the leftmost d bits of n.\n    // Then we shift n to the left by d bits.\n    // Then we shift the leftmost d bits of n to the right by 32-d bits.\n    // Then we use the bitwise",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    // We need to mask the bits that we want to keep.\n    mask := (1 << d) - 1\n    // We need to shift the bits by d.\n    shift := n >> d\n    // We need to mask the bits that we want to keep.\n    return (n & mask) << (32 - d) | shift\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << uint(d)) | (n >> (32 - uint(d)))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return n << d | n >> (32 - d)\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n",
    "    return (n << d) | (n >> (32 - d))\n}\n"
  ]
}