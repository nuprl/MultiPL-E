{
  "name": "mbpp_299_max_aggregate",
  "language": "go_test.go",
  "prompt": "package max_aggregate_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the maximum aggregate from the list of tuples.\nfunc max_aggregate(stdata [][]interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Aggregate(t *testing.T) {\n  candidate := max_aggregate\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 90}, []interface{}{\"Sabah Colley\", 88}, []interface{}{\"Peter Nichols\", 7}, []interface{}{\"Juan Whelan\", 122}, []interface{}{\"Sabah Colley\", 84}}), expected: []interface{}{\"Juan Whelan\", 212} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 50}, []interface{}{\"Sabah Colley\", 48}, []interface{}{\"Peter Nichols\", 37}, []interface{}{\"Juan Whelan\", 22}, []interface{}{\"Sabah Colley\", 14}}), expected: []interface{}{\"Juan Whelan\", 72} },\n     { actual: candidate([][]int{[]interface{}{\"Juan Whelan\", 10}, []interface{}{\"Sabah Colley\", 20}, []interface{}{\"Peter Nichols\", 30}, []interface{}{\"Juan Whelan\", 40}, []interface{}{\"Sabah Colley\", 50}}), expected: []interface{}{\"Sabah Colley\", 70} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max_aggregate []interface{}\n    max_aggregate = make([]interface{}, len(stdata[0]))\n\n    for i := 0; i < len(stdata); i++ {\n        for j := 0; j < len(stdata[i]); j++ {\n            switch stdata[i][j].(type) {\n            case int:\n                if stdata[i][j].(int) > max_aggregate[j].(int) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            case float64:\n                if stdata[i][j].(float64) > max_aggregate[j].(float64) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            case string:\n                if stdata[i][j].(string) > max_aggregate[j].(string) {\n                    max_aggregate[j] = stdata[i][j]\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    // Write your code here\n    return nil\n}\n",
    "    var max_agg []interface{}\n    for _, v := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = v\n        } else {\n            for i, v2 := range v {\n                switch v2.(type) {\n                case int:\n                    if v2.(int) > max_agg[i].(int) {\n                        max_agg[i] = v2\n                    }\n                case string:\n                    if v2.(string) > max_agg[i].(string) {\n                        max_agg[i] = v2\n                    }\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    var max_aggregate_value []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate_value) == 0 {\n            max_aggregate_value = row\n        } else {\n            for i, value := range row {\n                switch value.(type) {\n                case int:\n                    if value.(int) > max_aggregate_value[i].(int) {\n                        max_aggregate_value[i] = value\n                    }\n                case string:\n                    if value.(string) > max_aggregate_value[i].(string) {\n                        max_aggregate_value[i] = value\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate_value\n}\n",
    "    if len(stdata) == 0 {\n        return nil\n    }\n    max := stdata[0]\n    for _, v := range stdata {\n        if v[1].(int) > max[1].(int) {\n            max = v\n        }\n    }\n    return max\n}\n",
    "    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_aggregate[i].(int) {\n                    max_aggregate[i] = v\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = row\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    // TODO: Write your code here\n    return []interface{}{}\n}\n",
    "    var max_agg []interface{}\n    for i := 0; i < len(stdata); i++ {\n        if i == 0 {\n            max_agg = stdata[i]\n        } else {\n            if stdata[i][1].(int) > max_agg[1].(int) {\n                max_agg = stdata[i]\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = make([]interface{}, len(row))\n            copy(max_aggregate, row)\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_agg []interface{}\n    for _, row := range stdata {\n        if len(max_agg) == 0 {\n            max_agg = make([]interface{}, len(row))\n            copy(max_agg, row)\n        } else {\n            for i, v := range row {\n                if v.(int) > max_agg[i].(int) {\n                    max_agg[i] = v\n                }\n            }\n        }\n    }\n    return max_agg\n}\n",
    "    // TODO: implement\n    return nil\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    var max_aggregate []interface{}\n    for _, row := range stdata {\n        if len(max_aggregate) == 0 {\n            max_aggregate = row\n        } else {\n            for i, v := range row {\n                switch v.(type) {\n                case int:\n                    if v.(int) > max_aggregate[i].(int) {\n                        max_aggregate[i] = v\n                    }\n                case float64:\n                    if v.(float64) > max_aggregate[i].(float64) {\n                        max_aggregate[i] = v\n                    }\n                case string:\n                    if v.(string) > max_aggregate[i].(string) {\n                        max_aggregate[i] = v\n                    }\n                }\n            }\n        }\n    }\n    return max_aggregate\n}\n",
    "    if len(stdata) == 0 {\n        return []interface{}{}\n    }\n    result := make([]interface{}, len(stdata[0]))\n    for _, row := range stdata {\n        for i, v := range row {\n            switch v.(type) {\n            case int:\n                if v.(int) > result[i].(int) {\n                    result[i] = v\n                }\n            case float64:\n                if v.(float64) > result[i].(float64) {\n                    result[i] = v\n                }\n            case string:\n                if v.(string) > result[i].(string) {\n                    result[i] = v\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var max_agg []interface{}\n    for i := 0; i < len(stdata[0]); i++ {\n        var max_val interface{}\n        for j := 0; j < len(stdata); j++ {\n            if j == 0 {\n                max_val = stdata[j][i]\n            } else {\n                if stdata[j][i].(int) > max_val.(int) {\n                    max_val = stdata[j][i]\n                }\n            }\n        }\n        max_agg = append(max_agg, max_val)\n    }\n    return max_agg\n}\n"
  ]
}