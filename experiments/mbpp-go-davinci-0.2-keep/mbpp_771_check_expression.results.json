{
  "name": "mbpp_771_check_expression",
  "language": "go_test.go",
  "prompt": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') ||\n                (c == '}' && top != '{') ||\n                (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (last == \"(\" && c == ')') || (last == \"[\" && c == ']') || (last == \"{\" && c == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (r == ')' && top != '(') || (r == ']' && top != '[') || (r == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == ']' && last != '[') || (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\")) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        switch r {\n        case '(', '{', '[':\n            stack = append(stack, r)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if (c == ')' && stack[len(stack)-1] != \"(\") ||\n                (c == '}' && stack[len(stack)-1] != \"{\") ||\n                (c == ']' && stack[len(stack)-1] != \"[\") {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if top == '(' && c != ')' {\n                return false\n            } else if top == '{' && c != '}' {\n                return false\n            } else if top == '[' && c != ']' {\n                return false\n            }\n        }\n    }\n\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.012s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if len(stack) == 0 {\n            return false\n        } else if c == ')' && stack[len(stack) - 1] == '(' {\n            stack = stack[:len(stack) - 1]\n        } else if c == '}' && stack[len(stack) - 1] == '{' {\n            stack = stack[:len(stack) - 1]\n        } else if c == ']' && stack[len(stack) - 1] == '[' {\n            stack = stack[:len(stack) - 1]\n        } else {\n            return false\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (char == ')' && last != '(') || (char == '}' && last != '{') || (char == ']' && last != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] == \"(\" {\n                stack = stack[:len(stack) - 1]\n            } else if c == '}' && stack[len(stack) - 1] == \"{\" {\n                stack = stack[:len(stack) - 1]\n            } else if c == ']' && stack[len(stack) - 1] == \"[\" {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (last == \"(\" && c == ')') || (last == \"{\" && c == '}') || (last == \"[\" && c == ']') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if (c == ')' && stack[len(stack)-1] == \"(\") ||\n                (c == ']' && stack[len(stack)-1] == \"[\") ||\n                (c == '}' && stack[len(stack)-1] == \"{\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if v == ')' && top != \"(\" {\n                return false\n            } else if v == ']' && top != \"[\" {\n                return false\n            } else if v == '}' && top != \"{\" {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        switch r {\n        case '(', '{', '[':\n            stack = append(stack, r)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, v)\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if v == ')' && top != '(' {\n                return false\n            }\n            if v == '}' && top != '{' {\n                return false\n            }\n            if v == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122870,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (char == ')' && last == '(') || (char == '}' && last == '{') || (char == ']' && last == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := []rune{}\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == \"(\") || (c == ']' && last == \"[\") || (c == '}' && last == \"{\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack) - 1], stack[:len(stack) - 1]\n            if r == ')' && top != '(' {\n                return false\n            } else if r == '}' && top != '{' {\n                return false\n            } else if r == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122878,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if char == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if char == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else if char == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if top == \"(\" && c != ')' {\n                return false\n            } else if top == \"[\" && c != ']' {\n                return false\n            } else if top == \"{\" && c != '}' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (c == ')' && top != \"(\") || (c == ']' && top != \"[\") || (c == '}' && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if top == \"(\" && c != ')' {\n                return false\n            }\n            if top == \"{\" && c != '}' {\n                return false\n            }\n            if top == \"[\" && c != ']' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (last == \"(\" && c != ')') || (last == \"{\" && c != '}') || (last == \"[\" && c != ']') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (v == ')' && last == \"(\") || (v == '}' && last == \"{\") || (v == ']' && last == \"[\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, ch := range exp {\n        if ch == '(' || ch == '[' || ch == '{' {\n            stack = append(stack, ch)\n        } else if ch == ')' || ch == ']' || ch == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (ch == ')' && top == '(') || (ch == ']' && top == '[') || (ch == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122870,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (top == '(' && c == ')') || (top == '[' && c == ']') || (top == '{' && c == '}') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != \"(\") || (c == ']' && top != \"[\") || (c == '}' && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (char == ')' && last != '(') || (char == ']' && last != '[') || (char == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((top == \"(\" && char == ')') || (top == \"{\" && char == '}') || (top == \"[\" && char == ']')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122881,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        } else if c == '}' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        } else if c == ']' {\n            if len(stack) == 0 || stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122870,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (r == ')' && last != '(') || (r == '}' && last != '{') || (r == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, v)\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (v == ')' && last != '(') || (v == '}' && last != '{') || (v == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if (char == ')' && top != \"(\") || (char == '}' && top != \"{\") || (char == ']' && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (top == \"(\" && char == ')') || (top == \"{\" && char == '}') || (top == \"[\" && char == ']') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.009s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        switch r {\n        case '(', '{', '[':\n            stack = append(stack, r)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '[', '{':\n            stack = append(stack, c)\n        case ')', ']', '}':\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{')) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' {\n                if stack[len(stack)-1] != \"(\" {\n                    return false\n                }\n            } else if c == '}' {\n                if stack[len(stack)-1] != \"{\" {\n                    return false\n                }\n            } else if c == ']' {\n                if stack[len(stack)-1] != \"[\" {\n                    return false\n                }\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != '(') ||\n                (c == '}' && top != '{') ||\n                (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == \"(\") || (c == '}' && last == \"{\") || (c == ']' && last == \"[\") {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if top == \"(\" && char != ')' {\n                return false\n            } else if top == \"{\" && char != '}' {\n                return false\n            } else if top == \"[\" && char != ']' {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, string(char))\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (char == ')' && top == \"(\") || (char == '}' && top == \"{\") || (char == ']' && top == \"[\") {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := []rune{}\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') ||\n                (c == ']' && last != '[') ||\n                (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '[' || char == '{' {\n            stack = append(stack, char)\n        } else if char == ')' || char == ']' || char == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if char == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if char == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if char == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            stack = stack[:len(stack) - 1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            } else if c == '}' && top != '{' {\n                return false\n            } else if c == ']' && top != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122869,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && top != \"(\") || (c == ']' && top != \"[\") || (c == '}' && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122880,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122870,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if (c == ')' && last != \"(\") || (c == '}' && last != \"{\") || (c == ']' && last != \"[\") {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, v)\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if v == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if v == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if v == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last != '(') || (c == '}' && last != '{') || (c == ']' && last != '[') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, char := range exp {\n        if char == '(' || char == '{' || char == '[' {\n            stack = append(stack, char)\n        } else if char == ')' || char == '}' || char == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (char == ')' && last == '(') || (char == '}' && last == '{') || (char == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (last == \"(\" && c == ')') || (last == \"[\" && c == ']') || (last == \"{\" && c == '}') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if r == ')' && top != '(' {\n                return false\n            }\n            if r == ']' && top != '[' {\n                return false\n            }\n            if r == '}' && top != '{' {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122883,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '[' || v == '{' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == ']' || v == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if v == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if v == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if v == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    var top int\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n            top++\n        } else if c == ')' || c == ']' || c == '}' {\n            if top == 0 {\n                return false\n            }\n            if c == ')' && stack[top-1] == '(' {\n                stack = stack[:top-1]\n                top--\n            } else if c == ']' && stack[top-1] == '[' {\n                stack = stack[:top-1]\n                top--\n            } else if c == '}' && stack[top-1] == '{' {\n                stack = stack[:top-1]\n                top--\n            } else {\n                return false\n            }\n        }\n    }\n    if top == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == '(' {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == '{' {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == '[' {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []string\n    for _, v := range exp {\n        if v == '(' || v == '{' || v == '[' {\n            stack = append(stack, string(v))\n        } else if v == ')' || v == '}' || v == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if (v == ')' && stack[len(stack)-1] != \"(\") || (v == '}' && stack[len(stack)-1] != \"{\") || (v == ']' && stack[len(stack)-1] != \"[\") {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) == 0 {\n        return true\n    }\n    return false\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122884,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122870,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack) - 1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack) - 1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122864,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        switch c {\n        case '(', '{', '[':\n            stack = append(stack, c)\n        case ')':\n            if len(stack) == 0 || stack[len(stack)-1] != '(' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case '}':\n            if len(stack) == 0 || stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        case ']':\n            if len(stack) == 0 || stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]string, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack) - 1] == \"(\" {\n                stack = stack[:len(stack) - 1]\n            } else if c == ']' && stack[len(stack) - 1] == \"[\" {\n                stack = stack[:len(stack) - 1]\n            } else if c == '}' && stack[len(stack) - 1] == \"{\" {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == ']' && last != '[') || (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []byte\n    for i := 0; i < len(exp); i++ {\n        if exp[i] == '(' || exp[i] == '{' || exp[i] == '[' {\n            stack = append(stack, exp[i])\n        } else if exp[i] == ')' || exp[i] == '}' || exp[i] == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if exp[i] == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if exp[i] == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if exp[i] == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top == '(') || (c == '}' && top == '{') || (c == ']' && top == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122867,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top == '(') || (c == ']' && top == '[') || (c == '}' && top == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.019s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517259,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517257,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (c == ')' && last == '(') || (c == ']' && last == '[') || (c == '}' && last == '{') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122872,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack) - 1], stack[:len(stack) - 1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n\nfunc TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122885,
      "stdout": "ok  \tcommand-line-arguments\t0.010s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}