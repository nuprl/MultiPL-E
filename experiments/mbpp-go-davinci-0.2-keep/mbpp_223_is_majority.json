{
  "name": "mbpp_223_is_majority",
  "language": "go_test.go",
  "prompt": "package is_majority_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nfunc is_majority(arr []int, n int, x int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIs_Majority(t *testing.T) {\n  candidate := is_majority\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 3, 3, 3, 10}, 7, 3), expected: true },\n     { actual: candidate([]int{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4), expected: false },\n     { actual: candidate([]int{1, 1, 1, 2, 2}, 5, 1), expected: true },\n     { actual: candidate([]int{1, 1, 2, 2}, 5, 1), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurance of x\n    first := find_first(arr, n, x)\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // if x is present in the array\n    // find the last occurance of x\n    last := find_last(arr, n, x)\n    // if x occurs more than n/2 times\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    if (first + n/2) <= (n - 1) && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := -1\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] == x {\n            last = i\n            break\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurences is greater than n/2\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if x == arr[n/2] {\n        return true\n    }\n    if x > arr[n/2] {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n    return is_majority(arr[:n/2], n/2, x)\n}\n",
    "    var count int\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, n, x)\n    // find the last occurence of x\n    last := find_last(arr, n, x)\n    // return true if the number of occurences of x is greater than n/2\n    return (last - first + 1) > n/2\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    if last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    var i int\n    var count int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if len(arr) == 0 {\n        return false\n    }\n    if n % 2 == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    // if first is -1, then x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, 0, n-1, x)\n    // if last is -1, then x is not present in the array\n    if last == -1 {\n        return false\n    }\n    // if last - first + 1 is greater than n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x)\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // Find the first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid:], n - mid, x)\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    i := 0\n    for i < n {\n        if arr[i] == x {\n            break\n        }\n        i++\n    }\n    if i == n {\n        return false\n    }\n    // check if there are more than n/2 occurences of x\n    if i + n/2 < n && arr[i + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid + 1:], n - mid - 1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    } else if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var mid int = n/2\n    var mid_elem int = arr[mid]\n\n    if mid_elem == x {\n        return (mid + 1) > n/2\n    } else if mid_elem > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    // find first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n    // find last occurence of x\n    last := find_last(arr, 0, n-1, x)\n    // if x is present more than n/2 times\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n - mid - 1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, 0, n-1, x)\n    if last == -1 {\n        return false\n    }\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first index of x\n    first_index := binary_search(arr, 0, n-1, x)\n    if first_index == -1 {\n        return false\n    }\n\n    // find the last index of x\n    last_index := binary_search(arr, 0, n-1, x)\n    if last_index == -1 {\n        return false\n    }\n\n    // check if the difference between the last and first index is greater than n/2\n    if last_index - first_index + 1 > n/2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // check if the number of occurrences of x is greater than n/2\n    if first != -1 && last != -1 && last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if last == -1 {\n        return false\n    }\n\n    // check if the number of occurrences is greater than n/2\n    return (last - first + 1) > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first_occurence := binary_search(arr, 0, n-1, x)\n    if first_occurence == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last_occurence := binary_search(arr, first_occurence+1, n-1, x)\n    if last_occurence == -1 {\n        last_occurence = first_occurence\n    }\n    // check if the number of occurences is greater than n/2\n    if last_occurence - first_occurence + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is present more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x occurs more than n/2 times\n    if last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find first occurence of x\n    first := find_first(arr, 0, len(arr)-1, x)\n    if first == -1 {\n        return false\n    }\n    // find last occurence of x\n    last := find_last(arr, 0, len(arr)-1, x)\n    if last == -1 {\n        return false\n    }\n    // if last occurence - first occurence + 1 is greater than n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurences is greater than n/2\n    if last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    mid := n/2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid:], n-mid, x)\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    // check if x is the majority element\n    if first != -1 && (first + n/2) <= (n - 1) && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            break\n        }\n    }\n    // if x is present and its last occurence is at index n/2, then x is a majority element\n    if i + n/2 < n && arr[i + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first_occurence := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first_occurence = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if first_occurence == -1 {\n        return false\n    }\n\n    // find the last occurence of x\n    last_occurence := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            last_occurence = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    if last_occurence == -1 {\n        return false\n    }\n\n    if last_occurence - first_occurence + 1 > n / 2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var mid int = n/2\n    if arr[mid] == x {\n        return (mid + n/2) < n\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if x is not present in the array, return false\n    if first == -1 {\n        return false\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n\n    // if the difference between last and first occurrence is greater than n/2, return true\n    if last - first + 1 > n/2 {\n        return true\n    }\n\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if arr[n/2] == x {\n        return true\n    }\n\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    var count int = 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i, v := range arr {\n        if v == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    return arr[first + n/2] == x\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    // if first occurrence is not present\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if last occurrence is not present\n    if last == -1 {\n        return false\n    }\n    // if last occurrence is greater than first occurrence\n    if last > first {\n        // if last occurrence is greater than n/2\n        if last - first + 1 > n/2 {\n            return true\n        }\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var i int\n    var count int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, 0, n-1, x)\n    // if last occurrence is greater than n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, val := range arr {\n        if val == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    first_occurence := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := (low + high) / 2\n        if arr[mid] == x {\n            first_occurence = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // if x is not present in the array, return false\n    if first_occurence == -1 {\n        return false\n    }\n\n    // if x is present in the array, check if it is the majority element\n    if first_occurence + n/2 < n && arr[first_occurence + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x && arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid + 1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // Find the first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // If element is not present at all, return false\n    if i == n {\n        return false\n    }\n\n    // Check if the element occurs more than n/2 times\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var mid int = n/2\n    var mid_val int = arr[mid]\n\n    if mid_val == x {\n        return true\n    } else if mid_val > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    var first_occurence int\n    var last_occurence int\n    var mid int\n    var low int = 0\n    var high int = n - 1\n    for low <= high {\n        mid = (low + high) / 2\n        if arr[mid] == x {\n            first_occurence = mid\n            break\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    if first_occurence == -1 {\n        return false\n    }\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid = (low + high) / 2\n        if arr[mid] == x {\n            last_occurence = mid\n            low = mid + 1\n        } else if arr[mid] > x {\n            high = mid - 1\n        } else {\n            low = mid + 1\n        }\n    }\n    if (last_occurence - first_occurence + 1) > (n / 2) {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    } else if arr[mid] < x {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid:], n - mid, x)\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first_occurence(arr, n, x)\n\n    // if the first occurence is -1, then x is not present in the array\n    if first == -1 {\n        return false\n    }\n\n    // if the first occurence is the last element in the array, then x is the majority element\n    if first == n-1 {\n        return true\n    }\n\n    // if the next element is the same as x, then x is the majority element\n    if arr[first+1] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if x == arr[n/2] {\n        return true\n    } else if x < arr[n/2] {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := binary_search(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := binary_search(arr, 0, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // if last - first + 1 > n/2, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n-mid-1, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n-mid-1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    // find the first occurance of x\n    first_occurance := -1\n    for i, v := range arr {\n        if v == x {\n            first_occurance = i\n            break\n        }\n    }\n\n    // if x is not found, return false\n    if first_occurance == -1 {\n        return false\n    }\n\n    // if x is found, check if it is the majority element\n    if first_occurance + n/2 < n && arr[first_occurance + n/2] == x {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n    // if x is not present in the array\n    if i == n {\n        return false\n    }\n    // if there is more than n/2 occurences of x\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n / 2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    if last == -1 {\n        return false\n    }\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[mid:], n - mid, x)\n    } else if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    } else {\n        return is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, n, x)\n    // if first occurence is -1, return false\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, n, x)\n    // if last occurence is -1, return false\n    if last == -1 {\n        return false\n    }\n    // if last - first + 1 > n/2, return true\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] < x {\n        return is_majority(arr[n/2:], n/2, x)\n    }\n    return is_majority(arr[:n/2], n/2, x)\n}\n",
    "    var i, j int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            break\n        }\n    }\n    j = i + 1\n    for ; j < n && arr[j] == x; j++ {\n    }\n    return j > n/2\n}\n",
    "    var i int\n    for i = 0; i < n; i++ {\n        if arr[i] == x {\n            break\n        }\n    }\n    if i == n {\n        return false\n    }\n    if (i + n/2) < n && arr[i + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurance of x\n    first_occurance := -1\n    for i, val := range arr {\n        if val == x {\n            first_occurance = i\n            break\n        }\n    }\n    if first_occurance == -1 {\n        return false\n    }\n    if first_occurance + n/2 < n && arr[first_occurance + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    if n == 1 {\n        return arr[0] == x\n    }\n\n    mid := n / 2\n\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid+1:], n - mid - 1, x)\n    }\n\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n\n    return is_majority(arr[mid+1:], n - mid - 1, x)\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := find_first(arr, n, x)\n    // if the first occurence is not found, return false\n    if first == -1 {\n        return false\n    }\n    // find the last occurence of x\n    last := find_last(arr, n, x)\n    // if the last occurence is not found, return false\n    if last == -1 {\n        return false\n    }\n    // if the difference between the last and first occurence is greater than n/2, return true\n    if last - first > n/2 {\n        return true\n    }\n    // otherwise, return false\n    return false\n}\n",
    "    // Find the first occurrence of x\n    i := 0\n    for i < n && arr[i] != x {\n        i++\n    }\n\n    // If element is not present at all, return false\n    if i == n {\n        return false\n    }\n\n    // Check if the element is present more than n/2 times\n    if (i + n/2) <= (n - 1) && arr[i + n/2] == x {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, num := range arr {\n        if num == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurence of x\n    first := -1\n    for i, v := range arr {\n        if v == x {\n            first = i\n            break\n        }\n    }\n    // if x is not found, return false\n    if first == -1 {\n        return false\n    }\n    // if x is found, check if x occurs more than n/2 times\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    // find the first occurence of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    if first + n/2 < n && arr[first + n/2] == x {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first_occurrence(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last_occurrence(arr, n, x)\n    if last == -1 {\n        return false\n    }\n    // check if the number of occurrences is greater than n/2\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, 0, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // if last occurrence is more than n/2 times away from first occurrence, then x is the majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    mid := n/2\n    if arr[mid] == x {\n        return true\n    }\n    if arr[mid] > x {\n        return is_majority(arr[:mid], mid, x)\n    }\n    return is_majority(arr[mid+1:], n-mid-1, x)\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if n == 2 {\n        return arr[0] == x || arr[1] == x\n    }\n    mid := n / 2\n    if arr[mid] == x {\n        return is_majority(arr[:mid], mid, x) || is_majority(arr[mid:], n - mid, x)\n    } else {\n        return is_majority(arr[:mid], mid, x)\n    }\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, 0, n-1, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, 0, n-1, x)\n    if last == -1 {\n        return false\n    }\n    // if last - first + 1 is greater than n/2, then x is the majority element\n    if (last - first + 1) > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    } else if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    } else {\n        return is_majority(arr[n/2+1:], n/2, x)\n    }\n}\n",
    "    // find the first occurrence of x\n    first := find_first(arr, n, x)\n    if first == -1 {\n        return false\n    }\n    // find the last occurrence of x\n    last := find_last(arr, n, x)\n    // if last occurrence of x is greater than n/2, then x is majority element\n    if last - first + 1 > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    if n == 0 {\n        return false\n    }\n    if n == 1 {\n        return arr[0] == x\n    }\n    if arr[n/2] == x {\n        return true\n    }\n    if arr[n/2] > x {\n        return is_majority(arr[:n/2], n/2, x)\n    }\n    return is_majority(arr[n/2+1:], n/2, x)\n}\n",
    "    if n == 0 {\n        return false\n    }\n\n    var i int = 0\n    var j int = n - 1\n    var mid int = (i + j) / 2\n\n    for i <= j {\n        if arr[mid] == x {\n            break\n        } else if arr[mid] > x {\n            j = mid - 1\n        } else {\n            i = mid + 1\n        }\n        mid = (i + j) / 2\n    }\n\n    if i > j {\n        return false\n    }\n\n    var count int = 1\n    var left int = mid - 1\n    var right int = mid + 1\n\n    for left >= 0 && arr[left] == x {\n        count++\n        left--\n    }\n\n    for right < n && arr[right] == x {\n        count++\n        right++\n    }\n\n    if count > n / 2 {\n        return true\n    }\n\n    return false\n}\n",
    "    // find the first occurance of x\n    first := -1\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            first = i\n            break\n        }\n    }\n    if first == -1 {\n        return false\n    }\n    // find the last occurance of x\n    last := -1\n    for i := n - 1; i >= 0; i-- {\n        if arr[i] == x {\n            last = i\n            break\n        }\n    }\n    if last == -1 {\n        return false\n    }\n    if last - first + 1 > n / 2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    var count int = 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    }\n    return false\n}\n",
    "    count := 0\n    for _, v := range arr {\n        if v == x {\n            count++\n        }\n    }\n    return count > n/2\n}\n",
    "    var count int = 0\n    for i := 0; i < n; i++ {\n        if arr[i] == x {\n            count++\n        }\n    }\n    if count > n/2 {\n        return true\n    } else {\n        return false\n    }\n}\n",
    "    // find the first occurrence of x\n    first := -1\n    low := 0\n    high := n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            first = mid\n            high = mid - 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // find the last occurrence of x\n    last := -1\n    low = 0\n    high = n - 1\n    for low <= high {\n        mid := low + (high - low) / 2\n        if arr[mid] == x {\n            last = mid\n            low = mid + 1\n        } else if arr[mid] < x {\n            low = mid + 1\n        } else {\n            high = mid - 1\n        }\n    }\n\n    // check if the element occurs more than n/2 times\n    if first != -1 && last != -1 && last - first + 1 > n / 2 {\n        return true\n    } else {\n        return false\n    }\n}\n"
  ]
}