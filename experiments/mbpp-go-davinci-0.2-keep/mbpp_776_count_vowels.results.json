{
  "name": "mbpp_776_count_vowels",
  "language": "go_test.go",
  "prompt": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && contains(vowels, string(test_str[i+1])) {\n            count++\n        } else if i == len(test_str)-1 && contains(vowels, string(test_str[i-1])) {\n            count++\n        } else if contains(vowels, string(test_str[i-1])) && contains(vowels, string(test_str[i+1])) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4cf7b9ey_test.go:13:22: undefined: contains\n/tmp/tmp4cf7b9ey_test.go:15:43: undefined: contains\n/tmp/tmp4cf7b9ey_test.go:17:19: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxwce5j4o_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxuns9161_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] || vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp9az5kgl7_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp9az5kgl7_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp9az5kgl7_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl20mgaq9_test.go:12:22: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:14:43: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmps_0c2dhd_test.go:55: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmps_0c2dhd_test.go:55: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmps_0c2dhd_test.go:55: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    // TODO: implement\n    return 0\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpa3dmh8ft_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpa3dmh8ft_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpa3dmh8ft_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6dw5wtw0_test.go:13:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:17:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for j := 0; j < len(vowels); j++ {\n                if string(test_str[i+1]) == vowels[j] {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for j := 0; j < len(vowels); j++ {\n                if string(test_str[i-1]) == vowels[j] {\n                    count++\n                }\n            }\n        } else {\n            for j := 0; j < len(vowels); j++ {\n                if string(test_str[i-1]) == vowels[j] || string(test_str[i+1]) == vowels[j] {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpasuoldna_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpasuoldna_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpasuoldna_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := \"aeiou\"\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && vowels[strings.IndexRune(vowels, rune(test_str[i]))] != 0 {\n            count++\n        } else if i == len(test_str) - 1 && vowels[strings.IndexRune(vowels, rune(test_str[i]))] != 0 {\n            count++\n        } else if vowels[strings.IndexRune(vowels, rune(test_str[i]))] != 0 && vowels[strings.IndexRune(vowels, rune(test_str[i-1]))] != 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcyepv7d6_test.go:13:29: undefined: strings\n/tmp/tmpcyepv7d6_test.go:15:52: undefined: strings\n/tmp/tmpcyepv7d6_test.go:17:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' || test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdd0qf3ti_test.go:26:253: rune literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        for _, v := range vowels {\n            if string(test_str[i]) == v {\n                if i == 0 {\n                    if string(test_str[i+1]) == v {\n                        count++\n                    }\n                } else if i == len(test_str)-1 {\n                    if string(test_str[i-1]) == v {\n                        count++\n                    }\n                } else {\n                    if string(test_str[i-1]) == v || string(test_str[i+1]) == v {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpc_e4b0v1_test.go:49: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpc_e4b0v1_test.go:49: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpc_e4b0v1_test.go:49: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp96frfel6_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := \"aeiou\"\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i+1]] == 1 {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i-1]] == 1 {\n                count++\n            }\n        } else {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i-1]] == 1 && vowels[test_str[i+1]] == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\npanic: runtime error: index out of range [98] with length 5 [recovered]\n\tpanic: runtime error: index out of range [98] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_vowels(0x547140, 0xe, 0x5824a3)\n\t/tmp/tmpmdr9d84r_test.go:14 +0x1ca\ncommand-line-arguments_test.TestCount_Vowels(0xc000001380)\n\t/tmp/tmpmdr9d84r_test.go:37 +0x53\ntesting.tRunner(0xc000001380, 0x54f218)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpfof1bse2_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpfof1bse2_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpfof1bse2_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123270,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj115qu75_test.go:12:22: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:14:43: undefined: is_vowel\n/tmp/tmpj115qu75_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    for _, vv := range vowels {\n                        if string(test_str[i - 1]) == vv || string(test_str[i + 1]) == vv {\n                            count++\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp04xt4ji_test.go:55: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp04xt4ji_test.go:55: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp04xt4ji_test.go:55: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rggsqm4_test.go:13:16: undefined: is_vowel\n/tmp/tmp6rggsqm4_test.go:17:16: undefined: is_vowel\n/tmp/tmp6rggsqm4_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_ddrauiv_test.go:12:22: undefined: is_vowel\n/tmp/tmp_ddrauiv_test.go:14:45: undefined: is_vowel\n/tmp/tmp_ddrauiv_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph0qpg1pv_test.go:12:22: undefined: is_vowel\n/tmp/tmph0qpg1pv_test.go:14:45: undefined: is_vowel\n/tmp/tmph0qpg1pv_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj6mfn95v_test.go:13:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:17:16: undefined: is_vowel\n/tmp/tmpj6mfn95v_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_arr = []rune(test_str)\n    for i := 0; i < len(str_arr); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(str_arr[i]) == v || string(str_arr[i+1]) == v {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(str_arr) - 1 {\n            for _, v := range vowels {\n                if string(str_arr[i]) == v || string(str_arr[i-1]) == v {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(str_arr[i]) == v || string(str_arr[i+1]) == v || string(str_arr[i-1]) == v {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_cir052s_test.go:55: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_cir052s_test.go:55: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_cir052s_test.go:55: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyze93mtf_test.go:12:22: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:14:43: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp7pf38qwj_test.go:60: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp7pf38qwj_test.go:60: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp7pf38qwj_test.go:60: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        for _, v := range vowels {\n            if i == 0 && test_str[i+1:i+2] == v {\n                count++\n            } else if i == len(test_str)-1 && test_str[i-1:i] == v {\n                count++\n            } else if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\npanic: runtime error: slice bounds out of range [-1:] [recovered]\n\tpanic: runtime error: slice bounds out of range [-1:]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc00014a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc00014a000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_vowels(0x54713f, 0xe, 0x5824e3)\n\t/tmp/tmp9av2g22n_test.go:18 +0x3a7\ncommand-line-arguments_test.TestCount_Vowels(0xc000102600)\n\t/tmp/tmp9av2g22n_test.go:33 +0x53\ntesting.tRunner(0xc000102600, 0x54f218)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := \"aeiou\"\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[test_str[i]] && vowels[test_str[i+1]] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[test_str[i]] && vowels[test_str[i-1]] {\n                count++\n            }\n        } else {\n            if vowels[test_str[i]] && vowels[test_str[i-1]] && vowels[test_str[i+1]] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk4gls267_test.go:14:36: invalid operation: vowels[test_str[i]] && vowels[test_str[i + 1]] (operator && not defined on uint8)\n/tmp/tmpk4gls267_test.go:18:36: invalid operation: vowels[test_str[i]] && vowels[test_str[i - 1]] (operator && not defined on uint8)\n/tmp/tmpk4gls267_test.go:22:36: invalid operation: vowels[test_str[i]] && vowels[test_str[i - 1]] (operator && not defined on uint8)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9z5c3icp_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && is_vowel(test_str[i + 1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcdm9fj63_test.go:12:22: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:14:45: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && is_vowel(test_str[i + 1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcdm9fj63_test.go:12:22: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:14:45: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i + 1] == 'a' || test_str[i + 1] == 'e' || test_str[i + 1] == 'i' || test_str[i + 1] == 'o' || test_str[i + 1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpqhyzw222_test.go:40: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpqhyzw222_test.go:40: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpqhyzw222_test.go:40: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpnrvqcvih_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpnrvqcvih_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpnrvqcvih_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpq3lnzn1c_test.go:53: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpq3lnzn1c_test.go:53: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str) - 1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_coceynj_test.go:12:22: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:14:45: undefined: is_vowel\n/tmp/tmp_coceynj_test.go:16:53: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i > 0 && test_str[i-1] != ' ' {\n                count++\n            }\n            if i < len(test_str)-1 && test_str[i+1] != ' ' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmprlcag0t6_test.go:39: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmprlcag0t6_test.go:39: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmprlcag0t6_test.go:39: expected '%!s(int=5)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6hkrzl4i_test.go:13:16: undefined: is_vowel\n/tmp/tmp6hkrzl4i_test.go:17:16: undefined: is_vowel\n/tmp/tmp6hkrzl4i_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyze93mtf_test.go:12:22: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:14:43: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    // Your code here\n    return 0\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpfbayenuj_test.go:29: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpfbayenuj_test.go:29: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpfbayenuj_test.go:29: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6b5irc50_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpihn58xo0_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpihn58xo0_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpihn58xo0_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplrxjknn8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsrvpbbhq_test.go:13:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:17:16: undefined: is_vowel\n/tmp/tmpsrvpbbhq_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i, _ := range test_str {\n        if i == 0 {\n            if test_str[i+1:i+2] == \"a\" || test_str[i+1:i+2] == \"e\" || test_str[i+1:i+2] == \"i\" || test_str[i+1:i+2] == \"o\" || test_str[i+1:i+2] == \"u\" {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i-1:i] == \"a\" || test_str[i-1:i] == \"e\" || test_str[i-1:i] == \"i\" || test_str[i-1:i] == \"o\" || test_str[i-1:i] == \"u\" {\n                count++\n            }\n        } else {\n            if test_str[i-1:i] == \"a\" || test_str[i-1:i] == \"e\" || test_str[i-1:i] == \"i\" || test_str[i-1:i] == \"o\" || test_str[i-1:i] == \"u\" || test_str[i+1:i+2] == \"a\" || test_str[i+1:i+2] == \"e\" || test_str[i+1:i+2] == \"i\" || test_str[i+1:i+2] == \"o\" || test_str[i+1:i+2] == \"u\" {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphw9h_bf__test.go:11:9: vowels declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl20mgaq9_test.go:12:22: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:14:43: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp2vpfcup__test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpwhy_7zcx_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpwhy_7zcx_test.go:51: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpwhy_7zcx_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxwce5j4o_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels map[string]bool = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_et69pzn_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_et69pzn_test.go:51: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_et69pzn_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, r := range test_str {\n        if i == 0 {\n            if _, ok := vowels[rune(test_str[i+1])]; ok {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[rune(test_str[i-1])]; ok {\n                count++\n            }\n        } else {\n            if _, ok := vowels[rune(test_str[i-1])]; ok {\n                count++\n            }\n            if _, ok := vowels[rune(test_str[i+1])]; ok {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnj5083nt_test.go:12:12: r declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6dw5wtw0_test.go:13:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:17:16: undefined: is_vowel\n/tmp/tmp6dw5wtw0_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxuns9161_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxuns9161_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var prev_char string\n    var curr_char string\n    var next_char string\n\n    for i := 0; i < len(test_str); i++ {\n        curr_char = string(test_str[i])\n        if i == 0 {\n            prev_char = \"\"\n        } else {\n            prev_char = string(test_str[i-1])\n        }\n        if i == len(test_str) - 1 {\n            next_char = \"\"\n        } else {\n            next_char = string(test_str[i+1])\n        }\n        for _, v := range vowels {\n            if v == prev_char || v == next_char {\n                count++\n                break\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3rfsmn3v_test.go:13:9: curr_char declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr6b0cj7l_test.go:12:22: undefined: is_vowel\n/tmp/tmpr6b0cj7l_test.go:14:43: undefined: is_vowel\n/tmp/tmpr6b0cj7l_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpvpsjggp1_test.go:61: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpvpsjggp1_test.go:61: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpvpsjggp1_test.go:61: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsir7qdnh_test.go:13:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:17:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    var count int\n    for i, char := range test_str {\n        if i == 0 {\n            if vowels[rune(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[rune(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[rune(test_str[i-1])] || vowels[rune(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi8gcmnbz_test.go:12:12: char declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i > 0 && i < len(test_str) - 1 {\n            if vowels[c] && (vowels[rune(test_str[i-1])] || vowels[rune(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123274,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpb2d8nvq5_test.go:37: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp645wspue_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    vowels := map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i == 0 {\n            if vowels[c] && vowels[rune(test_str[i + 1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[c] && vowels[rune(test_str[i - 1])] {\n                count++\n            }\n        } else {\n            if vowels[c] && vowels[rune(test_str[i - 1])] && vowels[rune(test_str[i + 1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpjtuu3c73_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpjtuu3c73_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpjtuu3c73_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        var char = string(test_str[i])\n        if i == 0 {\n            if stringInSlice(string(test_str[i+1]), vowels) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if stringInSlice(string(test_str[i-1]), vowels) {\n                count++\n            }\n        } else {\n            if stringInSlice(string(test_str[i-1]), vowels) || stringInSlice(string(test_str[i+1]), vowels) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdc_j4n92_test.go:15:16: undefined: stringInSlice\n/tmp/tmpdc_j4n92_test.go:19:16: undefined: stringInSlice\n/tmp/tmpdc_j4n92_test.go:23:16: undefined: stringInSlice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && vowels[string(test_str[i])] {\n            count++\n        } else if i == len(test_str) - 1 && vowels[string(test_str[i])] {\n            count++\n        } else if vowels[string(test_str[i])] && vowels[string(test_str[i + 1])] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpk4lt8ofy_test.go:45: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpk4lt8ofy_test.go:45: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpk4lt8ofy_test.go:45: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpd2phz5in_test.go:54: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpqujjufoz_test.go:45: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpqujjufoz_test.go:45: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, c := range test_str {\n        if i == 0 && vowels[c] {\n            count++\n        } else if i == len(test_str) - 1 && vowels[c] {\n            count++\n        } else if vowels[c] && vowels[rune(test_str[i+1])] {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpua4a87cq_test.go:39: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpua4a87cq_test.go:39: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpua4a87cq_test.go:39: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i+1]) == v {\n                        count++\n                    }\n                }\n            }\n        } else if i == len(test_str)-1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i-1]) == v {\n                        count++\n                    }\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v {\n                    if string(test_str[i-1]) == v || string(test_str[i+1]) == v {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpncl6y_mt_test.go:57: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpncl6y_mt_test.go:57: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpncl6y_mt_test.go:57: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123272,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpn5ist3x8_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if (i == 0 && is_vowel(test_str[i+1])) || (i == len(test_str)-1 && is_vowel(test_str[i-1])) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpal9tsavx_test.go:12:23: undefined: is_vowel\n/tmp/tmpal9tsavx_test.go:14:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    vowels := \"aeiou\"\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i+1]] == 1 {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i-1]] == 1 {\n                count++\n            }\n        } else {\n            if vowels[test_str[i]] == 1 && vowels[test_str[i-1]] == 1 && vowels[test_str[i+1]] == 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\npanic: runtime error: index out of range [98] with length 5 [recovered]\n\tpanic: runtime error: index out of range [98] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000016468)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.count_vowels(0x547140, 0xe, 0x5824a3)\n\t/tmp/tmpmdr9d84r_test.go:14 +0x1ca\ncommand-line-arguments_test.TestCount_Vowels(0xc000001380)\n\t/tmp/tmpmdr9d84r_test.go:37 +0x53\ntesting.tRunner(0xc000001380, 0x54f218)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyze93mtf_test.go:12:22: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:14:43: undefined: is_vowel\n/tmp/tmpyze93mtf_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123277,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpuua13oq2_test.go:54: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count += 1\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count += 1\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count += 1\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmptwpp85fb_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmptwpp85fb_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmptwpp85fb_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpqujjufoz_test.go:45: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpqujjufoz_test.go:45: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp_wl82iy_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = map[rune]bool{'a': true, 'e': true, 'i': true, 'o': true, 'u': true}\n    for i, char := range test_str {\n        if i == 0 {\n            if vowels[rune(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if vowels[rune(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[rune(test_str[i-1])] || vowels[rune(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplia9e682_test.go:12:12: char declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp8tgm92z__test.go:60: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp8tgm92z__test.go:60: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp8tgm92z__test.go:60: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else if i == len(test_str)-1 {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i] == v[0] || test_str[i-1] == v[0] || test_str[i+1] == v[0] {\n                    count++\n                    break\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpydxmdwfz_test.go:54: expected '%!s(int=7)', got '%!s(int=12)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpydxmdwfz_test.go:54: expected '%!s(int=12)', got '%!s(int=21)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpydxmdwfz_test.go:54: expected '%!s(int=5)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp7mqq1sfg_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && (vowels[string(test_str[i-1])] || vowels[string(test_str[i+1])]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp1fh9p5it_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnp8ijezf_test.go:13:16: undefined: is_vowel\n/tmp/tmpnp8ijezf_test.go:17:16: undefined: is_vowel\n/tmp/tmpnp8ijezf_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpz37kar6q_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n            if i == 0 {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            } else if i == len(test_str)-1 {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            } else {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' ||\n                   test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6xyt3190_test.go:47: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6xyt3190_test.go:47: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp6xyt3190_test.go:47: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok || _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123285,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpyfap6j39_test.go:27:60: expected identifier on left side of :=\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxuns9161_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len int = len(test_str)\n    var i int = 0\n    for i < str_len {\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == str_len - 1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n        i++\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123286,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9dyladdt_test.go:16:16: undefined: contains\n/tmp/tmp9dyladdt_test.go:20:16: undefined: contains\n/tmp/tmp9dyladdt_test.go:24:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i+1]) && is_vowel(test_str[i-1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpizm5f0oo_test.go:12:22: undefined: is_vowel\n/tmp/tmpizm5f0oo_test.go:14:43: undefined: is_vowel\n/tmp/tmpizm5f0oo_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' ||\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123269,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpan32lab7_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyaijy1cg_test.go:13:16: undefined: is_vowel\n/tmp/tmpyaijy1cg_test.go:17:16: undefined: is_vowel\n/tmp/tmpyaijy1cg_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i+1]) == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && string(test_str[i-1]) == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if string(test_str[i]) == v && (string(test_str[i-1]) == v || string(test_str[i+1]) == v) {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpf88000ai_test.go:51: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpf88000ai_test.go:51: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpf88000ai_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123265,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmsujj0gz_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n        } else {\n            if contains(vowels, string(test_str[i-1])) || contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123276,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmie59810_test.go:14:16: undefined: contains\n/tmp/tmpmie59810_test.go:18:16: undefined: contains\n/tmp/tmpmie59810_test.go:22:16: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl20mgaq9_test.go:12:22: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:14:43: undefined: is_vowel\n/tmp/tmpl20mgaq9_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if i == len(test_str) - 1 && (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') {\n            count++\n        } else if (test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u') && (test_str[i - 1] == 'a' || test_str[i - 1] == 'e' || test_str[i - 1] == 'i' || test_str[i - 1] == 'o' || test_str[i - 1] == 'u') {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp6_ivo1jk_test.go:38: expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp6_ivo1jk_test.go:38: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp6_ivo1jk_test.go:38: expected '%!s(int=5)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpqldcjlgs_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp006c0exi_test.go:13:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:17:16: undefined: is_vowel\n/tmp/tmp006c0exi_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i+1]) {\n            count++\n        } else if i == len(test_str)-1 && is_vowel(test_str[i-1]) {\n            count++\n        } else if i > 0 && i < len(test_str)-1 && is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123267,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcx6z6jt_test.go:12:22: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:14:43: undefined: is_vowel\n/tmp/tmpbcx6z6jt_test.go:16:51: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510201,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptxxeuc25_test.go:13:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:17:16: undefined: is_vowel\n/tmp/tmptxxeuc25_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if _, ok := vowels[string(test_str[i])]; ok {\n            if i == 0 {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            } else if i == len(test_str)-1 {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            } else {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp598ancp0_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp598ancp0_test.go:50: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp598ancp0_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i + 1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i - 1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i - 1])] || vowels[string(test_str[i + 1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpquvwblz8_test.go:51: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpquvwblz8_test.go:51: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            for _, v := range vowels {\n                if test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v {\n                    count++\n                }\n            }\n        } else {\n            for _, v := range vowels {\n                if test_str[i-1:i] == v || test_str[i+1:i+2] == v {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123278,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=7)', got '%!s(int=10)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=12)', got '%!s(int=18)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpp8y2xfi5_test.go:51: expected '%!s(int=5)', got '%!s(int=7)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str)-1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwljlhgwv_test.go:13:16: undefined: is_vowel\n/tmp/tmpwljlhgwv_test.go:17:16: undefined: is_vowel\n/tmp/tmpwljlhgwv_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if (i == 0 && is_vowel(test_str[i+1])) || (i == len(test_str)-1 && is_vowel(test_str[i-1])) {\n            count++\n        } else if is_vowel(test_str[i-1]) && is_vowel(test_str[i+1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_heu006e_test.go:12:23: undefined: is_vowel\n/tmp/tmp_heu006e_test.go:14:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i-1]) || is_vowel(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510202,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvksztqsy_test.go:13:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:17:16: undefined: is_vowel\n/tmp/tmpvksztqsy_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmphkma8pig_test.go:51: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmphkma8pig_test.go:51: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmphkma8pig_test.go:51: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpj6z8avqq_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        } else if i == len(test_str)-1 {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n            }\n        } else {\n            if _, ok := vowels[string(test_str[i])]; ok {\n                if _, ok := vowels[string(test_str[i-1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i+1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123273,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpmccp8igt_test.go:54: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123271,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmp_5a8wzy3_test.go:45: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    count := 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                count++\n            }\n        } else {\n            if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' || test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmp8c24s7_y_test.go:44: expected '%!s(int=7)', got '%!s(int=9)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmp8c24s7_y_test.go:44: expected '%!s(int=12)', got '%!s(int=16)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] {\n                count++\n            }\n        } else {\n            if vowels[string(test_str[i])] && vowels[string(test_str[i-1])] && vowels[string(test_str[i+1])] {\n                count++\n            }\n        }\n    }\n\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=7)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=12)', got '%!s(int=0)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpwtai2rv1_test.go:53: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) || is_vowel(test_str[i-1]) || is_vowel(test_str[i+1]) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpliqz51ka_test.go:13:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:17:16: undefined: is_vowel\n/tmp/tmpliqz51ka_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 && is_vowel(test_str[i]) {\n            count++\n        } else if i == len(test_str) - 1 && is_vowel(test_str[i]) {\n            count++\n        } else if is_vowel(test_str[i]) && is_vowel(test_str[i + 1]) {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123282,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcdm9fj63_test.go:12:22: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:14:45: undefined: is_vowel\n/tmp/tmpcdm9fj63_test.go:16:19: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var str_len = len(test_str)\n    for i := 0; i < str_len; i++ {\n        var curr_char = string(test_str[i])\n        if contains(vowels, curr_char) {\n            if i > 0 && contains(vowels, string(test_str[i-1])) {\n                count++\n            }\n            if i < str_len-1 && contains(vowels, string(test_str[i+1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44wp_bqa_test.go:15:12: undefined: contains\n/tmp/tmp44wp_bqa_test.go:16:25: undefined: contains\n/tmp/tmp44wp_bqa_test.go:19:33: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var test_str_arr = []rune(test_str)\n    for i := 0; i < len(test_str_arr); i++ {\n        for j := 0; j < len(vowels); j++ {\n            if string(test_str_arr[i]) == vowels[j] {\n                if i > 0 && i < len(test_str_arr) - 1 {\n                    if string(test_str_arr[i - 1]) == vowels[j] || string(test_str_arr[i + 1]) == vowels[j] {\n                        count++\n                    }\n                } else if i == 0 {\n                    if string(test_str_arr[i + 1]) == vowels[j] {\n                        count++\n                    }\n                } else if i == len(test_str_arr) - 1 {\n                    if string(test_str_arr[i - 1]) == vowels[j] {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpg53o4bio_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpg53o4bio_test.go:50: expected '%!s(int=12)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpg53o4bio_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n            }\n        } else if i == len(test_str) - 1 {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o' || test_str[i-1] == 'u' {\n                    count++\n                }\n            }\n        } else {\n            if test_str[i] == 'a' || test_str[i] == 'e' || test_str[i] == 'i' || test_str[i] == 'o' || test_str[i] == 'u' {\n                if test_str[i+1] == 'a' || test_str[i+1] == 'e' || test_str[i+1] == 'i' || test_str[i+1] == 'o' || test_str[i+1] == 'u' {\n                    count++\n                }\n                if test_str[i-1] == 'a' || test_str[i-1] == 'e' || test_str[i-1] == 'i' || test_str[i-1] == 'o'\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510200,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprypidsgo_test.go:30:6: expected '(', found TestCount_Vowels\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int = 0\n    var vowels = map[string]int{\"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0, \"u\": 0}\n    for i := 0; i < len(test_str); i++ {\n        if _, ok := vowels[string(test_str[i])]; ok {\n            if i > 0 && i < len(test_str) - 1 {\n                if _, ok := vowels[string(test_str[i - 1])]; ok {\n                    count++\n                }\n                if _, ok := vowels[string(test_str[i + 1])]; ok {\n                    count++\n                }\n            } else if i == 0 {\n                if _, ok := vowels[string(test_str[i + 1])]; ok {\n                    count++\n                }\n            } else if i == len(test_str) - 1 {\n                if _, ok := vowels[string(test_str[i - 1])]; ok {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123287,
      "stdout": "--- FAIL: TestCount_Vowels (0.00s)\n    --- FAIL: TestCount_Vowels/test_num__0 (0.00s)\n        tmpnttwltct_test.go:50: expected '%!s(int=7)', got '%!s(int=2)'\n    --- FAIL: TestCount_Vowels/test_num__1 (0.00s)\n        tmpnttwltct_test.go:50: expected '%!s(int=12)', got '%!s(int=4)'\n    --- FAIL: TestCount_Vowels/test_num__2 (0.00s)\n        tmpnttwltct_test.go:50: expected '%!s(int=5)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_vowels_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to count those characters which have vowels as their neighbors in the given string.\nfunc count_vowels(test_str string) int {\n    var count int\n    for i := 0; i < len(test_str); i++ {\n        if i == 0 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i+1]) {\n                count++\n            }\n        } else if i == len(test_str) - 1 {\n            if is_vowel(test_str[i]) && is_vowel(test_str[i-1]) {\n                count++\n            }\n        } else {\n            if is_vowel(test_str[i]) && (is_vowel(test_str[i+1]) || is_vowel(test_str[i-1])) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Vowels(t *testing.T) {\n  candidate := count_vowels\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"bestinstareels\"), expected: 7 },\n     { actual: candidate(\"partofthejourneyistheend\"), expected: 12 },\n     { actual: candidate(\"amazonprime\"), expected: 5 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123275,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsir7qdnh_test.go:13:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:17:16: undefined: is_vowel\n/tmp/tmpsir7qdnh_test.go:21:16: undefined: is_vowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}