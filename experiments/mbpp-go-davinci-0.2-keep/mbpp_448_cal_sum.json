{
  "name": "mbpp_448_cal_sum",
  "language": "go_test.go",
  "prompt": "package cal_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to calculate the sum of perrin numbers.\nfunc cal_sum(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCal_Sum(t *testing.T) {\n  candidate := cal_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(9), expected: 49 },\n     { actual: candidate(10), expected: 66 },\n     { actual: candidate(11), expected: 88 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 3\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n - 2) + cal_sum(n - 3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    } else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 2\n    } else {\n        return cal_sum(n-2) + cal_sum(n-3)\n    }\n}\n",
    "    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    if n == 3 {\n        return 2\n    }\n    if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 5\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    if n < 3 {\n        return 0\n    }\n\n    var sum int\n    var perrin_nums []int\n    perrin_nums = append(perrin_nums, 3)\n    perrin_nums = append(perrin_nums, 0)\n    perrin_nums = append(perrin_nums, 2)\n    for i := 3; i < n; i++ {\n        perrin_nums = append(perrin_nums, perrin_nums[i-2] + perrin_nums[i-3])\n    }\n\n    for _, v := range perrin_nums {\n        sum += v\n    }\n\n    return sum\n}\n",
    "    if n == 0 {\n        return 3\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 2\n    }\n    return cal_sum(n-2) + cal_sum(n-3)\n}\n",
    "    var sum int\n    for i := 1; i <= n; i++ {\n        sum += perrin(i)\n    }\n    return sum\n}\n"
  ]
}