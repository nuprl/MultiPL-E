{
  "name": "mbpp_604_reverse_words",
  "language": "go_test.go",
  "prompt": "package reverse_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to reverse words seperated by spaces in a given string.\nfunc reverse_words(s string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestReverse_Words(t *testing.T) {\n  candidate := reverse_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python program\"), expected: \"program python\" },\n     { actual: candidate(\"java language\"), expected: \"language java\" },\n     { actual: candidate(\"indian man\"), expected: \"man indian\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i] + \" \"\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    words := make([]string, 0)\n    word := make([]byte, 0)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            words = append(words, string(word))\n            word = make([]byte, 0)\n        } else {\n            word = append(word, s[i])\n        }\n    }\n    words = append(words, string(word))\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return strings.Join(words, \" \")\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i] + \" \"\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i] + \" \"\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result[:len(result)-1]\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    if len(s) == 0 {\n        return \"\"\n    }\n\n    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    reversed := \"\"\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var b []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            b = append(b, word...)\n            b = append(b, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    b = append(b, word...)\n    return string(b)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i] + \" \"\n    }\n    return reversed[:len(reversed) - 1]\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            result = append(result, word...)\n            result = append(result, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    result = append(result, word...)\n    return string(result)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word = word + string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = reversed + words[i]\n        if i > 0 {\n            reversed = reversed + \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = \" \" + word + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + result\n    return result\n}\n",
    "    // Split the string into words.\n    words := strings.Split(s, \" \")\n    // Reverse the words.\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    // Join the words back into a string.\n    return strings.Join(words, \" \")\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word = word + string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = reversed + words[i] + \" \"\n    }\n    return reversed[:len(reversed) - 1]\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed_words []string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed_words = append(reversed_words, words[i])\n    }\n    return strings.Join(reversed_words, \" \")\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var r string\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == ' ' {\n            r += \" \"\n        } else {\n            for j := i; j >= 0; j-- {\n                if s[j] == ' ' {\n                    break\n                }\n                r += string(s[j])\n            }\n            i = j\n        }\n    }\n    return r\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result string\n    var word string\n\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var r []rune\n    var w []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, w...)\n            r = append(r, ' ')\n            w = w[:0]\n        } else {\n            w = append(w, c)\n        }\n    }\n    r = append(r, w...)\n    return string(r)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result[:len(result)-1]\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    if len(s) == 0 {\n        return s\n    }\n\n    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return strings.Join(words, \" \")\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    if len(s) == 0 {\n        return \"\"\n    }\n\n    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed []string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = append(reversed, words[i])\n    }\n\n    return fmt.Sprintf(\"%s\", strings.Join(reversed, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = word[:0]\n        } else {\n            word = append(word, s[i])\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var r []rune\n    var word []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append(word, c)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var ret string\n    for i := len(words) - 1; i >= 0; i-- {\n        ret += words[i]\n        if i != 0 {\n            ret += \" \"\n        }\n    }\n    return ret\n}\n",
    "    var r []rune\n    var w []rune\n\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, w...)\n            r = append(r, ' ')\n            w = w[:0]\n        } else {\n            w = append(w, c)\n        }\n    }\n    r = append(r, w...)\n\n    return string(r)\n}\n",
    "    var result string\n    for i := len(s) - 1; i >= 0; i-- {\n        if s[i] == ' ' {\n            result += \" \"\n        } else {\n            for j := i; j >= 0; j-- {\n                if s[j] == ' ' {\n                    result += s[j+1:i+1]\n                    i = j\n                    break\n                } else if j == 0 {\n                    result += s[j:i+1]\n                    i = j\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word = word + string(c)\n        }\n    }\n    words = append(words, word)\n\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var r string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            r = fmt.Sprintf(\"%s%s \", r, word)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    r = fmt.Sprintf(\"%s%s\", r, word)\n    return r\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = word[:0]\n        } else {\n            word = append(word, s[i])\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(word, r...)\n            r = append(r, ' ')\n            word = word[:0]\n        } else {\n            word = append(word, s[i])\n        }\n    }\n    r = append(word, r...)\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var (\n        i, j int\n        r []rune\n    )\n    for _, c := range s {\n        if c == ' ' {\n            for k := j-1; k >= i; k-- {\n                r = append(r, s[k])\n            }\n            r = append(r, ' ')\n            i = j + 1\n        }\n        j++\n    }\n    for k := j-1; k >= i; k-- {\n        r = append(r, s[k])\n    }\n    return string(r)\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        j := i\n        for ; j < len(s) && s[j] != ' '; j++ {}\n        words = append(words, s[i:j])\n        i = j\n    }\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var reversed string\n    for i := len(words)-1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var i, j int\n    var res string\n    for i = len(s) - 1; i >= 0; i-- {\n        if s[i] == ' ' {\n            res += s[i+1:j+1] + \" \"\n            j = i\n        } else if i == 0 {\n            res += s[i:j+1]\n        }\n    }\n    return res\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result[:len(result)-1]\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result[:len(result)-1]\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = fmt.Sprintf(\"%s%s \", reversed, words[i])\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = word + \" \" + result\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = word + \" \" + result\n    return result[:len(result)-1]\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i != 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return strings.Join(words, \" \")\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i > 0; i-- {\n        reversed += words[i] + \" \"\n    }\n    reversed += words[0]\n    return reversed\n}\n",
    "    var r []rune\n    var word []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, word...)\n            r = append(r, c)\n            word = nil\n        } else {\n            word = append(word, c)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(word, r...)\n            r = append(r, ' ')\n            word = word[:0]\n        } else {\n            word = append(word, s[i])\n        }\n    }\n    r = append(word, r...)\n    return string(r)\n}\n",
    "    var result []string\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] != ' ' {\n            word = append(word, s[i])\n        } else {\n            result = append(result, string(word))\n            word = nil\n        }\n    }\n    result = append(result, string(word))\n    for i, j := 0, len(result) - 1; i < j; i, j = i + 1, j - 1 {\n        result[i], result[j] = result[j], result[i]\n    }\n    return fmt.Sprintf(\"%s\", result)\n}\n",
    "    var word string\n    var words []string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    // Split the string into words\n    words := strings.Split(s, \" \")\n\n    // Reverse the words\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    // Join the words back together\n    return strings.Join(words, \" \")\n}\n",
    "    var (\n        words []string\n        word string\n    )\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var r string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            r = fmt.Sprintf(\"%s%s \", word, r)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    r = fmt.Sprintf(\"%s%s\", word, r)\n    return r\n}\n",
    "    var r []byte\n    var w []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, w...)\n            r = append(r, ' ')\n            w = w[:0]\n        } else {\n            w = append(w, s[i])\n        }\n    }\n    r = append(r, w...)\n    return string(r)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var r []rune\n    var w []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, w...)\n            r = append(r, ' ')\n            w = nil\n        } else {\n            w = append(w, c)\n        }\n    }\n    r = append(r, w...)\n    return string(r)\n}\n",
    "    var r []byte\n    var w []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, w...)\n            r = append(r, ' ')\n            w = w[:0]\n        } else {\n            w = append(w, s[i])\n        }\n    }\n    r = append(r, w...)\n    return string(r)\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var (\n        r []rune\n        i int\n    )\n    for _, c := range s {\n        if c == ' ' {\n            for j := i - 1; j >= 0; j-- {\n                r = append(r, s[j])\n            }\n            r = append(r, ' ')\n            i = 0\n        } else {\n            i++\n        }\n    }\n    for j := i - 1; j >= 0; j-- {\n        r = append(r, s[j])\n    }\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var result string\n    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var res string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            res = fmt.Sprintf(\"%s%s \", word, res)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    res = fmt.Sprintf(\"%s%s\", word, res)\n    return res\n}\n",
    "    var word string\n    var words []string\n    var i int\n    for i = 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(s[i])\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i = len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var r []byte\n    var word []byte\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append([]byte{s[i]}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n                words = append(words, word)\n                word = \"\"\n            }\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i]\n        if i > 0 {\n            reversed += \" \"\n        }\n    }\n    return reversed\n}\n",
    "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words)-1; i < j; i, j = i+1, j-1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(words, \" \"))\n}\n",
    "    var result string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            result = fmt.Sprintf(\"%s%s \", word, result)\n            word = \"\"\n        } else {\n            word = fmt.Sprintf(\"%s%c\", word, c)\n        }\n    }\n    result = fmt.Sprintf(\"%s%s\", word, result)\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var reversed []string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed = append(reversed, words[i])\n    }\n    return fmt.Sprintf(\"%s\", strings.Join(reversed, \" \"))\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var r []rune\n    var word []rune\n    for _, c := range s {\n        if c == ' ' {\n            r = append(r, word...)\n            r = append(r, ' ')\n            word = nil\n        } else {\n            word = append([]rune{c}, word...)\n        }\n    }\n    r = append(r, word...)\n    return string(r)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    for i, j := 0, len(words) - 1; i < j; i, j = i + 1, j - 1 {\n        words[i], words[j] = words[j], words[i]\n    }\n    return fmt.Sprintf(\"%s\", words)\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n\n    var reversed string\n    for i := len(words) - 1; i >= 0; i-- {\n        reversed += words[i] + \" \"\n    }\n    return reversed\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i > 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    var word string\n    for _, c := range s {\n        if c == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    words = append(words, word)\n    var result string\n    for i := len(words) - 1; i >= 0; i-- {\n        result += words[i]\n        if i != 0 {\n            result += \" \"\n        }\n    }\n    return result\n}\n"
  ]
}