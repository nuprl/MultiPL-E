{
  "name": "mbpp_130_max_occurrences",
  "language": "go_test.go",
  "prompt": "package max_occurrences_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the item with maximum frequency in a given list.\nfunc max_occurrences(nums []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Occurrences(t *testing.T) {\n  candidate := max_occurrences\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2}), expected: 2 },\n     { actual: candidate([]int{2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18}), expected: 8 },\n     { actual: candidate([]int{10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10}), expected: 20 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var (\n        max_num int\n        max_count int\n        count int\n    )\n    for i := 0; i < len(nums); i++ {\n        count = 0\n        for j := 0; j < len(nums); j++ {\n            if nums[i] == nums[j] {\n                count++\n            }\n        }\n        if count > max_count {\n            max_count = count\n            max_num = nums[i]\n        }\n    }\n    return max_num\n}\n",
    "    var max_num, max_count int\n    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n        if num_map[num] > max_count {\n            max_num = num\n            max_count = num_map[num]\n        }\n    }\n    return max_num\n}\n",
    "    num_map := make(map[int]int)\n    for _, num := range nums {\n        num_map[num]++\n    }\n    max_num := 0\n    max_count := 0\n    for num, count := range num_map {\n        if count > max_count {\n            max_num = num\n            max_count = count\n        }\n    }\n    return max_num\n}\n",
    "    var max int\n    var max_count int\n    counts := make(map[int]int)\n    for _, num := range nums {\n        counts[num]++\n        if counts[num] > max_count {\n            max = num\n            max_count = counts[num]\n        }\n    }\n    return max\n}\n",
    "    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n\n    max := 0\n    max_key := 0\n    for k, v := range m {\n        if v > max {\n            max = v\n            max_key = k\n        }\n    }\n    return max_key\n}\n",
    "    counts := make(map[int]int)\n    for _, n := range nums {\n        counts[n]++\n    }\n    max := 0\n    max_n := 0\n    for n, c := range counts {\n        if c > max {\n            max = c\n            max_n = n\n        }\n    }\n    return max_n\n}\n",
    "    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    max := 0\n    max_key := 0\n    for k, v := range m {\n        if v > max {\n            max = v\n            max_key = k\n        }\n    }\n    return max_key\n}\n",
    "    if len(nums) == 0 {\n        return 0\n    }\n\n    var max_num int\n    var max_count int\n    var count int\n\n    for i := 0; i < len(nums); i++ {\n        count = 0\n        for j := 0; j < len(nums); j++ {\n            if nums[i] == nums[j] {\n                count++\n            }\n        }\n        if count > max_count {\n            max_count = count\n            max_num = nums[i]\n        }\n    }\n\n    return max_num\n}\n",
    "    var max_count int\n    var max_num int\n    var count int\n    var num int\n    for i := 0; i < len(nums); i++ {\n        num = nums[i]\n        count = 0\n        for j := 0; j < len(nums); j++ {\n            if nums[j] == num {\n                count++\n            }\n        }\n        if count > max_count {\n            max_count = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n",
    "    var max_num, max_count int\n    num_count := make(map[int]int)\n    for _, num := range nums {\n        num_count[num]++\n        if num_count[num] > max_count {\n            max_num = num\n            max_count = num_count[num]\n        }\n    }\n    return max_num\n}\n",
    "    var max_num, max_count int\n    counts := make(map[int]int)\n    for _, num := range nums {\n        counts[num] += 1\n        if counts[num] > max_count {\n            max_num = num\n            max_count = counts[num]\n        }\n    }\n    return max_num\n}\n",
    "    var max_count, max_num int\n    num_count := make(map[int]int)\n    for _, num := range nums {\n        num_count[num]++\n        if num_count[num] > max_count {\n            max_count = num_count[num]\n            max_num = num\n        }\n    }\n    return max_num\n}\n",
    "    var max, max_count int\n    counts := make(map[int]int)\n    for _, n := range nums {\n        counts[n]++\n        if counts[n] > max_count {\n            max_count = counts[n]\n            max = n\n        }\n    }\n    return max\n}\n",
    "    if len(nums) == 0 {\n        return 0\n    }\n    if len(nums) == 1 {\n        return nums[0]\n    }\n    m := make(map[int]int)\n    for _, v := range nums {\n        m[v]++\n    }\n    max := 0\n    max_num := 0\n    for k, v := range m {\n        if v > max {\n            max = v\n            max_num = k\n        }\n    }\n    return max_num\n}\n",
    "    var m = make(map[int]int)\n    var max_key int\n    var max_val int\n    for _, v := range nums {\n        m[v]++\n        if m[v] > max_val {\n            max_key = v\n            max_val = m[v]\n        }\n    }\n    return max_key\n}\n",
    "    m := make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    max := 0\n    max_num := 0\n    for num, count := range m {\n        if count > max {\n            max = count\n            max_num = num\n        }\n    }\n    return max_num\n}\n",
    "    counts := make(map[int]int)\n    for _, n := range nums {\n        counts[n]++\n    }\n    max := 0\n    max_n := 0\n    for n, count := range counts {\n        if count > max {\n            max = count\n            max_n = n\n        }\n    }\n    return max_n\n}\n",
    "    m := make(map[int]int)\n    for _, num := range nums {\n        m[num]++\n    }\n    max_num, max_count := 0, 0\n    for num, count := range m {\n        if count > max_count {\n            max_num, max_count = num, count\n        }\n    }\n    return max_num\n}\n",
    "    m := make(map[int]int)\n    for _, num := range nums {\n        m[num] += 1\n    }\n    max := 0\n    for _, count := range m {\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n",
    "    var max_num, max_count int\n    num_counts := make(map[int]int)\n    for _, num := range nums {\n        num_counts[num]++\n        if num_counts[num] > max_count {\n            max_count = num_counts[num]\n            max_num = num\n        }\n    }\n    return max_num\n}\n"
  ]
}