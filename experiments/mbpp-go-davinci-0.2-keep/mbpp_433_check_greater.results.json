{
  "name": "mbpp_433_check_greater",
  "language": "go_test.go",
  "prompt": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number > value {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpqox828xp_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, element := range arr {\n        if element > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpnrcbf42x_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpnrcbf42x_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpnrcbf42x_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number > value {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpqox828xp_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, a := range arr {\n        if a > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, val := range arr {\n        if number <= val {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, val := range arr {\n        if val > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, val := range arr {\n        if val > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpmvsdgu8n_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpmvsdgu8n_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpmvsdgu8n_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, val := range arr {\n        if number < val {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, val := range arr {\n        if val > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmput_yx1m6_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmput_yx1m6_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmput_yx1m6_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value < number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmp3uuuz8bt_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number < value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if number <= value {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number > v {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123020,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpleft9lia_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number <= v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if v > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpozlwldgx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, value := range arr {\n        if value > number {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "--- FAIL: TestCheck_Greater (0.00s)\n    --- FAIL: TestCheck_Greater/test_num__0 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestCheck_Greater/test_num__1 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestCheck_Greater/test_num__2 (0.00s)\n        tmpbdrj4koj_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package check_greater_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check whether the entered number is greater than the elements of the given array.\nfunc check_greater(arr []int, number int) bool {\n    for _, v := range arr {\n        if number < v {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestCheck_Greater(t *testing.T) {\n  candidate := check_greater\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}, 4), expected: false },\n     { actual: candidate([]int{2, 3, 4, 5, 6}, 8), expected: true },\n     { actual: candidate([]int{9, 7, 4, 8, 6, 1}, 11), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510052,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}