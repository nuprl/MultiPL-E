{
  "name": "mbpp_445_index_multiplication",
  "language": "go_test.go",
  "prompt": "package index_multiplication_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to perform index wise multiplication of tuple elements in the given two tuples.\nfunc index_multiplication(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestIndex_Multiplication(t *testing.T) {\n  candidate := index_multiplication\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{[]interface{}{1, 3}, []interface{}{4, 5}, []interface{}{2, 9}, []interface{}{1, 10}}, []interface{}{[]interface{}{6, 7}, []interface{}{3, 9}, []interface{}{1, 1}, []interface{}{7, 3}}), expected: []interface{}{[]interface{}{6, 21}, []interface{}{12, 45}, []interface{}{2, 9}, []interface{}{7, 30}} },\n     { actual: candidate([]interface{}{[]interface{}{2, 4}, []interface{}{5, 6}, []interface{}{3, 10}, []interface{}{2, 11}}, []interface{}{[]interface{}{7, 8}, []interface{}{4, 10}, []interface{}{2, 2}, []interface{}{8, 4}}), expected: []interface{}{[]interface{}{14, 32}, []interface{}{20, 60}, []interface{}{6, 20}, []interface{}{16, 44}} },\n     { actual: candidate([]interface{}{[]interface{}{3, 5}, []interface{}{6, 7}, []interface{}{4, 11}, []interface{}{3, 12}}, []interface{}{[]interface{}{8, 9}, []interface{}{5, 11}, []interface{}{3, 3}, []interface{}{9, 5}}), expected: []interface{}{[]interface{}{24, 45}, []interface{}{30, 77}, []interface{}{12, 33}, []interface{}{27, 60}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var res_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        res_tup = append(res_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return res_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Tuples are not of equal length\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        new_tup = append(new_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return new_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var tup []interface{}\n    for i, _ := range test_tup1 {\n        tup = append(tup, test_tup1[i] * test_tup2[i])\n    }\n    return tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) * test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Error: Tuples are not of same length\")\n        return result_tup\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i] * test_tup2[i])\n    }\n    return tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            default:\n                return nil\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(float64) * float64(test_tup2[i].(int)))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            default:\n                return nil\n            }\n        default:\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        panic(\"Tuples must be of same length\")\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        tup = append(tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float32:\n            result = append(result, test_tup1[i].(float32) * test_tup2[i].(float32))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i] * test_tup2[i])\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"Tuples are not of same length\")\n        return result\n    }\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(string))\n            }\n        case float64:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(string))\n            }\n        case string:\n            switch test_tup2[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) * test_tup2[i].(string))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Invalid type\")\n            }\n        } else {\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        if i < len(test_tup2) {\n            switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        default:\n            return nil\n        }\n    }\n\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, v := range test_tup1 {\n        result = append(result, v.(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        result = append(result, test_tup1[i] * test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i, _ := range test_tup1 {\n        result_tup = append(result_tup, test_tup1[i] * test_tup2[i])\n    }\n    return result_tup\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        fmt.Println(\"The length of two tuples are not equal.\")\n        return nil\n    }\n    var test_tup3 []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        test_tup3 = append(test_tup3, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return test_tup3\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) * test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result_tup = append(result_tup, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) * test_tup2[i].(int))\n    }\n    return result\n}\n"
  ]
}