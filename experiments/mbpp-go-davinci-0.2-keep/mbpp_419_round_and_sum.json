{
  "name": "mbpp_419_round_and_sum",
  "language": "go_test.go",
  "prompt": "package round_and_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nfunc round_and_sum(list1 interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRound_And_Sum(t *testing.T) {\n  candidate := round_and_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5}), expected: 243 },\n     { actual: candidate([]float64{5, 2, 9, 24.3, 29}), expected: 345 },\n     { actual: candidate([]float64{25.0, 56.7, 89.2}), expected: 513 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n",
    "    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, value := range list1.([]int) {\n            sum += int(value)\n            length++\n        }\n    case []float64:\n        for _, value := range list1.([]float64) {\n            sum += int(value)\n            length++\n        }\n    }\n    return sum * length\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        list := list1.([]int)\n        length = len(list)\n        for _, v := range list {\n            sum += v\n        }\n    case []float64:\n        list := list1.([]float64)\n        length = len(list)\n        for _, v := range list {\n            sum += int(v)\n        }\n    }\n    return sum * length\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += round(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += round(v)\n        }\n    }\n    return sum * len(list1.([]int))\n}\n",
    "    var sum int = 0\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        list2 = make([]int, len(list1.([]float64)))\n        for i, v := range list1.([]float64) {\n            list2[i] = int(v)\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n",
    "    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n",
    "    // your code here\n    return 0\n}\n",
    "    var sum int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += v\n            length++\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length++\n        }\n    }\n    return sum * length\n}\n",
    "    list := list1.([]int)\n    var sum int\n    for _, v := range list {\n        sum += v\n    }\n    return sum\n}\n",
    "    var sum int\n    var list2 []int\n    switch list1.(type) {\n    case []int:\n        list2 = list1.([]int)\n    case []float64:\n        for _, v := range list1.([]float64) {\n            list2 = append(list2, int(v))\n        }\n    case []float32:\n        for _, v := range list1.([]float32) {\n            list2 = append(list2, int(v))\n        }\n    }\n    for _, v := range list2 {\n        sum += v\n    }\n    return sum * len(list2)\n}\n",
    "    var sum int\n    for _, v := range list1.([]int) {\n        sum += int(v)\n    }\n    return sum\n}\n",
    "    var sum int\n    var length int\n    switch list1.(type) {\n    case []int:\n        for _, v := range list1.([]int) {\n            sum += int(v)\n            length += 1\n        }\n    case []float64:\n        for _, v := range list1.([]float64) {\n            sum += int(v)\n            length += 1\n        }\n    }\n    return sum * length\n}\n"
  ]
}