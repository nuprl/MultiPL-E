{
  "name": "mbpp_418_Find_Max",
  "language": "go_test.go",
  "prompt": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []int:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprintf(\"%v\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%v\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []float64:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]float64) {\n                if len(fmt.Sprintf(\"%v\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%v\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprint(v)) > len(fmt.Sprint(max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n",
    "    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n"
  ]
}