{
  "name": "mbpp_627_find_First_Missing",
  "language": "go_test.go",
  "prompt": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    var i int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 0\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i+1] {\n            return array[i] + 1\n        }\n    }\n    return 0\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp7kzto6de_test.go:43: expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp7kzto6de_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    // Write your code here\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpdbbcf046_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpdbbcf046_test.go:37: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpdbbcf046_test.go:37: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] != 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] != 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpdyg_05pq_test.go:43: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i+1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp_lvd9zyy_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp_lvd9zyy_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp_lvd9zyy_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8mdkznjq_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8mdkznjq_test.go:38: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8mdkznjq_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] != 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    if array[len(array)-1] == len(array)-1 {\n        return len(array)\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return 0\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i - 1] > 1 {\n            return array[i - 1] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpohn4ubzy_test.go:46: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpohn4ubzy_test.go:46: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpohn4ubzy_test.go:46: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if array == nil || len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i, v := range array {\n        if v != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp08cv7kwl_test.go:33: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp08cv7kwl_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp08cv7kwl_test.go:33: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpcdn84lrm_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i, v := range array {\n        if v != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] != array[i] + 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpaa48hxtu_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpaa48hxtu_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpaa48hxtu_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] != 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmphhx600f8_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i - 1] > 1 {\n            return array[i - 1] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    // if array is empty, return 1\n    if len(array) == 0 {\n        return 1\n    }\n    // if array is not empty, find the first missing number\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    // if array is not empty, and there is no missing number, return the last number + 1\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpxgv__9aw_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpxgv__9aw_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpxgv__9aw_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpbfioi7p7_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpbfioi7p7_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpbfioi7p7_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    if len(array) == 1 {\n        return array[0] + 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.014s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp151ejag1_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp151ejag1_test.go:38: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp151ejag1_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.016s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    // find the first missing number\n    // array is sorted\n    // array is natural numbers\n    // array is not empty\n    // array is not nil\n    // array is not out of range\n    // array is not duplicated\n    // array is not negative\n    // array is not float\n    // array is not string\n    // array is not boolean\n    // array is not complex\n    // array is not rune\n    // array is not byte\n    // array is not uint\n    // array is not uint8\n    // array is not uint16\n    // array is not uint32\n    // array is not uint64\n    // array is not int\n    // array is not int8\n    // array is not int16\n    // array is not int32\n    // array is not int64\n    // array is not uintptr\n    // array is not float32\n    // array is not float64\n    // array is not complex64\n    // array is not complex128\n    // array is not byte array\n    // array is not string array\n    // array is not bool array\n    // array is not complex array\n    // array is not rune array\n    // array is not uint array\n    // array is not uint8 array\n    // array is not uint16 array\n    // array is not uint32 array\n    // array is not uint64 array\n    // array is not int array\n    // array is not int8 array\n    // array is not int16 array\n    // array is not int32 array\n    // array is not int64 array\n    // array is not uintptr array\n    // array is not float32 array\n    // array is not float64 array\n    // array is not complex64 array\n    // array is not complex128 array\n    // array is not map\n    // array is not channel\n    // array is not function\n    // array is not \nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123251,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpoxpaudau_test.go:63:6: expected '(', found TestFind_First_Missing\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if array == nil || len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpmtrnmgzf_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n\n    if array[0] != 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    var i, j int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            break\n        }\n    }\n    return i\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123251,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8i8djp8x_test.go:10:12: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    if array[len(array)-1] == len(array) {\n        return len(array)\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return 0\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp71erzhwu_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    var i int\n    for i = 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return i\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    if array[len(array)-1] == len(array) {\n        return len(array) + 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return 0\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpri_n7yg7_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpri_n7yg7_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpri_n7yg7_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    if array[len(array)-1] == len(array) {\n        return len(array)\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] != array[i]+1 {\n            return array[i]+1\n        }\n    }\n    return 0\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp6_fkgsqi_test.go:42: expected '%!s(int=4)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] != 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpuzi1xj0f_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i+1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    // find the first missing number\n    // array is sorted\n    // array is natural numbers\n    // array is not empty\n    // array is not null\n    // array is not negative\n    // array is not zero\n    // array is not float\n    // array is not string\n    // array is not boolean\n    // array is not object\n    // array is not array\n    // array is not function\n    // array is not undefined\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    // array is not empty\n    // array is not null\n    // array is not NaN\n    // array is not Infinity\n    // array is not -Infinity\n    //\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123251,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6aw1v36q_test.go:79:6: expected '(', found TestFind_First_Missing\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i - 1] > 1 {\n            return array[i - 1] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpeeqw2zwc_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpmga9oitj_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i-1] + 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpk1vii39l_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n\n    if array[0] != 0 {\n        return 0\n    }\n\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] != array[i - 1] + 1 {\n            return array[i - 1] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpog36ahmm_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpog36ahmm_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpog36ahmm_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp7_wpbswa_test.go:33: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if len(array) == 1 {\n        if array[0] == 1 {\n            return 2\n        } else {\n            return 1\n        }\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 < array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp0vh75ume_test.go:43: expected '%!s(int=0)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    i := 0\n    for i < len(array) {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n        i++\n    }\n    return i + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp6qr_nepe_test.go:38: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp6qr_nepe_test.go:38: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp6qr_nepe_test.go:38: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpv83hrnxb_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] != 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i+1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp1xwsevyh_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n\n    if array[0] != 1 {\n        return 1\n    }\n\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] != 1 {\n            return array[i-1] + 1\n        }\n    }\n\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123252,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpkz_lmfga_test.go:42: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpkz_lmfga_test.go:42: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpkz_lmfga_test.go:42: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i {\n            return i\n        }\n    }\n    return len(array)\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 1; i < len(array); i++ {\n        if array[i] - array[i-1] > 1 {\n            return array[i-1] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp8qhtaob0_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i + 1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpx65rm5aj_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 0\n    }\n    if array[0] != 0 {\n        return 0\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmp3zmp9nzd_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array)-1; i++ {\n        if array[i+1] - array[i] > 1 {\n            return array[i] + 1\n        }\n    }\n    return array[len(array)-1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123250,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpb1gohov__test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    if array[0] != 1 {\n        return 1\n    }\n    for i := 0; i < len(array) - 1; i++ {\n        if array[i] + 1 != array[i + 1] {\n            return array[i] + 1\n        }\n    }\n    return array[len(array) - 1] + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpiifzvhn7_test.go:39: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package find_First_Missing_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the smallest missing number from a sorted list of natural numbers.\nfunc find_First_Missing(array []int) int {\n    if len(array) == 0 {\n        return 1\n    }\n    for i := 0; i < len(array); i++ {\n        if array[i] != i + 1 {\n            return i + 1\n        }\n    }\n    return len(array) + 1\n}\n\nfunc TestFind_First_Missing(t *testing.T) {\n  candidate := find_First_Missing\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, 3}), expected: 4 },\n     { actual: candidate([]int{0, 1, 2, 6, 9}), expected: 3 },\n     { actual: candidate([]int{2, 3, 5, 8, 9}), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510429,
      "stdout": "--- FAIL: TestFind_First_Missing (0.00s)\n    --- FAIL: TestFind_First_Missing/test_num__0 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__1 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=3)', got '%!s(int=1)'\n    --- FAIL: TestFind_First_Missing/test_num__2 (0.00s)\n        tmpvmeyzr8b_test.go:36: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}