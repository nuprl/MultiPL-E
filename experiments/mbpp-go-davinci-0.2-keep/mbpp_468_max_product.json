{
  "name": "mbpp_468_max_product",
  "language": "go_test.go",
  "prompt": "package max_product_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nfunc max_product(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Product(t *testing.T) {\n  candidate := max_product\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 100, 4, 5, 150, 6}), expected: 3000 },\n     { actual: candidate([]int{4, 42, 55, 68, 80}), expected: 50265600 },\n     { actual: candidate([]int{10, 22, 9, 33, 21, 50, 41, 60}), expected: 2460 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    if max < 0 {\n        return max\n    }\n\n    product := 1\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == 0 {\n            product = 0\n            break\n        }\n\n        if arr[i] > 0 {\n            product *= arr[i]\n        }\n    }\n\n    return product\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    if len(arr) == 2 {\n        return arr[0] * arr[1]\n    }\n    if len(arr) == 3 {\n        return arr[0] * arr[1] * arr[2]\n    }\n    if len(arr) == 4 {\n        return max(arr[0] * arr[1] * arr[2], arr[1] * arr[2] * arr[3])\n    }\n    return max(max_product(arr[1:]), max_product(arr[:len(arr)-1]))\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    var max_product int = arr[0]\n    var max_product_so_far int = arr[0]\n    var min_product_so_far int = arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] == 0 {\n            max_product_so_far = 0\n            min_product_so_far = 0\n        } else if arr[i] > 0 {\n            max_product_so_far = max_product_so_far * arr[i]\n            min_product_so_far = min_product_so_far * arr[i]\n        } else {\n            temp := max_product_so_far\n            max_product_so_far = min_product_so_far * arr[i]\n            min_product_so_far = temp * arr[i]\n        }\n        if max_product_so_far > max_product {\n            max_product = max_product_so_far\n        }\n        if max_product_so_far < min_product_so_far {\n            max_product_so_far = min_product_so_far\n        }\n    }\n    return max_product\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max {\n                max = product\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                if arr[j] * arr[i] > max {\n                    max = arr[j] * arr[i]\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max_product := arr[0]\n    for i := 0; i < len(arr); i++ {\n        product := 1\n        for j := i; j < len(arr); j++ {\n            product *= arr[j]\n            if product > max_product {\n                max_product = product\n            }\n        }\n    }\n    return max_product\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[j] > arr[i] {\n                product := arr[i] * arr[j]\n                if product > max {\n                    max = product\n                }\n            }\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    if len(arr) == 1 {\n        return arr[0]\n    }\n\n    max := arr[0]\n    min := arr[0]\n    result := arr[0]\n\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < 0 {\n            max, min = min, max\n        }\n        max = max_int(arr[i], max * arr[i])\n        min = min_int(arr[i], min * arr[i])\n        result = max_int(result, max)\n    }\n    return result\n}\n"
  ]
}