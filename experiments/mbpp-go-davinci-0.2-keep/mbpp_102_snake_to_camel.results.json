{
  "name": "mbpp_102_snake_to_camel",
  "language": "go_test.go",
  "prompt": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if string(c) == \"_\" {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5d80gayf_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5d80gayf_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5d80gayf_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            } else {\n                if word[i-1] == '_' {\n                    result += string(v - 32)\n                } else {\n                    result += string(v)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9375acmz_test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9375acmz_test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9375acmz_test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_letter_of_word bool = true\n    for _, letter := range word {\n        if letter == '_' {\n            is_first_letter_of_word = true\n        } else {\n            if is_first_letter_of_word {\n                result += string(letter)\n                is_first_letter_of_word = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpkqgjxyxt_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpkqgjxyxt_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpkqgjxyxt_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpfeh_xbpc_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpfeh_xbpc_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpfeh_xbpc_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b1248en_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b1248en_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp02ib21qu_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp02ib21qu_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp02ib21qu_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        } else if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpclo6_t0s_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpclo6_t0s_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpclo6_t0s_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel = fmt.Sprintf(\"%c\", v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel = fmt.Sprintf(\"%s%c\", camel, v-32)\n        } else {\n            camel = fmt.Sprintf(\"%s%c\", camel, v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n                prev_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel_word string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        } else if i == 0 {\n            camel_word += string(c)\n        } else if word[i-1] == '_' {\n            camel_word += string(c - 32)\n        } else {\n            camel_word += string(c)\n        }\n    }\n    return camel_word\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpzwvqzf4b_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpzwvqzf4b_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpzwvqzf4b_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first = true\n        } else {\n            if is_first {\n                result += string(c)\n                is_first = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp3l3h2eok_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp3l3h2eok_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp3l3h2eok_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(c - 32)\n                is_first_word = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpei4tj0pz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel = fmt.Sprintf(\"%c\", v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel = fmt.Sprintf(\"%s%c\", camel, v-32)\n        } else {\n            camel = fmt.Sprintf(\"%s%c\", camel, v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpor2x7x20_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(char)\n        } else if word[i-1] == '_' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpqz99h432_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpqz99h432_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpqz99h432_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first = true\n        } else if is_first {\n            result += string(c - 32)\n            is_first = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n        } else if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp7ujy4b3o_test.go:39: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp7ujy4b3o_test.go:39: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp7ujy4b3o_test.go:39: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpr8l58ax5_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_letter bool = true\n\n    for _, letter := range word {\n        if letter == '_' {\n            is_first_letter = true\n        } else {\n            if is_first_letter {\n                result += string(letter - 32)\n                is_first_letter = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(c - 32)\n                next_upper = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpmzuk8z5j_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpmzuk8z5j_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpmzuk8z5j_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var flag bool = false\n    for _, char := range word {\n        if char == '_' {\n            flag = true\n        } else {\n            if flag {\n                result += string(char - 32)\n                flag = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpc1eerjsf_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpc1eerjsf_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpc1eerjsf_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, letter := range word {\n        if letter == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(letter - 32)\n                next_upper = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp91qq4maa_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp91qq4maa_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp91qq4maa_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var flag bool\n    for _, char := range word {\n        if char == '_' {\n            flag = true\n        } else {\n            if flag {\n                result += string(char - 32)\n                flag = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpjkszhodz_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpjkszhodz_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpjkszhodz_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpdq52t5zt_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpdq52t5zt_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpdq52t5zt_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(char)\n        } else if word[i-1] == '_' {\n            result += string(char - 32)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpqz99h432_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpqz99h432_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpqz99h432_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(word[i] - 32)\n                is_first_char = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpixnalhd__test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpixnalhd__test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            camel = fmt.Sprintf(\"%c\", c)\n        } else {\n            camel = fmt.Sprintf(\"%s%c\", camel, c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4g6uhpn8_test.go:39: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4g6uhpn8_test.go:39: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4g6uhpn8_test.go:39: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool = false\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result += string(word[i] - 32)\n            is_upper = false\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4mj8jq9x_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += string(char - 32)\n                next_upper = false\n            } else {\n                camel += string(char)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpa2ia52pd_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpa2ia52pd_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpa2ia52pd_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(word[i] - 32)\n                next_upper = false\n            } else {\n                result += string(word[i])\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpstozmh5y_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n                prev_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n        } else {\n            if is_first_word {\n                result += string(char - 32)\n                is_first_word = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                next_upper = false\n                result += string(char - 32)\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp57sd4d1r_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp57sd4d1r_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp57sd4d1r_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_is_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result += string(c - 32)\n                next_is_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpalzjlq03_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpalzjlq03_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpalzjlq03_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpaffl2ikl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i - 1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp78him69g_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp78him69g_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp78him69g_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 || word[i-1] == '_' {\n            result += string(c)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpstonkxdp_test.go:39: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpstonkxdp_test.go:39: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpstonkxdp_test.go:39: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_letter bool = true\n    for _, letter := range word {\n        if letter == '_' {\n            is_first_letter = true\n        } else {\n            if is_first_letter {\n                result += string(letter - 32)\n                is_first_letter = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = false\n            continue\n        }\n        if is_first_word {\n            result += string(char)\n        } else {\n            result += string(char - 32)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonProgram', got 'pythonPROGRAM'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'PythonLanguage', got 'pythonLANGUAGE'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1cc7ezlv_test.go:41: expected 'ProgrammingLanguage', got 'programmingLANGUAGE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n            continue\n        }\n\n        if is_first_char {\n            result += string(char - 32)\n            is_first_char = false\n        } else {\n            result += string(char)\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp9c6po5am_test.go:42: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, char := range word {\n        if char == '_' {\n            i++\n            char = rune(word[i])\n            result += string(char)\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpxuzp71_4_test.go:38: expected 'PythonProgram', got 'pythonpprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpxuzp71_4_test.go:38: expected 'PythonLanguage', got 'pythonllanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpxuzp71_4_test.go:38: expected 'ProgrammingLanguage', got 'programmingllanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n            continue\n        }\n        if word[i-1] == '_' {\n            result += string(c - 32)\n            continue\n        }\n        result += string(c)\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpqysl44v8_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpqysl44v8_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpqysl44v8_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            } else if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            }\n            if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_2auyl6c_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, c := range word {\n        if i == 0 {\n            camel += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(c - 32)\n        } else {\n            camel += string(c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmplsdhoyaz_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmplsdhoyaz_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmplsdhoyaz_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpabnkx52q_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpt2bn562v_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else if word[i - 1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp3hqtape2_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp3hqtape2_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp3hqtape2_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_word bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_word = true\n            continue\n        }\n        if is_first_word {\n            result += string(char - 32)\n            is_first_word = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            camel += string(c - 32)\n            next_upper = false\n        } else {\n            camel += string(c)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpztnep3ei_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpztnep3ei_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpztnep3ei_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(char - 32)\n            next_upper = false\n        } else {\n            result += string(char)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpszly5bfl_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpszly5bfl_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpszly5bfl_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                result += string(word[i+1] - 32)\n                i++\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp4dmars_g_test.go:41: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp4dmars_g_test.go:41: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp4dmars_g_test.go:41: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool\n    for i, v := range word {\n        if v == '_' {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result += string(v - 32)\n            is_upper = false\n        } else {\n            result += string(v)\n        }\n        if i == len(word) - 1 {\n            break\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpy15psrot_test.go:45: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpy15psrot_test.go:45: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpy15psrot_test.go:45: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, letter := range word {\n        if letter == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(letter - 32)\n                next_upper = false\n            } else {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp55vwwlmx_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp55vwwlmx_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp55vwwlmx_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, c := range word {\n        if c == '_' {\n            is_first_char = true\n            continue\n        }\n        if is_first_char {\n            result += string(c - 32)\n            is_first_char = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n            } else {\n                result += string(char)\n            }\n            prev_char_is_underscore = false\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpxpa8v6bv_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpxpa8v6bv_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpxpa8v6bv_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else {\n            if v == '_' {\n                continue\n            } else if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1m1dpxe9_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n            continue\n        }\n        if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp733er2wr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp733er2wr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result []rune\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                c = c - 32\n                next_upper = false\n            }\n            result = append(result, c)\n        }\n    }\n    return string(result)\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpz7rm2tg0_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpz7rm2tg0_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpz7rm2tg0_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if i == 0 {\n            result += string(c)\n        } else if c == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123211,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp1gzjzr9u_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result = result + string(v)\n        } else if word[i-1] == '_' {\n            result = result + string(v)\n        } else {\n            result = result + string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpd2q_6ewy_test.go:41: expected 'PythonProgram', got 'pythonprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpd2q_6ewy_test.go:41: expected 'PythonLanguage', got 'pythonlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpd2q_6ewy_test.go:41: expected 'ProgrammingLanguage', got 'programminglanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += string(c - 32)\n                is_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpsx50cfwr_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpsx50cfwr_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpsx50cfwr_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n\n    for _, ch := range word {\n        if ch == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(ch - 32)\n                next_upper = false\n            } else {\n                result += string(ch)\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpu700ubvp_test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpu700ubvp_test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpu700ubvp_test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else {\n            if word[i-1] == '_' {\n                result += string(c - 32)\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpm534xxo1_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpm534xxo1_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpm534xxo1_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgwzppz24_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    var flag bool\n    for _, c := range word {\n        if c == '_' {\n            flag = true\n        } else {\n            if flag {\n                camel += string(c - 32)\n                flag = false\n            } else {\n                camel += string(c)\n            }\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp19n8523t_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp19n8523t_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp19n8523t_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else if next_upper {\n            result += string(c - 32)\n            next_upper = false\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp5g5x_ods_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if i == 0 {\n            camel = string(v)\n        } else if v == '_' {\n            continue\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpv70aboc8_test.go:40: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpv70aboc8_test.go:40: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpv70aboc8_test.go:40: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var camel string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            camel += string(v)\n        } else if word[i-1] == '_' {\n            camel += string(v - 32)\n        } else {\n            camel += string(v)\n        }\n    }\n    return camel\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyvdvt30c_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyvdvt30c_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyvdvt30c_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i := 0; i < len(word); i++ {\n        if word[i] == '_' {\n            i++\n            result += string(word[i] - 32)\n        } else {\n            result += string(word[i])\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123216,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpvmf5i8wp_test.go:37: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpvmf5i8wp_test.go:37: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpvmf5i8wp_test.go:37: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var prev_char_is_underscore bool = false\n    for _, char := range word {\n        if char == '_' {\n            prev_char_is_underscore = true\n        } else {\n            if prev_char_is_underscore {\n                result += string(char - 32)\n                prev_char_is_underscore = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123214,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpgkug30t7_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            i++\n            c = rune(word[i])\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123217,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpt_zbnnhn_test.go:38: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpt_zbnnhn_test.go:38: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpt_zbnnhn_test.go:38: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool = false\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpq2pav937_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpq2pav937_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var is_first_char bool = true\n    for _, char := range word {\n        if char == '_' {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result += string(char - 32)\n                is_first_char = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510150,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i > 0 && word[i-1] == '_' {\n            result += string(v - 32)\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpyv5_i3g4_test.go:39: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, c := range word {\n        if c == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(c)\n        } else if word[i-1] == '_' {\n            result += string(c - 32)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp62g4cnko_test.go:41: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result = fmt.Sprintf(\"%c\", v)\n        } else {\n            if v == '_' {\n                continue\n            } else {\n                if word[i-1] == '_' {\n                    result = fmt.Sprintf(\"%s%c\", result, v-32)\n                } else {\n                    result = fmt.Sprintf(\"%s%c\", result, v)\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123217,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpswebm7aw_test.go:44: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpswebm7aw_test.go:44: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpswebm7aw_test.go:44: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, char := range word {\n        if char == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(char - 32)\n                next_upper = false\n            } else {\n                result += string(char)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_hesshdm_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if i == 0 {\n            result += string(v)\n        } else if v == '_' {\n            result += string(word[i+1] - 32)\n            i++\n        } else {\n            result += string(v)\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonProgram', got 'pythonPprogram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'PythonLanguage', got 'pythonLlanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp_b_3k7un_test.go:39: expected 'ProgrammingLanguage', got 'programmingLlanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    var next_upper bool\n    for _, c := range word {\n        if c == '_' {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += string(c - 32)\n                next_upper = false\n            } else {\n                result += string(c)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510149,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmp10vkhwel_test.go:42: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package snake_to_camel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert a snake case string to camel case string.\nfunc snake_to_camel(word string) string {\n    var result string\n    for i, v := range word {\n        if v == '_' {\n            continue\n        }\n        if i == 0 {\n            result += string(v)\n        } else {\n            if word[i-1] == '_' {\n                result += string(v - 32)\n            } else {\n                result += string(v)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestSnake_To_Camel(t *testing.T) {\n  candidate := snake_to_camel\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"python_program\"), expected: \"PythonProgram\" },\n     { actual: candidate(\"python_language\"), expected: \"PythonLanguage\" },\n     { actual: candidate(\"programming_language\"), expected: \"ProgrammingLanguage\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123208,
      "stdout": "--- FAIL: TestSnake_To_Camel (0.00s)\n    --- FAIL: TestSnake_To_Camel/test_num__0 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'PythonProgram', got 'pythonProgram'\n    --- FAIL: TestSnake_To_Camel/test_num__1 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'PythonLanguage', got 'pythonLanguage'\n    --- FAIL: TestSnake_To_Camel/test_num__2 (0.00s)\n        tmpoe60ibts_test.go:43: expected 'ProgrammingLanguage', got 'programmingLanguage'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}