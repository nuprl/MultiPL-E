{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "go_test.go",
  "prompt": "package filter_oddnumbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to filter odd numbers.\nfunc filter_oddnumbers(nums []int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFilter_Oddnumbers(t *testing.T) {\n  candidate := filter_oddnumbers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}), expected: []int{1, 3, 5, 7, 9} },\n     { actual: candidate([]int{10, 20, 45, 67, 84, 93}), expected: []int{45, 67, 93} },\n     { actual: candidate([]int{5, 7, 9, 8, 6, 4, 3}), expected: []int{5, 7, 9, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var odd_nums []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            odd_nums = append(odd_nums, num)\n        }\n    }\n    return odd_nums\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range nums {\n        if v % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, n := range nums {\n        if n % 2 != 0 {\n            result = append(result, n)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range nums {\n        if v % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var odd_nums []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            odd_nums = append(odd_nums, num)\n        }\n    }\n    return odd_nums\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var odd_nums []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            odd_nums = append(odd_nums, num)\n        }\n    }\n    return odd_nums\n}\n",
    "    var result []int\n    for _, n := range nums {\n        if n % 2 != 0 {\n            result = append(result, n)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n\n    for _, v := range nums {\n        if v % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var oddnums []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            oddnums = append(oddnums, num)\n        }\n    }\n    return oddnums\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, n := range nums {\n        if n % 2 == 1 {\n            result = append(result, n)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range nums {\n        if v % 2 == 1 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range nums {\n        if v % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, v := range nums {\n        if v % 2 != 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var odd_nums []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            odd_nums = append(odd_nums, num)\n        }\n    }\n    return odd_nums\n}\n",
    "    var res []int\n    for _, n := range nums {\n        if n % 2 == 1 {\n            res = append(res, n)\n        }\n    }\n    return res\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, n := range nums {\n        if n % 2 != 0 {\n            result = append(result, n)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, n := range nums {\n        if n % 2 == 1 {\n            result = append(result, n)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var oddnumbers []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            oddnumbers = append(oddnumbers, num)\n        }\n    }\n    return oddnumbers\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 == 1 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var result []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}\n",
    "    var odds []int\n    for _, num := range nums {\n        if num % 2 != 0 {\n            odds = append(odds, num)\n        }\n    }\n    return odds\n}\n"
  ]
}