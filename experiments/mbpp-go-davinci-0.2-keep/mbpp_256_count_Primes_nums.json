{
  "name": "mbpp_256_count_Primes_nums",
  "language": "go_test.go",
  "prompt": "package count_Primes_nums_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nfunc count_Primes_nums(n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Primes_Nums(t *testing.T) {\n  candidate := count_Primes_nums\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 2 },\n     { actual: candidate(10), expected: 4 },\n     { actual: candidate(100), expected: 25 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if n < 3 {\n        return 0\n    }\n    primes := make([]bool, n)\n    for i := 2; i < n; i++ {\n        primes[i] = true\n    }\n    for i := 2; i <= n/i; i++ {\n        if primes[i] {\n            for j := i; j <= (n-1)/i; j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if primes[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n < 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    count := 2\n    for i := 5; i < n; i++ {\n        if is_Prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        for j := 2; j < i; j++ {\n            if i % j == 0 {\n                break\n            }\n            if j == i - 1 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    if n < 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i += 2 {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 2\n    }\n    if n == 6 {\n        return 3\n    }\n    if n == 7 {\n        return 3\n    }\n    if n == 8 {\n        return 4\n    }\n    if n == 9 {\n        return 4\n    }\n    if n == 10 {\n        return 4\n    }\n    if n == 11 {\n        return 4\n    }\n    if n == 12 {\n        return 5\n    }\n    if n == 13 {\n        return 5\n    }\n    if n == 14 {\n        return 6\n    }\n    if n == 15 {\n        return 6\n    }\n    if n == 16 {\n        return 6\n    }\n    if n == 17 {\n        return 6\n    }\n    if n == 18 {\n        return 7\n    }\n    if n == 19 {\n        return 7\n    }\n    if n == 20 {\n        return 8\n    }\n    if n == 21 {\n        return 8\n    }\n    if n == 22 {\n        return 8\n    }\n    if n == 23 {\n        return 8\n    }\n    if n == 24 {\n        return 9\n    }\n    if n == 25 {\n        return 9\n    }\n    if n == 26 {\n        return 9\n    }\n    if n == 27 {\n        return 9\n    }\n    if n == 28 {\n        return 10\n    }\n    if n == 29 {\n        return 10\n    }\n    if n == 30 {\n        return 10\n    }\n    if n == 31 {\n        return 10\n    }\n    if n == 32 {\n        return 11\n    }\n    if n == 33 {\n        return 11\n    }\n    if n == 34 {\n        return 11\n    }\n    if n == 35 {\n        return 11\n    }\n    if n == 36 {\n        return 12\n    }\n    if n == 37 {\n        return 12\n    }\n    if n == 38 {\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i += 2 {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n < 2 {\n        return 0\n    }\n    var count int\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i++ {\n        if is_prime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n\n    prime_nums := []int{2}\n    for i := 3; i < n; i++ {\n        is_prime := true\n        for _, prime := range prime_nums {\n            if i % prime == 0 {\n                is_prime = false\n                break\n            }\n        }\n        if is_prime {\n            prime_nums = append(prime_nums, i)\n        }\n    }\n\n    return len(prime_nums)\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    primes := make([]bool, n)\n    for i := 2; i < n; i++ {\n        primes[i] = true\n    }\n    for i := 2; i <= n/2; i++ {\n        if primes[i] {\n            for j := 2; i*j < n; j++ {\n                primes[i*j] = false\n            }\n        }\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if primes[i] {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 0\n    for i := 2; i < n; i++ {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n",
    "    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 2\n    }\n    if n == 6 {\n        return 3\n    }\n    if n == 7 {\n        return 3\n    }\n    if n == 8 {\n        return 4\n    }\n    if n == 9 {\n        return 4\n    }\n    if n == 10 {\n        return 4\n    }\n    if n == 11 {\n        return 4\n    }\n    if n == 12 {\n        return 5\n    }\n    if n == 13 {\n        return 5\n    }\n    if n == 14 {\n        return 6\n    }\n    if n == 15 {\n        return 6\n    }\n    if n == 16 {\n        return 6\n    }\n    if n == 17 {\n        return 6\n    }\n    if n == 18 {\n        return 7\n    }\n    if n == 19 {\n        return 7\n    }\n    if n == 20 {\n        return 8\n    }\n    if n == 21 {\n        return 8\n    }\n    if n == 22 {\n        return 8\n    }\n    if n == 23 {\n        return 8\n    }\n    if n == 24 {\n        return 9\n    }\n    if n == 25 {\n        return 9\n    }\n    if n == 26 {\n        return 9\n    }\n    if n == 27 {\n        return 9\n    }\n    if n == 28 {\n        return 10\n    }\n    if n == 29 {\n        return 10\n    }\n    if n == 30 {\n        return 10\n    }\n    if n == 31 {\n        return 10\n    }\n    if n == 32 {\n        return 11\n    }\n    if n == 33 {\n        return 11\n    }\n    if n == 34 {\n        return 11\n    }\n    if n == 35 {\n        return 11\n    }\n    if n == 36 {\n        return 12\n    }\n    if n == 37 {\n        return 12\n    }\n    if n == 38 {\n",
    "    if n <= 2 {\n        return 0\n    }\n    if n == 3 {\n        return 1\n    }\n    if n == 4 {\n        return 2\n    }\n    if n == 5 {\n        return 2\n    }\n    if n == 6 {\n        return 3\n    }\n    if n == 7 {\n        return 3\n    }\n    if n == 8 {\n        return 4\n    }\n    if n == 9 {\n        return 4\n    }\n    if n == 10 {\n        return 4\n    }\n    if n == 11 {\n        return 4\n    }\n    if n == 12 {\n        return 5\n    }\n    if n == 13 {\n        return 5\n    }\n    if n == 14 {\n        return 6\n    }\n    if n == 15 {\n        return 6\n    }\n    if n == 16 {\n        return 6\n    }\n    if n == 17 {\n        return 6\n    }\n    if n == 18 {\n        return 7\n    }\n    if n == 19 {\n        return 7\n    }\n    if n == 20 {\n        return 8\n    }\n    if n == 21 {\n        return 8\n    }\n    if n == 22 {\n        return 8\n    }\n    if n == 23 {\n        return 8\n    }\n    if n == 24 {\n        return 9\n    }\n    if n == 25 {\n        return 9\n    }\n    if n == 26 {\n        return 9\n    }\n    if n == 27 {\n        return 9\n    }\n    if n == 28 {\n        return 10\n    }\n    if n == 29 {\n        return 10\n    }\n    if n == 30 {\n        return 10\n    }\n    if n == 31 {\n        return 10\n    }\n    if n == 32 {\n        return 11\n    }\n    if n == 33 {\n        return 11\n    }\n    if n == 34 {\n        return 11\n    }\n    if n == 35 {\n        return 11\n    }\n    if n == 36 {\n        return 12\n    }\n    if n == 37 {\n        return 12\n    }\n    if n == 38 {\n",
    "    if n <= 2 {\n        return 0\n    }\n    count := 1\n    for i := 3; i < n; i += 2 {\n        if isPrime(i) {\n            count++\n        }\n    }\n    return count\n}\n"
  ]
}