{
  "name": "mbpp_563_extract_values",
  "language": "go_test.go",
  "prompt": "package extract_values_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to extract values between quotation marks from a string.\nfunc extract_values(text string) []string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestExtract_Values(t *testing.T) {\n  candidate := extract_values\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"Python\", \"PHP\", \"Java\"\"), expected: []string{\"Python\", \"PHP\", \"Java\"} },\n     { actual: candidate(\"\"python\",\"program\",\"language\"\"), expected: []string{\"python\", \"program\", \"language\"} },\n     { actual: candidate(\"\"red\",\"blue\",\"green\",\"yellow\"\"), expected: []string{\"red\", \"blue\", \"green\", \"yellow\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var values []string\n    var value string\n    var in_quotes bool\n\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var result []string\n    var start int\n    var end int\n    var i int\n    for i = 0; i < len(text); i++ {\n        if text[i] == '\"' {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                result = append(result, text[start:end])\n                start = 0\n            }\n        }\n    }\n    return result\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool = false\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var result []string\n    var start, end int\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\"' {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                result = append(result, text[start:end])\n                start = 0\n            }\n        }\n    }\n    return result\n}\n",
    "    var values []string\n    var start int\n    var end int\n    var in_quotes bool\n\n    for i, c := range text {\n        if c == '\"' {\n            if in_quotes {\n                end = i\n                values = append(values, text[start:end])\n                in_quotes = false\n            } else {\n                start = i + 1\n                in_quotes = true\n            }\n        }\n    }\n\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var start, end int\n\n    for i, c := range text {\n        if c == '\"' {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                values = append(values, text[start:end])\n                start = 0\n            }\n        }\n    }\n\n    return values\n}\n",
    "    var result []string\n    var start, end int\n    for i := 0; i < len(text); i++ {\n        if text[i] == '\"' {\n            if start == 0 {\n                start = i + 1\n            } else {\n                end = i\n                result = append(result, text[start:end])\n                start = 0\n            }\n        }\n    }\n    return result\n}\n",
    "    var values []string\n    var start int\n    var end int\n    var i int\n\n    for i = 0; i < len(text); i++ {\n        if text[i] == '\"' {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                values = append(values, text[start+1:end])\n                start = 0\n                end = 0\n            }\n        }\n    }\n\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, char := range text {\n        if char == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(char)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, c := range text {\n        if c == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(c)\n        }\n    }\n    return values\n}\n",
    "    var result []string\n    var start int\n    var end int\n    var i int\n    for i = 0; i < len(text); i++ {\n        if text[i] == '\"' {\n            if start == 0 {\n                start = i\n            } else {\n                end = i\n                result = append(result, text[start+1:end])\n                start = 0\n            }\n        }\n    }\n    return result\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n\n    for _, c := range text {\n        if c == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(c)\n        }\n    }\n\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, c := range text {\n        if c == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(c)\n        }\n    }\n    return values\n}\n",
    "    var values []string\n    var value string\n    var in_quotes bool\n    for _, c := range text {\n        if c == '\"' {\n            if in_quotes {\n                values = append(values, value)\n                value = \"\"\n            }\n            in_quotes = !in_quotes\n        } else if in_quotes {\n            value += string(c)\n        }\n    }\n    return values\n}\n"
  ]
}