{
  "name": "mbpp_471_find_remainder",
  "language": "go_test.go",
  "prompt": "package find_remainder_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the product of the array multiplication modulo n.\nfunc find_remainder(arr []int, n int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Remainder(t *testing.T) {\n  candidate := find_remainder\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{100, 10, 5, 25, 35, 14}, 11), expected: 9 },\n     { actual: candidate([]int{1, 1, 1}, 1), expected: 0 },\n     { actual: candidate([]int{1, 2, 1}, 2), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result int = 1\n    for _, v := range arr {\n        result = (result * v) % n\n    }\n    return result\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, num := range arr {\n        product *= num\n    }\n    return product % n\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var result int = 1\n    for _, v := range arr {\n        result = (result * v) % n\n    }\n    return result\n}\n",
    "    var product int = 1\n    for _, num := range arr {\n        product *= num\n    }\n    return product % n\n}\n",
    "    product := 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product *= v\n    }\n    return product % n\n}\n",
    "    var result int = 1\n    for _, v := range arr {\n        result = (result * v) % n\n    }\n    return result\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var result int = 1\n    for _, v := range arr {\n        result = (result * v) % n\n    }\n    return result\n}\n",
    "    var product int = 1\n    for i := 0; i < len(arr); i++ {\n        product = (product * arr[i]) % n\n    }\n    return product\n}\n",
    "    product := 1\n    for _, v := range arr {\n        product *= v\n    }\n    return product % n\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product = (product * v) % n\n    }\n    return product\n}\n",
    "    var product int = 1\n    for _, v := range arr {\n        product *= v\n    }\n    return product % n\n}\n",
    "    var prod int = 1\n    for _, v := range arr {\n        prod *= v\n    }\n    return prod % n\n}\n"
  ]
}